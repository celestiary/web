import{__async,__commonJS,__export,__pow,__toESM,require_jsx_runtime,require_react}from"./chunk-FJCDU6YP.js";var require_rafor=__commonJS({"node_modules/rafor/index.js"(exports,module){module.exports=asyncFor2;function asyncFor2(array,visitCallback,doneCallback,options){var start=0,elapsed=0;options=options||{};var step=options.step||1,maxTimeMS=options.maxTimeMS||8,pointsPerLoopCycle=options.probeElements||5e3;setTimeout(processSubset,0);function processSubset(){var finish=Math.min(array.length,start+pointsPerLoopCycle),i=start,timeStart=new Date;for(i=start;i<finish;i+=step)visitCallback(array[i],i,array);i<array.length?(elapsed+=new Date-timeStart,start=i,pointsPerLoopCycle=Math.round(start*maxTimeMS/elapsed),setTimeout(processSubset,0)):doneCallback(array)}}}});var utils_exports={};__export(utils_exports,{assertArgs:()=>assertArgs,assertFinite:()=>assertFinite,assertNotNullOrUndefined:()=>assertNotNullOrUndefined,capitalize:()=>capitalize,createCanvas:()=>createCanvas,elt:()=>elt,measureText:()=>measureText,named:()=>named,newElt:()=>newElt,remove:()=>remove,setTitleFromLocation:()=>setTitleFromLocation,toArrayBuffer:()=>toArrayBuffer,visit:()=>visit,visitFilterProperty:()=>visitFilterProperty,visitToggleProperty:()=>visitToggleProperty});function assertNotNullOrUndefined(x){try{if(x===null)throw new Error("Variable may not be null");if(x===void 0)throw new Error("Variable may not be undefined")}catch(e){throw console.error(e),e}}function assertArgs(args,length){let i;try{if(args.length!==length)throw new Error(`Wrong argument count; expected ${length} got ${args.length}`);for(i=0;i<args.length;i++)assertNotNullOrUndefined(args[i])}catch(e){throw console.error(i===void 0?e:`Arg ${i}: ${e}`),e}}function assertFinite(x){if(!Number.isFinite(x))throw new Error("Number not finite");return x}function visit(elt2,cb1,cb2,cb3,level=1){if(!cb1)throw new Error("cb1 required");cb1(elt2,level),elt2.children&&Array.from(elt2.children).forEach(child=>{cb2&&cb2(elt2,child,level),visit(child,cb1,cb2,cb3,level+1)}),cb3&&cb3(elt2,level)}function visitFilterProperty(elt2,propName,propValue,cb){visit(elt2,child=>{child[propName]===propValue&&cb(child)})}function visitToggleProperty(elt2,filterPropName,filterPropValue,togglePropName){visitFilterProperty(elt2,filterPropName,filterPropValue,child=>{if(typeof child[togglePropName]=="boolean")throw new Error(`Found child invalid toggle property(${togglePropName}): ${child}`);child[togglePropName]=!child[togglePropName]})}function capitalize(text){return text.charAt(0).toUpperCase()+text.substring(1)}function toArrayBuffer(buf){let ab=new ArrayBuffer(buf.length),view=new Uint8Array(ab);for(let i=0;i<buf.length;++i)view[i]=buf[i];return ab}var elt=id2=>document.getElementById(id2),newElt=(tagName,inner)=>{let e=document.createElement(tagName);return e.innerHTML=inner,e},remove=id2=>{let e=elt(id2);e&&e.parentNode?e.parentNode.removeChild(e):console.warn("Cannot remove element",e)};function setTitleFromLocation(location,prefix){let path=location.pathname.length>1?location.pathname:location.hash;path.startsWith("#")&&(path=path.substring(1));let parts=path.split("/");document.title=capitalize(parts[parts.length-1])}function createCanvas(){let canvas=document.createElement("canvas");return canvas.setAttribute("style","border: solid 1px red; display: none"),document.body.appendChild(canvas),canvas}function measureText(ctx,text,fontStyle){fontStyle&&(ctx.font=fontStyle);let m=ctx.measureText(text),width=Math.ceil(m.width),height=Math.ceil(m.actualBoundingBoxAscent+m.actualBoundingBoxDescent);return{width,height}}function named(obj,name){if(!(typeof name=="string"&&name.length>0))throw new Error("Name must be provided");return obj.name=name,obj}function makeCollapsable(elt2,tagTypes){if(tagTypes=tagTypes||["UL","OL"],elt2.nodeType!==1)return;let copyOfChildNodes=[],children=elt2.childNodes;for(let cndx in children)Object.prototype.hasOwnProperty.call(cndx,children)&&copyOfChildNodes.push(children[cndx]);if(tagTypes.indexOf(elt2.nodeName)!==-1){let toggleCtrl=document.createElement("button");toggleCtrl.setAttribute("class","collapsor"),toggleCtrl.onclick=e=>{collapse(toggleCtrl)},toggleCtrl.innerHTML=eltClass(elt2,"check","collapsed")?"[+]":"[-]",elt2.parentNode.insertBefore(toggleCtrl,elt2)}for(let cndx in copyOfChildNodes)Object.prototype.hasOwnProperty.call(cndx,copyOfChildNodes)&&makeCollapsable(copyOfChildNodes[cndx],tagTypes)}function collapse(ctrl){let target=ctrl.nextSibling;return eltClass(target,"check","collapsed")?(eltClass(target,"remove","collapsed"),ctrl.innerHTML="[-]"):(eltClass(target,"add","collapsed"),ctrl.innerHTML="[+]"),!1}function eltClass(elt2,action,className){let classNames=elt2.className.split(/ +/);if(action==="check"){for(let i in classNames)if(Object.prototype.hasOwnProperty.call(i,classNames)&&classNames[i]===className)return!0;return!1}else if(action==="add"){for(let i in classNames)if(Object.prototype.hasOwnProperty.call(i,classNames)&&classNames[i]===className)return!0;elt2.className+=` ${className}`}else if(action==="remove"){let newClassNames="";for(let i in classNames)if(Object.prototype.hasOwnProperty.call(i,classNames)){if(classNames[i]===className)continue;newClassNames+=` ${classNames[i]}`}elt2.className=newClassNames}return!0}var import_react=__toESM(require_react(),1),import_jsx_runtime=__toESM(require_jsx_runtime(),1);function HelpButton({keys}){let[open,setOpen]=import_react.default.useState(!1),toggleOpen=()=>{setOpen(!open)};return keys.map("?",toggleOpen,"Show/hide keyboard shortcuts"),(0,import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment,{children:[(0,import_jsx_runtime.jsx)("button",{onClick:toggleOpen,className:"textButton",children:"Help"}),open&&(0,import_jsx_runtime.jsx)(Help,{keys,openToggle:toggleOpen})]})}function Help({keys,openToggle}){let item=(ndx,keyStr,msg)=>(0,import_jsx_runtime.jsxs)("li",{children:[(0,import_jsx_runtime.jsx)("span",{children:keyStr}),msg]},ndx),items=[];for(let i in keys.keymap)items.push(item(i,i==" "?"space":i,keys.msgs[i]));return(0,import_jsx_runtime.jsxs)("div",{id:"help",className:"dialog",children:[(0,import_jsx_runtime.jsx)("button",{onClick:openToggle,children:"X"}),(0,import_jsx_runtime.jsx)("h1",{children:"Keyboard Shortcuts"}),"Controls:",(0,import_jsx_runtime.jsx)("ul",{children:items})]})}var three_module_exports={};__export(three_module_exports,{ACESFilmicToneMapping:()=>ACESFilmicToneMapping,AddEquation:()=>AddEquation,AddOperation:()=>AddOperation,AdditiveAnimationBlendMode:()=>AdditiveAnimationBlendMode,AdditiveBlending:()=>AdditiveBlending,AlphaFormat:()=>AlphaFormat,AlwaysDepth:()=>AlwaysDepth,AlwaysStencilFunc:()=>AlwaysStencilFunc,AmbientLight:()=>AmbientLight,AmbientLightProbe:()=>AmbientLightProbe,AnimationClip:()=>AnimationClip,AnimationLoader:()=>AnimationLoader,AnimationMixer:()=>AnimationMixer,AnimationObjectGroup:()=>AnimationObjectGroup,AnimationUtils:()=>AnimationUtils,ArcCurve:()=>ArcCurve,ArrayCamera:()=>ArrayCamera,ArrowHelper:()=>ArrowHelper,Audio:()=>Audio,AudioAnalyser:()=>AudioAnalyser,AudioContext:()=>AudioContext,AudioListener:()=>AudioListener,AudioLoader:()=>AudioLoader,AxesHelper:()=>AxesHelper,BackSide:()=>BackSide,BasicDepthPacking:()=>BasicDepthPacking,BasicShadowMap:()=>BasicShadowMap,Bone:()=>Bone,BooleanKeyframeTrack:()=>BooleanKeyframeTrack,Box2:()=>Box2,Box3:()=>Box3,Box3Helper:()=>Box3Helper,BoxBufferGeometry:()=>BoxBufferGeometry,BoxGeometry:()=>BoxGeometry,BoxHelper:()=>BoxHelper,BufferAttribute:()=>BufferAttribute,BufferGeometry:()=>BufferGeometry,BufferGeometryLoader:()=>BufferGeometryLoader,ByteType:()=>ByteType,Cache:()=>Cache,Camera:()=>Camera,CameraHelper:()=>CameraHelper,CanvasTexture:()=>CanvasTexture,CapsuleBufferGeometry:()=>CapsuleBufferGeometry,CapsuleGeometry:()=>CapsuleGeometry,CatmullRomCurve3:()=>CatmullRomCurve3,CineonToneMapping:()=>CineonToneMapping,CircleBufferGeometry:()=>CircleBufferGeometry,CircleGeometry:()=>CircleGeometry,ClampToEdgeWrapping:()=>ClampToEdgeWrapping,Clock:()=>Clock,Color:()=>Color,ColorKeyframeTrack:()=>ColorKeyframeTrack,ColorManagement:()=>ColorManagement,CompressedArrayTexture:()=>CompressedArrayTexture,CompressedTexture:()=>CompressedTexture,CompressedTextureLoader:()=>CompressedTextureLoader,ConeBufferGeometry:()=>ConeBufferGeometry,ConeGeometry:()=>ConeGeometry,CubeCamera:()=>CubeCamera,CubeReflectionMapping:()=>CubeReflectionMapping,CubeRefractionMapping:()=>CubeRefractionMapping,CubeTexture:()=>CubeTexture,CubeTextureLoader:()=>CubeTextureLoader,CubeUVReflectionMapping:()=>CubeUVReflectionMapping,CubicBezierCurve:()=>CubicBezierCurve,CubicBezierCurve3:()=>CubicBezierCurve3,CubicInterpolant:()=>CubicInterpolant,CullFaceBack:()=>CullFaceBack,CullFaceFront:()=>CullFaceFront,CullFaceFrontBack:()=>CullFaceFrontBack,CullFaceNone:()=>CullFaceNone,Curve:()=>Curve,CurvePath:()=>CurvePath,CustomBlending:()=>CustomBlending,CustomToneMapping:()=>CustomToneMapping,CylinderBufferGeometry:()=>CylinderBufferGeometry,CylinderGeometry:()=>CylinderGeometry,Cylindrical:()=>Cylindrical,Data3DTexture:()=>Data3DTexture,DataArrayTexture:()=>DataArrayTexture,DataTexture:()=>DataTexture,DataTexture2DArray:()=>DataTexture2DArray,DataTexture3D:()=>DataTexture3D,DataTextureLoader:()=>DataTextureLoader,DataUtils:()=>DataUtils,DecrementStencilOp:()=>DecrementStencilOp,DecrementWrapStencilOp:()=>DecrementWrapStencilOp,DefaultLoadingManager:()=>DefaultLoadingManager,DepthFormat:()=>DepthFormat,DepthStencilFormat:()=>DepthStencilFormat,DepthTexture:()=>DepthTexture,DirectionalLight:()=>DirectionalLight,DirectionalLightHelper:()=>DirectionalLightHelper,DiscreteInterpolant:()=>DiscreteInterpolant,DodecahedronBufferGeometry:()=>DodecahedronBufferGeometry,DodecahedronGeometry:()=>DodecahedronGeometry,DoubleSide:()=>DoubleSide,DstAlphaFactor:()=>DstAlphaFactor,DstColorFactor:()=>DstColorFactor,DynamicCopyUsage:()=>DynamicCopyUsage,DynamicDrawUsage:()=>DynamicDrawUsage,DynamicReadUsage:()=>DynamicReadUsage,EdgesGeometry:()=>EdgesGeometry,EllipseCurve:()=>EllipseCurve,EqualDepth:()=>EqualDepth,EqualStencilFunc:()=>EqualStencilFunc,EquirectangularReflectionMapping:()=>EquirectangularReflectionMapping,EquirectangularRefractionMapping:()=>EquirectangularRefractionMapping,Euler:()=>Euler,EventDispatcher:()=>EventDispatcher,ExtrudeBufferGeometry:()=>ExtrudeBufferGeometry,ExtrudeGeometry:()=>ExtrudeGeometry,FileLoader:()=>FileLoader,Float16BufferAttribute:()=>Float16BufferAttribute,Float32BufferAttribute:()=>Float32BufferAttribute,Float64BufferAttribute:()=>Float64BufferAttribute,FloatType:()=>FloatType,Fog:()=>Fog,FogExp2:()=>FogExp2,FramebufferTexture:()=>FramebufferTexture,FrontSide:()=>FrontSide,Frustum:()=>Frustum,GLBufferAttribute:()=>GLBufferAttribute,GLSL1:()=>GLSL1,GLSL3:()=>GLSL3,GreaterDepth:()=>GreaterDepth,GreaterEqualDepth:()=>GreaterEqualDepth,GreaterEqualStencilFunc:()=>GreaterEqualStencilFunc,GreaterStencilFunc:()=>GreaterStencilFunc,GridHelper:()=>GridHelper,Group:()=>Group,HalfFloatType:()=>HalfFloatType,HemisphereLight:()=>HemisphereLight,HemisphereLightHelper:()=>HemisphereLightHelper,HemisphereLightProbe:()=>HemisphereLightProbe,IcosahedronBufferGeometry:()=>IcosahedronBufferGeometry,IcosahedronGeometry:()=>IcosahedronGeometry,ImageBitmapLoader:()=>ImageBitmapLoader,ImageLoader:()=>ImageLoader,ImageUtils:()=>ImageUtils,ImmediateRenderObject:()=>ImmediateRenderObject,IncrementStencilOp:()=>IncrementStencilOp,IncrementWrapStencilOp:()=>IncrementWrapStencilOp,InstancedBufferAttribute:()=>InstancedBufferAttribute,InstancedBufferGeometry:()=>InstancedBufferGeometry,InstancedInterleavedBuffer:()=>InstancedInterleavedBuffer,InstancedMesh:()=>InstancedMesh,Int16BufferAttribute:()=>Int16BufferAttribute,Int32BufferAttribute:()=>Int32BufferAttribute,Int8BufferAttribute:()=>Int8BufferAttribute,IntType:()=>IntType,InterleavedBuffer:()=>InterleavedBuffer,InterleavedBufferAttribute:()=>InterleavedBufferAttribute,Interpolant:()=>Interpolant,InterpolateDiscrete:()=>InterpolateDiscrete,InterpolateLinear:()=>InterpolateLinear,InterpolateSmooth:()=>InterpolateSmooth,InvertStencilOp:()=>InvertStencilOp,KeepStencilOp:()=>KeepStencilOp,KeyframeTrack:()=>KeyframeTrack,LOD:()=>LOD,LatheBufferGeometry:()=>LatheBufferGeometry,LatheGeometry:()=>LatheGeometry,Layers:()=>Layers,LessDepth:()=>LessDepth,LessEqualDepth:()=>LessEqualDepth,LessEqualStencilFunc:()=>LessEqualStencilFunc,LessStencilFunc:()=>LessStencilFunc,Light:()=>Light,LightProbe:()=>LightProbe,Line:()=>Line,Line3:()=>Line3,LineBasicMaterial:()=>LineBasicMaterial,LineCurve:()=>LineCurve,LineCurve3:()=>LineCurve3,LineDashedMaterial:()=>LineDashedMaterial,LineLoop:()=>LineLoop,LineSegments:()=>LineSegments,LinearEncoding:()=>LinearEncoding,LinearFilter:()=>LinearFilter,LinearInterpolant:()=>LinearInterpolant,LinearMipMapLinearFilter:()=>LinearMipMapLinearFilter,LinearMipMapNearestFilter:()=>LinearMipMapNearestFilter,LinearMipmapLinearFilter:()=>LinearMipmapLinearFilter,LinearMipmapNearestFilter:()=>LinearMipmapNearestFilter,LinearSRGBColorSpace:()=>LinearSRGBColorSpace,LinearToneMapping:()=>LinearToneMapping,Loader:()=>Loader,LoaderUtils:()=>LoaderUtils,LoadingManager:()=>LoadingManager,LoopOnce:()=>LoopOnce,LoopPingPong:()=>LoopPingPong,LoopRepeat:()=>LoopRepeat,LuminanceAlphaFormat:()=>LuminanceAlphaFormat,LuminanceFormat:()=>LuminanceFormat,MOUSE:()=>MOUSE,Material:()=>Material,MaterialLoader:()=>MaterialLoader,MathUtils:()=>MathUtils,Matrix3:()=>Matrix3,Matrix4:()=>Matrix4,MaxEquation:()=>MaxEquation,Mesh:()=>Mesh,MeshBasicMaterial:()=>MeshBasicMaterial,MeshDepthMaterial:()=>MeshDepthMaterial,MeshDistanceMaterial:()=>MeshDistanceMaterial,MeshLambertMaterial:()=>MeshLambertMaterial,MeshMatcapMaterial:()=>MeshMatcapMaterial,MeshNormalMaterial:()=>MeshNormalMaterial,MeshPhongMaterial:()=>MeshPhongMaterial,MeshPhysicalMaterial:()=>MeshPhysicalMaterial,MeshStandardMaterial:()=>MeshStandardMaterial,MeshToonMaterial:()=>MeshToonMaterial,MinEquation:()=>MinEquation,MirroredRepeatWrapping:()=>MirroredRepeatWrapping,MixOperation:()=>MixOperation,MultiplyBlending:()=>MultiplyBlending,MultiplyOperation:()=>MultiplyOperation,NearestFilter:()=>NearestFilter,NearestMipMapLinearFilter:()=>NearestMipMapLinearFilter,NearestMipMapNearestFilter:()=>NearestMipMapNearestFilter,NearestMipmapLinearFilter:()=>NearestMipmapLinearFilter,NearestMipmapNearestFilter:()=>NearestMipmapNearestFilter,NeverDepth:()=>NeverDepth,NeverStencilFunc:()=>NeverStencilFunc,NoBlending:()=>NoBlending,NoColorSpace:()=>NoColorSpace,NoToneMapping:()=>NoToneMapping,NormalAnimationBlendMode:()=>NormalAnimationBlendMode,NormalBlending:()=>NormalBlending,NotEqualDepth:()=>NotEqualDepth,NotEqualStencilFunc:()=>NotEqualStencilFunc,NumberKeyframeTrack:()=>NumberKeyframeTrack,Object3D:()=>Object3D,ObjectLoader:()=>ObjectLoader,ObjectSpaceNormalMap:()=>ObjectSpaceNormalMap,OctahedronBufferGeometry:()=>OctahedronBufferGeometry,OctahedronGeometry:()=>OctahedronGeometry,OneFactor:()=>OneFactor,OneMinusDstAlphaFactor:()=>OneMinusDstAlphaFactor,OneMinusDstColorFactor:()=>OneMinusDstColorFactor,OneMinusSrcAlphaFactor:()=>OneMinusSrcAlphaFactor,OneMinusSrcColorFactor:()=>OneMinusSrcColorFactor,OrthographicCamera:()=>OrthographicCamera,PCFShadowMap:()=>PCFShadowMap,PCFSoftShadowMap:()=>PCFSoftShadowMap,PMREMGenerator:()=>PMREMGenerator,Path:()=>Path,PerspectiveCamera:()=>PerspectiveCamera,Plane:()=>Plane,PlaneBufferGeometry:()=>PlaneBufferGeometry,PlaneGeometry:()=>PlaneGeometry,PlaneHelper:()=>PlaneHelper,PointLight:()=>PointLight,PointLightHelper:()=>PointLightHelper,Points:()=>Points,PointsMaterial:()=>PointsMaterial,PolarGridHelper:()=>PolarGridHelper,PolyhedronBufferGeometry:()=>PolyhedronBufferGeometry,PolyhedronGeometry:()=>PolyhedronGeometry,PositionalAudio:()=>PositionalAudio,PropertyBinding:()=>PropertyBinding,PropertyMixer:()=>PropertyMixer,QuadraticBezierCurve:()=>QuadraticBezierCurve,QuadraticBezierCurve3:()=>QuadraticBezierCurve3,Quaternion:()=>Quaternion,QuaternionKeyframeTrack:()=>QuaternionKeyframeTrack,QuaternionLinearInterpolant:()=>QuaternionLinearInterpolant,REVISION:()=>REVISION,RGBADepthPacking:()=>RGBADepthPacking,RGBAFormat:()=>RGBAFormat,RGBAIntegerFormat:()=>RGBAIntegerFormat,RGBA_ASTC_10x10_Format:()=>RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format:()=>RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format:()=>RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format:()=>RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format:()=>RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format:()=>RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format:()=>RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format:()=>RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format:()=>RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format:()=>RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format:()=>RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format:()=>RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format:()=>RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format:()=>RGBA_ASTC_8x8_Format,RGBA_BPTC_Format:()=>RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:()=>RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format:()=>RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format:()=>RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format:()=>RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format:()=>RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format:()=>RGBA_S3TC_DXT5_Format,RGBFormat:()=>RGBFormat,RGB_ETC1_Format:()=>RGB_ETC1_Format,RGB_ETC2_Format:()=>RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format:()=>RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format:()=>RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:()=>RGB_S3TC_DXT1_Format,RGFormat:()=>RGFormat,RGIntegerFormat:()=>RGIntegerFormat,RawShaderMaterial:()=>RawShaderMaterial,Ray:()=>Ray,Raycaster:()=>Raycaster,RectAreaLight:()=>RectAreaLight,RedFormat:()=>RedFormat,RedIntegerFormat:()=>RedIntegerFormat,ReinhardToneMapping:()=>ReinhardToneMapping,RepeatWrapping:()=>RepeatWrapping,ReplaceStencilOp:()=>ReplaceStencilOp,ReverseSubtractEquation:()=>ReverseSubtractEquation,RingBufferGeometry:()=>RingBufferGeometry,RingGeometry:()=>RingGeometry,SRGBColorSpace:()=>SRGBColorSpace,Scene:()=>Scene,ShaderChunk:()=>ShaderChunk,ShaderLib:()=>ShaderLib,ShaderMaterial:()=>ShaderMaterial,ShadowMaterial:()=>ShadowMaterial,Shape:()=>Shape,ShapeBufferGeometry:()=>ShapeBufferGeometry,ShapeGeometry:()=>ShapeGeometry,ShapePath:()=>ShapePath,ShapeUtils:()=>ShapeUtils,ShortType:()=>ShortType,Skeleton:()=>Skeleton,SkeletonHelper:()=>SkeletonHelper,SkinnedMesh:()=>SkinnedMesh,Source:()=>Source,Sphere:()=>Sphere,SphereBufferGeometry:()=>SphereBufferGeometry,SphereGeometry:()=>SphereGeometry,Spherical:()=>Spherical,SphericalHarmonics3:()=>SphericalHarmonics3,SplineCurve:()=>SplineCurve,SpotLight:()=>SpotLight,SpotLightHelper:()=>SpotLightHelper,Sprite:()=>Sprite,SpriteMaterial:()=>SpriteMaterial,SrcAlphaFactor:()=>SrcAlphaFactor,SrcAlphaSaturateFactor:()=>SrcAlphaSaturateFactor,SrcColorFactor:()=>SrcColorFactor,StaticCopyUsage:()=>StaticCopyUsage,StaticDrawUsage:()=>StaticDrawUsage,StaticReadUsage:()=>StaticReadUsage,StereoCamera:()=>StereoCamera,StreamCopyUsage:()=>StreamCopyUsage,StreamDrawUsage:()=>StreamDrawUsage,StreamReadUsage:()=>StreamReadUsage,StringKeyframeTrack:()=>StringKeyframeTrack,SubtractEquation:()=>SubtractEquation,SubtractiveBlending:()=>SubtractiveBlending,TOUCH:()=>TOUCH,TangentSpaceNormalMap:()=>TangentSpaceNormalMap,TetrahedronBufferGeometry:()=>TetrahedronBufferGeometry,TetrahedronGeometry:()=>TetrahedronGeometry,Texture:()=>Texture,TextureLoader:()=>TextureLoader,TorusBufferGeometry:()=>TorusBufferGeometry,TorusGeometry:()=>TorusGeometry,TorusKnotBufferGeometry:()=>TorusKnotBufferGeometry,TorusKnotGeometry:()=>TorusKnotGeometry,Triangle:()=>Triangle,TriangleFanDrawMode:()=>TriangleFanDrawMode,TriangleStripDrawMode:()=>TriangleStripDrawMode,TrianglesDrawMode:()=>TrianglesDrawMode,TubeBufferGeometry:()=>TubeBufferGeometry,TubeGeometry:()=>TubeGeometry,UVMapping:()=>UVMapping,Uint16BufferAttribute:()=>Uint16BufferAttribute,Uint32BufferAttribute:()=>Uint32BufferAttribute,Uint8BufferAttribute:()=>Uint8BufferAttribute,Uint8ClampedBufferAttribute:()=>Uint8ClampedBufferAttribute,Uniform:()=>Uniform,UniformsGroup:()=>UniformsGroup,UniformsLib:()=>UniformsLib,UniformsUtils:()=>UniformsUtils,UnsignedByteType:()=>UnsignedByteType,UnsignedInt248Type:()=>UnsignedInt248Type,UnsignedIntType:()=>UnsignedIntType,UnsignedShort4444Type:()=>UnsignedShort4444Type,UnsignedShort5551Type:()=>UnsignedShort5551Type,UnsignedShortType:()=>UnsignedShortType,VSMShadowMap:()=>VSMShadowMap,Vector2:()=>Vector2,Vector3:()=>Vector3,Vector4:()=>Vector4,VectorKeyframeTrack:()=>VectorKeyframeTrack,VideoTexture:()=>VideoTexture,WebGL1Renderer:()=>WebGL1Renderer,WebGL3DRenderTarget:()=>WebGL3DRenderTarget,WebGLArrayRenderTarget:()=>WebGLArrayRenderTarget,WebGLCubeRenderTarget:()=>WebGLCubeRenderTarget,WebGLMultipleRenderTargets:()=>WebGLMultipleRenderTargets,WebGLMultisampleRenderTarget:()=>WebGLMultisampleRenderTarget,WebGLRenderTarget:()=>WebGLRenderTarget,WebGLRenderer:()=>WebGLRenderer,WebGLUtils:()=>WebGLUtils,WireframeGeometry:()=>WireframeGeometry,WrapAroundEnding:()=>WrapAroundEnding,ZeroCurvatureEnding:()=>ZeroCurvatureEnding,ZeroFactor:()=>ZeroFactor,ZeroSlopeEnding:()=>ZeroSlopeEnding,ZeroStencilOp:()=>ZeroStencilOp,_SRGBAFormat:()=>_SRGBAFormat,sRGBEncoding:()=>sRGBEncoding});var REVISION="147",MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},CullFaceNone=0,CullFaceBack=1,CullFaceFront=2,CullFaceFrontBack=3,BasicShadowMap=0,PCFShadowMap=1,PCFSoftShadowMap=2,VSMShadowMap=3,FrontSide=0,BackSide=1,DoubleSide=2,NoBlending=0,NormalBlending=1,AdditiveBlending=2,SubtractiveBlending=3,MultiplyBlending=4,CustomBlending=5,AddEquation=100,SubtractEquation=101,ReverseSubtractEquation=102,MinEquation=103,MaxEquation=104,ZeroFactor=200,OneFactor=201,SrcColorFactor=202,OneMinusSrcColorFactor=203,SrcAlphaFactor=204,OneMinusSrcAlphaFactor=205,DstAlphaFactor=206,OneMinusDstAlphaFactor=207,DstColorFactor=208,OneMinusDstColorFactor=209,SrcAlphaSaturateFactor=210,NeverDepth=0,AlwaysDepth=1,LessDepth=2,LessEqualDepth=3,EqualDepth=4,GreaterEqualDepth=5,GreaterDepth=6,NotEqualDepth=7,MultiplyOperation=0,MixOperation=1,AddOperation=2,NoToneMapping=0,LinearToneMapping=1,ReinhardToneMapping=2,CineonToneMapping=3,ACESFilmicToneMapping=4,CustomToneMapping=5,UVMapping=300,CubeReflectionMapping=301,CubeRefractionMapping=302,EquirectangularReflectionMapping=303,EquirectangularRefractionMapping=304,CubeUVReflectionMapping=306,RepeatWrapping=1e3,ClampToEdgeWrapping=1001,MirroredRepeatWrapping=1002,NearestFilter=1003,NearestMipmapNearestFilter=1004,NearestMipMapNearestFilter=1004,NearestMipmapLinearFilter=1005,NearestMipMapLinearFilter=1005,LinearFilter=1006,LinearMipmapNearestFilter=1007,LinearMipMapNearestFilter=1007,LinearMipmapLinearFilter=1008,LinearMipMapLinearFilter=1008,UnsignedByteType=1009,ByteType=1010,ShortType=1011,UnsignedShortType=1012,IntType=1013,UnsignedIntType=1014,FloatType=1015,HalfFloatType=1016,UnsignedShort4444Type=1017,UnsignedShort5551Type=1018,UnsignedInt248Type=1020,AlphaFormat=1021,RGBFormat=1022,RGBAFormat=1023,LuminanceFormat=1024,LuminanceAlphaFormat=1025,DepthFormat=1026,DepthStencilFormat=1027,RedFormat=1028,RedIntegerFormat=1029,RGFormat=1030,RGIntegerFormat=1031,RGBAIntegerFormat=1033,RGB_S3TC_DXT1_Format=33776,RGBA_S3TC_DXT1_Format=33777,RGBA_S3TC_DXT3_Format=33778,RGBA_S3TC_DXT5_Format=33779,RGB_PVRTC_4BPPV1_Format=35840,RGB_PVRTC_2BPPV1_Format=35841,RGBA_PVRTC_4BPPV1_Format=35842,RGBA_PVRTC_2BPPV1_Format=35843,RGB_ETC1_Format=36196,RGB_ETC2_Format=37492,RGBA_ETC2_EAC_Format=37496,RGBA_ASTC_4x4_Format=37808,RGBA_ASTC_5x4_Format=37809,RGBA_ASTC_5x5_Format=37810,RGBA_ASTC_6x5_Format=37811,RGBA_ASTC_6x6_Format=37812,RGBA_ASTC_8x5_Format=37813,RGBA_ASTC_8x6_Format=37814,RGBA_ASTC_8x8_Format=37815,RGBA_ASTC_10x5_Format=37816,RGBA_ASTC_10x6_Format=37817,RGBA_ASTC_10x8_Format=37818,RGBA_ASTC_10x10_Format=37819,RGBA_ASTC_12x10_Format=37820,RGBA_ASTC_12x12_Format=37821,RGBA_BPTC_Format=36492,LoopOnce=2200,LoopRepeat=2201,LoopPingPong=2202,InterpolateDiscrete=2300,InterpolateLinear=2301,InterpolateSmooth=2302,ZeroCurvatureEnding=2400,ZeroSlopeEnding=2401,WrapAroundEnding=2402,NormalAnimationBlendMode=2500,AdditiveAnimationBlendMode=2501,TrianglesDrawMode=0,TriangleStripDrawMode=1,TriangleFanDrawMode=2,LinearEncoding=3e3,sRGBEncoding=3001,BasicDepthPacking=3200,RGBADepthPacking=3201,TangentSpaceNormalMap=0,ObjectSpaceNormalMap=1,NoColorSpace="",SRGBColorSpace="srgb",LinearSRGBColorSpace="srgb-linear",ZeroStencilOp=0,KeepStencilOp=7680,ReplaceStencilOp=7681,IncrementStencilOp=7682,DecrementStencilOp=7683,IncrementWrapStencilOp=34055,DecrementWrapStencilOp=34056,InvertStencilOp=5386,NeverStencilFunc=512,LessStencilFunc=513,EqualStencilFunc=514,LessEqualStencilFunc=515,GreaterStencilFunc=516,NotEqualStencilFunc=517,GreaterEqualStencilFunc=518,AlwaysStencilFunc=519,StaticDrawUsage=35044,DynamicDrawUsage=35048,StreamDrawUsage=35040,StaticReadUsage=35045,DynamicReadUsage=35049,StreamReadUsage=35041,StaticCopyUsage=35046,DynamicCopyUsage=35050,StreamCopyUsage=35042,GLSL1="100",GLSL3="300 es",_SRGBAFormat=1035,EventDispatcher=class{addEventListener(type,listener){this._listeners===void 0&&(this._listeners={});let listeners=this._listeners;listeners[type]===void 0&&(listeners[type]=[]),listeners[type].indexOf(listener)===-1&&listeners[type].push(listener)}hasEventListener(type,listener){if(this._listeners===void 0)return!1;let listeners=this._listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this._listeners===void 0)return;let listenerArray=this._listeners[type];if(listenerArray!==void 0){let index=listenerArray.indexOf(listener);index!==-1&&listenerArray.splice(index,1)}}dispatchEvent(event){if(this._listeners===void 0)return;let listenerArray=this._listeners[event.type];if(listenerArray!==void 0){event.target=this;let array=listenerArray.slice(0);for(let i=0,l=array.length;i<l;i++)array[i].call(this,event);event.target=null}}},_lut=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],_seed=1234567,DEG2RAD=Math.PI/180,RAD2DEG=180/Math.PI;function generateUUID(){let d0=Math.random()*4294967295|0,d1=Math.random()*4294967295|0,d2=Math.random()*4294967295|0,d3=Math.random()*4294967295|0;return(_lut[d0&255]+_lut[d0>>8&255]+_lut[d0>>16&255]+_lut[d0>>24&255]+"-"+_lut[d1&255]+_lut[d1>>8&255]+"-"+_lut[d1>>16&15|64]+_lut[d1>>24&255]+"-"+_lut[d2&63|128]+_lut[d2>>8&255]+"-"+_lut[d2>>16&255]+_lut[d2>>24&255]+_lut[d3&255]+_lut[d3>>8&255]+_lut[d3>>16&255]+_lut[d3>>24&255]).toLowerCase()}function clamp(value,min,max){return Math.max(min,Math.min(max,value))}function euclideanModulo(n,m){return(n%m+m)%m}function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1)}function inverseLerp(x,y,value){return x!==y?(value-x)/(y-x):0}function lerp(x,y,t){return(1-t)*x+t*y}function damp(x,y,lambda,dt){return lerp(x,y,1-Math.exp(-lambda*dt))}function pingpong(x,length=1){return length-Math.abs(euclideanModulo(x,length*2)-length)}function smoothstep(x,min,max){return x<=min?0:x>=max?1:(x=(x-min)/(max-min),x*x*(3-2*x))}function smootherstep(x,min,max){return x<=min?0:x>=max?1:(x=(x-min)/(max-min),x*x*x*(x*(x*6-15)+10))}function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1))}function randFloat(low,high){return low+Math.random()*(high-low)}function randFloatSpread(range){return range*(.5-Math.random())}function seededRandom(s){s!==void 0&&(_seed=s);let t=_seed+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function degToRad(degrees){return degrees*DEG2RAD}function radToDeg(radians){return radians*RAD2DEG}function isPowerOfTwo(value){return(value&value-1)===0&&value!==0}function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2))}function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2))}function setQuaternionFromProperEuler(q,a,b,c,order){let cos=Math.cos,sin=Math.sin,c2=cos(b/2),s2=sin(b/2),c13=cos((a+c)/2),s13=sin((a+c)/2),c1_3=cos((a-c)/2),s1_3=sin((a-c)/2),c3_1=cos((c-a)/2),s3_1=sin((c-a)/2);switch(order){case"XYX":q.set(c2*s13,s2*c1_3,s2*s1_3,c2*c13);break;case"YZY":q.set(s2*s1_3,c2*s13,s2*c1_3,c2*c13);break;case"ZXZ":q.set(s2*c1_3,s2*s1_3,c2*s13,c2*c13);break;case"XZX":q.set(c2*s13,s2*s3_1,s2*c3_1,c2*c13);break;case"YXY":q.set(s2*c3_1,c2*s13,s2*s3_1,c2*c13);break;case"ZYZ":q.set(s2*s3_1,s2*c3_1,c2*s13,c2*c13);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+order)}}function denormalize(value,array){switch(array.constructor){case Float32Array:return value;case Uint16Array:return value/65535;case Uint8Array:return value/255;case Int16Array:return Math.max(value/32767,-1);case Int8Array:return Math.max(value/127,-1);default:throw new Error("Invalid component type.")}}function normalize(value,array){switch(array.constructor){case Float32Array:return value;case Uint16Array:return Math.round(value*65535);case Uint8Array:return Math.round(value*255);case Int16Array:return Math.round(value*32767);case Int8Array:return Math.round(value*127);default:throw new Error("Invalid component type.")}}var MathUtils=Object.freeze({__proto__:null,DEG2RAD,RAD2DEG,generateUUID,clamp,euclideanModulo,mapLinear,inverseLerp,lerp,damp,pingpong,smoothstep,smootherstep,randInt,randFloat,randFloatSpread,seededRandom,degToRad,radToDeg,isPowerOfTwo,ceilPowerOfTwo,floorPowerOfTwo,setQuaternionFromProperEuler,normalize,denormalize}),Vector2=class{constructor(x=0,y=0){Vector2.prototype.isVector2=!0,this.x=x,this.y=y}get width(){return this.x}set width(value){this.x=value}get height(){return this.y}set height(value){this.y=value}set(x,y){return this.x=x,this.y=y,this}setScalar(scalar){return this.x=scalar,this.y=scalar,this}setX(x){return this.x=x,this}setY(y){return this.y=y,this}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error("index is out of range: "+index)}return this}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+index)}}clone(){return new this.constructor(this.x,this.y)}copy(v){return this.x=v.x,this.y=v.y,this}add(v){return this.x+=v.x,this.y+=v.y,this}addScalar(s){return this.x+=s,this.y+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this}addScaledVector(v,s){return this.x+=v.x*s,this.y+=v.y*s,this}sub(v){return this.x-=v.x,this.y-=v.y,this}subScalar(s){return this.x-=s,this.y-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this}multiply(v){return this.x*=v.x,this.y*=v.y,this}multiplyScalar(scalar){return this.x*=scalar,this.y*=scalar,this}divide(v){return this.x/=v.x,this.y/=v.y,this}divideScalar(scalar){return this.multiplyScalar(1/scalar)}applyMatrix3(m){let x=this.x,y=this.y,e=m.elements;return this.x=e[0]*x+e[3]*y+e[6],this.y=e[1]*x+e[4]*y+e[7],this}min(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this}max(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this}clamp(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this}clampScalar(minVal,maxVal){return this.x=Math.max(minVal,Math.min(maxVal,this.x)),this.y=Math.max(minVal,Math.min(maxVal,this.y)),this}clampLength(min,max){let length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(v){return this.x*v.x+this.y*v.y}cross(v){return this.x*v.y-this.y*v.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(v){return Math.sqrt(this.distanceToSquared(v))}distanceToSquared(v){let dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy}manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)}setLength(length){return this.normalize().multiplyScalar(length)}lerp(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this}lerpVectors(v1,v2,alpha){return this.x=v1.x+(v2.x-v1.x)*alpha,this.y=v1.y+(v2.y-v1.y)*alpha,this}equals(v){return v.x===this.x&&v.y===this.y}fromArray(array,offset=0){return this.x=array[offset],this.y=array[offset+1],this}toArray(array=[],offset=0){return array[offset]=this.x,array[offset+1]=this.y,array}fromBufferAttribute(attribute,index){return this.x=attribute.getX(index),this.y=attribute.getY(index),this}rotateAround(center,angle2){let c=Math.cos(angle2),s=Math.sin(angle2),x=this.x-center.x,y=this.y-center.y;return this.x=x*c-y*s+center.x,this.y=x*s+y*c+center.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Matrix3=class{constructor(){Matrix3.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(n11,n12,n13,n21,n22,n23,n31,n32,n33){let te=this.elements;return te[0]=n11,te[1]=n21,te[2]=n31,te[3]=n12,te[4]=n22,te[5]=n32,te[6]=n13,te[7]=n23,te[8]=n33,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(m){let te=this.elements,me=m.elements;return te[0]=me[0],te[1]=me[1],te[2]=me[2],te[3]=me[3],te[4]=me[4],te[5]=me[5],te[6]=me[6],te[7]=me[7],te[8]=me[8],this}extractBasis(xAxis,yAxis,zAxis){return xAxis.setFromMatrix3Column(this,0),yAxis.setFromMatrix3Column(this,1),zAxis.setFromMatrix3Column(this,2),this}setFromMatrix4(m){let me=m.elements;return this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]),this}multiply(m){return this.multiplyMatrices(this,m)}premultiply(m){return this.multiplyMatrices(m,this)}multiplyMatrices(a,b){let ae=a.elements,be=b.elements,te=this.elements,a11=ae[0],a12=ae[3],a13=ae[6],a21=ae[1],a22=ae[4],a23=ae[7],a31=ae[2],a32=ae[5],a33=ae[8],b11=be[0],b12=be[3],b13=be[6],b21=be[1],b22=be[4],b23=be[7],b31=be[2],b32=be[5],b33=be[8];return te[0]=a11*b11+a12*b21+a13*b31,te[3]=a11*b12+a12*b22+a13*b32,te[6]=a11*b13+a12*b23+a13*b33,te[1]=a21*b11+a22*b21+a23*b31,te[4]=a21*b12+a22*b22+a23*b32,te[7]=a21*b13+a22*b23+a23*b33,te[2]=a31*b11+a32*b21+a33*b31,te[5]=a31*b12+a32*b22+a33*b32,te[8]=a31*b13+a32*b23+a33*b33,this}multiplyScalar(s){let te=this.elements;return te[0]*=s,te[3]*=s,te[6]*=s,te[1]*=s,te[4]*=s,te[7]*=s,te[2]*=s,te[5]*=s,te[8]*=s,this}determinant(){let te=this.elements,a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g}invert(){let te=this.elements,n11=te[0],n21=te[1],n31=te[2],n12=te[3],n22=te[4],n32=te[5],n13=te[6],n23=te[7],n33=te[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0)return this.set(0,0,0,0,0,0,0,0,0);let detInv=1/det;return te[0]=t11*detInv,te[1]=(n31*n23-n33*n21)*detInv,te[2]=(n32*n21-n31*n22)*detInv,te[3]=t12*detInv,te[4]=(n33*n11-n31*n13)*detInv,te[5]=(n31*n12-n32*n11)*detInv,te[6]=t13*detInv,te[7]=(n21*n13-n23*n11)*detInv,te[8]=(n22*n11-n21*n12)*detInv,this}transpose(){let tmp2,m=this.elements;return tmp2=m[1],m[1]=m[3],m[3]=tmp2,tmp2=m[2],m[2]=m[6],m[6]=tmp2,tmp2=m[5],m[5]=m[7],m[7]=tmp2,this}getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).invert().transpose()}transposeIntoArray(r){let m=this.elements;return r[0]=m[0],r[1]=m[3],r[2]=m[6],r[3]=m[1],r[4]=m[4],r[5]=m[7],r[6]=m[2],r[7]=m[5],r[8]=m[8],this}setUvTransform(tx,ty,sx,sy,rotation,cx,cy){let c=Math.cos(rotation),s=Math.sin(rotation);return this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1),this}scale(sx,sy){return this.premultiply(_m3.makeScale(sx,sy)),this}rotate(theta){return this.premultiply(_m3.makeRotation(-theta)),this}translate(tx,ty){return this.premultiply(_m3.makeTranslation(tx,ty)),this}makeTranslation(x,y){return this.set(1,0,x,0,1,y,0,0,1),this}makeRotation(theta){let c=Math.cos(theta),s=Math.sin(theta);return this.set(c,-s,0,s,c,0,0,0,1),this}makeScale(x,y){return this.set(x,0,0,0,y,0,0,0,1),this}equals(matrix){let te=this.elements,me=matrix.elements;for(let i=0;i<9;i++)if(te[i]!==me[i])return!1;return!0}fromArray(array,offset=0){for(let i=0;i<9;i++)this.elements[i]=array[i+offset];return this}toArray(array=[],offset=0){let te=this.elements;return array[offset]=te[0],array[offset+1]=te[1],array[offset+2]=te[2],array[offset+3]=te[3],array[offset+4]=te[4],array[offset+5]=te[5],array[offset+6]=te[6],array[offset+7]=te[7],array[offset+8]=te[8],array}clone(){return new this.constructor().fromArray(this.elements)}},_m3=new Matrix3;function arrayNeedsUint32(array){for(let i=array.length-1;i>=0;--i)if(array[i]>=65535)return!0;return!1}var TYPED_ARRAYS={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function getTypedArray(type,buffer){return new TYPED_ARRAYS[type](buffer)}function createElementNS(name){return document.createElementNS("http://www.w3.org/1999/xhtml",name)}function SRGBToLinear(c){return c<.04045?c*.0773993808:Math.pow(c*.9478672986+.0521327014,2.4)}function LinearToSRGB(c){return c<.0031308?c*12.92:1.055*Math.pow(c,.41666)-.055}var FN={[SRGBColorSpace]:{[LinearSRGBColorSpace]:SRGBToLinear},[LinearSRGBColorSpace]:{[SRGBColorSpace]:LinearToSRGB}},ColorManagement={legacyMode:!0,get workingColorSpace(){return LinearSRGBColorSpace},set workingColorSpace(colorSpace){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(color,sourceColorSpace,targetColorSpace){if(this.legacyMode||sourceColorSpace===targetColorSpace||!sourceColorSpace||!targetColorSpace)return color;if(FN[sourceColorSpace]&&FN[sourceColorSpace][targetColorSpace]!==void 0){let fn=FN[sourceColorSpace][targetColorSpace];return color.r=fn(color.r),color.g=fn(color.g),color.b=fn(color.b),color}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(color,targetColorSpace){return this.convert(color,this.workingColorSpace,targetColorSpace)},toWorkingColorSpace:function(color,sourceColorSpace){return this.convert(color,sourceColorSpace,this.workingColorSpace)}},_colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},_rgb$1={r:0,g:0,b:0},_hslA={h:0,s:0,l:0},_hslB={h:0,s:0,l:0};function hue2rgb(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+(q-p)*6*t:t<1/2?q:t<2/3?p+(q-p)*6*(2/3-t):p}function toComponents(source,target){return target.r=source.r,target.g=source.g,target.b=source.b,target}var Color=class{constructor(r,g,b){return this.isColor=!0,this.r=1,this.g=1,this.b=1,g===void 0&&b===void 0?this.set(r):this.setRGB(r,g,b)}set(value){return value&&value.isColor?this.copy(value):typeof value=="number"?this.setHex(value):typeof value=="string"&&this.setStyle(value),this}setScalar(scalar){return this.r=scalar,this.g=scalar,this.b=scalar,this}setHex(hex,colorSpace=SRGBColorSpace){return hex=Math.floor(hex),this.r=(hex>>16&255)/255,this.g=(hex>>8&255)/255,this.b=(hex&255)/255,ColorManagement.toWorkingColorSpace(this,colorSpace),this}setRGB(r,g,b,colorSpace=ColorManagement.workingColorSpace){return this.r=r,this.g=g,this.b=b,ColorManagement.toWorkingColorSpace(this,colorSpace),this}setHSL(h,s,l,colorSpace=ColorManagement.workingColorSpace){if(h=euclideanModulo(h,1),s=clamp(s,0,1),l=clamp(l,0,1),s===0)this.r=this.g=this.b=l;else{let p=l<=.5?l*(1+s):l+s-l*s,q=2*l-p;this.r=hue2rgb(q,p,h+1/3),this.g=hue2rgb(q,p,h),this.b=hue2rgb(q,p,h-1/3)}return ColorManagement.toWorkingColorSpace(this,colorSpace),this}setStyle(style,colorSpace=SRGBColorSpace){function handleAlpha(string){string!==void 0&&parseFloat(string)<1&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}let m;if(m=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)){let color,name=m[1],components=m[2];switch(name){case"rgb":case"rgba":if(color=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components))return this.r=Math.min(255,parseInt(color[1],10))/255,this.g=Math.min(255,parseInt(color[2],10))/255,this.b=Math.min(255,parseInt(color[3],10))/255,ColorManagement.toWorkingColorSpace(this,colorSpace),handleAlpha(color[4]),this;if(color=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components))return this.r=Math.min(100,parseInt(color[1],10))/100,this.g=Math.min(100,parseInt(color[2],10))/100,this.b=Math.min(100,parseInt(color[3],10))/100,ColorManagement.toWorkingColorSpace(this,colorSpace),handleAlpha(color[4]),this;break;case"hsl":case"hsla":if(color=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){let h=parseFloat(color[1])/360,s=parseFloat(color[2])/100,l=parseFloat(color[3])/100;return handleAlpha(color[4]),this.setHSL(h,s,l,colorSpace)}break}}else if(m=/^\#([A-Fa-f\d]+)$/.exec(style)){let hex=m[1],size=hex.length;if(size===3)return this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255,this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255,this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255,ColorManagement.toWorkingColorSpace(this,colorSpace),this;if(size===6)return this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255,this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255,this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255,ColorManagement.toWorkingColorSpace(this,colorSpace),this}return style&&style.length>0?this.setColorName(style,colorSpace):this}setColorName(style,colorSpace=SRGBColorSpace){let hex=_colorKeywords[style.toLowerCase()];return hex!==void 0?this.setHex(hex,colorSpace):console.warn("THREE.Color: Unknown color "+style),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(color){return this.r=color.r,this.g=color.g,this.b=color.b,this}copySRGBToLinear(color){return this.r=SRGBToLinear(color.r),this.g=SRGBToLinear(color.g),this.b=SRGBToLinear(color.b),this}copyLinearToSRGB(color){return this.r=LinearToSRGB(color.r),this.g=LinearToSRGB(color.g),this.b=LinearToSRGB(color.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(colorSpace=SRGBColorSpace){return ColorManagement.fromWorkingColorSpace(toComponents(this,_rgb$1),colorSpace),clamp(_rgb$1.r*255,0,255)<<16^clamp(_rgb$1.g*255,0,255)<<8^clamp(_rgb$1.b*255,0,255)<<0}getHexString(colorSpace=SRGBColorSpace){return("000000"+this.getHex(colorSpace).toString(16)).slice(-6)}getHSL(target,colorSpace=ColorManagement.workingColorSpace){ColorManagement.fromWorkingColorSpace(toComponents(this,_rgb$1),colorSpace);let r=_rgb$1.r,g=_rgb$1.g,b=_rgb$1.b,max=Math.max(r,g,b),min=Math.min(r,g,b),hue,saturation,lightness=(min+max)/2;if(min===max)hue=0,saturation=0;else{let delta=max-min;switch(saturation=lightness<=.5?delta/(max+min):delta/(2-max-min),max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break}hue/=6}return target.h=hue,target.s=saturation,target.l=lightness,target}getRGB(target,colorSpace=ColorManagement.workingColorSpace){return ColorManagement.fromWorkingColorSpace(toComponents(this,_rgb$1),colorSpace),target.r=_rgb$1.r,target.g=_rgb$1.g,target.b=_rgb$1.b,target}getStyle(colorSpace=SRGBColorSpace){return ColorManagement.fromWorkingColorSpace(toComponents(this,_rgb$1),colorSpace),colorSpace!==SRGBColorSpace?`color(${colorSpace} ${_rgb$1.r} ${_rgb$1.g} ${_rgb$1.b})`:`rgb(${_rgb$1.r*255|0},${_rgb$1.g*255|0},${_rgb$1.b*255|0})`}offsetHSL(h,s,l){return this.getHSL(_hslA),_hslA.h+=h,_hslA.s+=s,_hslA.l+=l,this.setHSL(_hslA.h,_hslA.s,_hslA.l),this}add(color){return this.r+=color.r,this.g+=color.g,this.b+=color.b,this}addColors(color1,color2){return this.r=color1.r+color2.r,this.g=color1.g+color2.g,this.b=color1.b+color2.b,this}addScalar(s){return this.r+=s,this.g+=s,this.b+=s,this}sub(color){return this.r=Math.max(0,this.r-color.r),this.g=Math.max(0,this.g-color.g),this.b=Math.max(0,this.b-color.b),this}multiply(color){return this.r*=color.r,this.g*=color.g,this.b*=color.b,this}multiplyScalar(s){return this.r*=s,this.g*=s,this.b*=s,this}lerp(color,alpha){return this.r+=(color.r-this.r)*alpha,this.g+=(color.g-this.g)*alpha,this.b+=(color.b-this.b)*alpha,this}lerpColors(color1,color2,alpha){return this.r=color1.r+(color2.r-color1.r)*alpha,this.g=color1.g+(color2.g-color1.g)*alpha,this.b=color1.b+(color2.b-color1.b)*alpha,this}lerpHSL(color,alpha){this.getHSL(_hslA),color.getHSL(_hslB);let h=lerp(_hslA.h,_hslB.h,alpha),s=lerp(_hslA.s,_hslB.s,alpha),l=lerp(_hslA.l,_hslB.l,alpha);return this.setHSL(h,s,l),this}equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b}fromArray(array,offset=0){return this.r=array[offset],this.g=array[offset+1],this.b=array[offset+2],this}toArray(array=[],offset=0){return array[offset]=this.r,array[offset+1]=this.g,array[offset+2]=this.b,array}fromBufferAttribute(attribute,index){return this.r=attribute.getX(index),this.g=attribute.getY(index),this.b=attribute.getZ(index),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};Color.NAMES=_colorKeywords;var _canvas,ImageUtils=class{static getDataURL(image){if(/^data:/i.test(image.src)||typeof HTMLCanvasElement=="undefined")return image.src;let canvas;if(image instanceof HTMLCanvasElement)canvas=image;else{_canvas===void 0&&(_canvas=createElementNS("canvas")),_canvas.width=image.width,_canvas.height=image.height;let context=_canvas.getContext("2d");image instanceof ImageData?context.putImageData(image,0,0):context.drawImage(image,0,0,image.width,image.height),canvas=_canvas}return canvas.width>2048||canvas.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",image),canvas.toDataURL("image/jpeg",.6)):canvas.toDataURL("image/png")}static sRGBToLinear(image){if(typeof HTMLImageElement!="undefined"&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&image instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&image instanceof ImageBitmap){let canvas=createElementNS("canvas");canvas.width=image.width,canvas.height=image.height;let context=canvas.getContext("2d");context.drawImage(image,0,0,image.width,image.height);let imageData=context.getImageData(0,0,image.width,image.height),data=imageData.data;for(let i=0;i<data.length;i++)data[i]=SRGBToLinear(data[i]/255)*255;return context.putImageData(imageData,0,0),canvas}else if(image.data){let data=image.data.slice(0);for(let i=0;i<data.length;i++)data instanceof Uint8Array||data instanceof Uint8ClampedArray?data[i]=Math.floor(SRGBToLinear(data[i]/255)*255):data[i]=SRGBToLinear(data[i]);return{data,width:image.width,height:image.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),image}},Source=class{constructor(data=null){this.isSource=!0,this.uuid=generateUUID(),this.data=data,this.version=0}set needsUpdate(value){value===!0&&this.version++}toJSON(meta){let isRootObject=meta===void 0||typeof meta=="string";if(!isRootObject&&meta.images[this.uuid]!==void 0)return meta.images[this.uuid];let output={uuid:this.uuid,url:""},data=this.data;if(data!==null){let url;if(Array.isArray(data)){url=[];for(let i=0,l=data.length;i<l;i++)data[i].isDataTexture?url.push(serializeImage(data[i].image)):url.push(serializeImage(data[i]))}else url=serializeImage(data);output.url=url}return isRootObject||(meta.images[this.uuid]=output),output}};function serializeImage(image){return typeof HTMLImageElement!="undefined"&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&image instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&image instanceof ImageBitmap?ImageUtils.getDataURL(image):image.data?{data:Array.from(image.data),width:image.width,height:image.height,type:image.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}var textureId=0,Texture=class extends EventDispatcher{constructor(image=Texture.DEFAULT_IMAGE,mapping=Texture.DEFAULT_MAPPING,wrapS=ClampToEdgeWrapping,wrapT=ClampToEdgeWrapping,magFilter=LinearFilter,minFilter=LinearMipmapLinearFilter,format=RGBAFormat,type=UnsignedByteType,anisotropy=Texture.DEFAULT_ANISOTROPY,encoding=LinearEncoding){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:textureId++}),this.uuid=generateUUID(),this.name="",this.source=new Source(image),this.mipmaps=[],this.mapping=mapping,this.wrapS=wrapS,this.wrapT=wrapT,this.magFilter=magFilter,this.minFilter=minFilter,this.anisotropy=anisotropy,this.format=format,this.internalFormat=null,this.type=type,this.offset=new Vector2(0,0),this.repeat=new Vector2(1,1),this.center=new Vector2(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Matrix3,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=encoding,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(value){this.source.data=value}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(source){return this.name=source.name,this.source=source.source,this.mipmaps=source.mipmaps.slice(0),this.mapping=source.mapping,this.wrapS=source.wrapS,this.wrapT=source.wrapT,this.magFilter=source.magFilter,this.minFilter=source.minFilter,this.anisotropy=source.anisotropy,this.format=source.format,this.internalFormat=source.internalFormat,this.type=source.type,this.offset.copy(source.offset),this.repeat.copy(source.repeat),this.center.copy(source.center),this.rotation=source.rotation,this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrix.copy(source.matrix),this.generateMipmaps=source.generateMipmaps,this.premultiplyAlpha=source.premultiplyAlpha,this.flipY=source.flipY,this.unpackAlignment=source.unpackAlignment,this.encoding=source.encoding,this.userData=JSON.parse(JSON.stringify(source.userData)),this.needsUpdate=!0,this}toJSON(meta){let isRootObject=meta===void 0||typeof meta=="string";if(!isRootObject&&meta.textures[this.uuid]!==void 0)return meta.textures[this.uuid];let output={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(meta).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(output.userData=this.userData),isRootObject||(meta.textures[this.uuid]=output),output}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(uv){if(this.mapping!==UVMapping)return uv;if(uv.applyMatrix3(this.matrix),uv.x<0||uv.x>1)switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:Math.abs(Math.floor(uv.x)%2)===1?uv.x=Math.ceil(uv.x)-uv.x:uv.x=uv.x-Math.floor(uv.x);break}if(uv.y<0||uv.y>1)switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:Math.abs(Math.floor(uv.y)%2)===1?uv.y=Math.ceil(uv.y)-uv.y:uv.y=uv.y-Math.floor(uv.y);break}return this.flipY&&(uv.y=1-uv.y),uv}set needsUpdate(value){value===!0&&(this.version++,this.source.needsUpdate=!0)}};Texture.DEFAULT_IMAGE=null;Texture.DEFAULT_MAPPING=UVMapping;Texture.DEFAULT_ANISOTROPY=1;var Vector4=class{constructor(x=0,y=0,z=0,w=1){Vector4.prototype.isVector4=!0,this.x=x,this.y=y,this.z=z,this.w=w}get width(){return this.z}set width(value){this.z=value}get height(){return this.w}set height(value){this.w=value}set(x,y,z,w){return this.x=x,this.y=y,this.z=z,this.w=w,this}setScalar(scalar){return this.x=scalar,this.y=scalar,this.z=scalar,this.w=scalar,this}setX(x){return this.x=x,this}setY(y){return this.y=y,this}setZ(z){return this.z=z,this}setW(w){return this.w=w,this}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error("index is out of range: "+index)}return this}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+index)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(v){return this.x=v.x,this.y=v.y,this.z=v.z,this.w=v.w!==void 0?v.w:1,this}add(v){return this.x+=v.x,this.y+=v.y,this.z+=v.z,this.w+=v.w,this}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this.w+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this}addScaledVector(v,s){return this.x+=v.x*s,this.y+=v.y*s,this.z+=v.z*s,this.w+=v.w*s,this}sub(v){return this.x-=v.x,this.y-=v.y,this.z-=v.z,this.w-=v.w,this}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this.w-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this}multiply(v){return this.x*=v.x,this.y*=v.y,this.z*=v.z,this.w*=v.w,this}multiplyScalar(scalar){return this.x*=scalar,this.y*=scalar,this.z*=scalar,this.w*=scalar,this}applyMatrix4(m){let x=this.x,y=this.y,z=this.z,w=this.w,e=m.elements;return this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w,this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w,this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w,this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w,this}divideScalar(scalar){return this.multiplyScalar(1/scalar)}setAxisAngleFromQuaternion(q){this.w=2*Math.acos(q.w);let s=Math.sqrt(1-q.w*q.w);return s<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s),this}setAxisAngleFromRotationMatrix(m){let angle2,x,y,z,te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<.01&&Math.abs(m13-m31)<.01&&Math.abs(m23-m32)<.01){if(Math.abs(m12+m21)<.1&&Math.abs(m13+m31)<.1&&Math.abs(m23+m32)<.1&&Math.abs(m11+m22+m33-3)<.1)return this.set(1,0,0,0),this;angle2=Math.PI;let xx=(m11+1)/2,yy=(m22+1)/2,zz=(m33+1)/2,xy=(m12+m21)/4,xz=(m13+m31)/4,yz=(m23+m32)/4;return xx>yy&&xx>zz?xx<.01?(x=0,y=.707106781,z=.707106781):(x=Math.sqrt(xx),y=xy/x,z=xz/x):yy>zz?yy<.01?(x=.707106781,y=0,z=.707106781):(y=Math.sqrt(yy),x=xy/y,z=yz/y):zz<.01?(x=.707106781,y=.707106781,z=0):(z=Math.sqrt(zz),x=xz/z,y=yz/z),this.set(x,y,z,angle2),this}let s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));return Math.abs(s)<.001&&(s=1),this.x=(m32-m23)/s,this.y=(m13-m31)/s,this.z=(m21-m12)/s,this.w=Math.acos((m11+m22+m33-1)/2),this}min(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this.z=Math.min(this.z,v.z),this.w=Math.min(this.w,v.w),this}max(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this.z=Math.max(this.z,v.z),this.w=Math.max(this.w,v.w),this}clamp(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this.z=Math.max(min.z,Math.min(max.z,this.z)),this.w=Math.max(min.w,Math.min(max.w,this.w)),this}clampScalar(minVal,maxVal){return this.x=Math.max(minVal,Math.min(maxVal,this.x)),this.y=Math.max(minVal,Math.min(maxVal,this.y)),this.z=Math.max(minVal,Math.min(maxVal,this.z)),this.w=Math.max(minVal,Math.min(maxVal,this.w)),this}clampLength(min,max){let length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(length){return this.normalize().multiplyScalar(length)}lerp(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this.z+=(v.z-this.z)*alpha,this.w+=(v.w-this.w)*alpha,this}lerpVectors(v1,v2,alpha){return this.x=v1.x+(v2.x-v1.x)*alpha,this.y=v1.y+(v2.y-v1.y)*alpha,this.z=v1.z+(v2.z-v1.z)*alpha,this.w=v1.w+(v2.w-v1.w)*alpha,this}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w}fromArray(array,offset=0){return this.x=array[offset],this.y=array[offset+1],this.z=array[offset+2],this.w=array[offset+3],this}toArray(array=[],offset=0){return array[offset]=this.x,array[offset+1]=this.y,array[offset+2]=this.z,array[offset+3]=this.w,array}fromBufferAttribute(attribute,index){return this.x=attribute.getX(index),this.y=attribute.getY(index),this.z=attribute.getZ(index),this.w=attribute.getW(index),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},WebGLRenderTarget=class extends EventDispatcher{constructor(width=1,height=1,options={}){super(),this.isWebGLRenderTarget=!0,this.width=width,this.height=height,this.depth=1,this.scissor=new Vector4(0,0,width,height),this.scissorTest=!1,this.viewport=new Vector4(0,0,width,height);let image={width,height,depth:1};this.texture=new Texture(image,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=options.generateMipmaps!==void 0?options.generateMipmaps:!1,this.texture.internalFormat=options.internalFormat!==void 0?options.internalFormat:null,this.texture.minFilter=options.minFilter!==void 0?options.minFilter:LinearFilter,this.depthBuffer=options.depthBuffer!==void 0?options.depthBuffer:!0,this.stencilBuffer=options.stencilBuffer!==void 0?options.stencilBuffer:!1,this.depthTexture=options.depthTexture!==void 0?options.depthTexture:null,this.samples=options.samples!==void 0?options.samples:0}setSize(width,height,depth=1){(this.width!==width||this.height!==height||this.depth!==depth)&&(this.width=width,this.height=height,this.depth=depth,this.texture.image.width=width,this.texture.image.height=height,this.texture.image.depth=depth,this.dispose()),this.viewport.set(0,0,width,height),this.scissor.set(0,0,width,height)}clone(){return new this.constructor().copy(this)}copy(source){this.width=source.width,this.height=source.height,this.depth=source.depth,this.viewport.copy(source.viewport),this.texture=source.texture.clone(),this.texture.isRenderTargetTexture=!0;let image=Object.assign({},source.texture.image);return this.texture.source=new Source(image),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,source.depthTexture!==null&&(this.depthTexture=source.depthTexture.clone()),this.samples=source.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},DataArrayTexture=class extends Texture{constructor(data=null,width=1,height=1,depth=1){super(null),this.isDataArrayTexture=!0,this.image={data,width,height,depth},this.magFilter=NearestFilter,this.minFilter=NearestFilter,this.wrapR=ClampToEdgeWrapping,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},WebGLArrayRenderTarget=class extends WebGLRenderTarget{constructor(width=1,height=1,depth=1){super(width,height),this.isWebGLArrayRenderTarget=!0,this.depth=depth,this.texture=new DataArrayTexture(null,width,height,depth),this.texture.isRenderTargetTexture=!0}},Data3DTexture=class extends Texture{constructor(data=null,width=1,height=1,depth=1){super(null),this.isData3DTexture=!0,this.image={data,width,height,depth},this.magFilter=NearestFilter,this.minFilter=NearestFilter,this.wrapR=ClampToEdgeWrapping,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},WebGL3DRenderTarget=class extends WebGLRenderTarget{constructor(width=1,height=1,depth=1){super(width,height),this.isWebGL3DRenderTarget=!0,this.depth=depth,this.texture=new Data3DTexture(null,width,height,depth),this.texture.isRenderTargetTexture=!0}},WebGLMultipleRenderTargets=class extends WebGLRenderTarget{constructor(width=1,height=1,count=1,options={}){super(width,height,options),this.isWebGLMultipleRenderTargets=!0;let texture=this.texture;this.texture=[];for(let i=0;i<count;i++)this.texture[i]=texture.clone(),this.texture[i].isRenderTargetTexture=!0}setSize(width,height,depth=1){if(this.width!==width||this.height!==height||this.depth!==depth){this.width=width,this.height=height,this.depth=depth;for(let i=0,il=this.texture.length;i<il;i++)this.texture[i].image.width=width,this.texture[i].image.height=height,this.texture[i].image.depth=depth;this.dispose()}return this.viewport.set(0,0,width,height),this.scissor.set(0,0,width,height),this}copy(source){this.dispose(),this.width=source.width,this.height=source.height,this.depth=source.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,source.depthTexture!==null&&(this.depthTexture=source.depthTexture.clone()),this.texture.length=0;for(let i=0,il=source.texture.length;i<il;i++)this.texture[i]=source.texture[i].clone(),this.texture[i].isRenderTargetTexture=!0;return this}},Quaternion=class{constructor(x=0,y=0,z=0,w=1){this.isQuaternion=!0,this._x=x,this._y=y,this._z=z,this._w=w}static slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){let x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3],x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(t===0){dst[dstOffset+0]=x0,dst[dstOffset+1]=y0,dst[dstOffset+2]=z0,dst[dstOffset+3]=w0;return}if(t===1){dst[dstOffset+0]=x1,dst[dstOffset+1]=y1,dst[dstOffset+2]=z1,dst[dstOffset+3]=w1;return}if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){let s=1-t,cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;if(sqrSin>Number.EPSILON){let sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin,t=Math.sin(t*len)/sin}let tDir=t*dir;if(x0=x0*s+x1*tDir,y0=y0*s+y1*tDir,z0=z0*s+z1*tDir,w0=w0*s+w1*tDir,s===1-t){let f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f,y0*=f,z0*=f,w0*=f}}dst[dstOffset]=x0,dst[dstOffset+1]=y0,dst[dstOffset+2]=z0,dst[dstOffset+3]=w0}static multiplyQuaternionsFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1){let x0=src0[srcOffset0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3],x1=src1[srcOffset1],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];return dst[dstOffset]=x0*w1+w0*x1+y0*z1-z0*y1,dst[dstOffset+1]=y0*w1+w0*y1+z0*x1-x0*z1,dst[dstOffset+2]=z0*w1+w0*z1+x0*y1-y0*x1,dst[dstOffset+3]=w0*w1-x0*x1-y0*y1-z0*z1,dst}get x(){return this._x}set x(value){this._x=value,this._onChangeCallback()}get y(){return this._y}set y(value){this._y=value,this._onChangeCallback()}get z(){return this._z}set z(value){this._z=value,this._onChangeCallback()}get w(){return this._w}set w(value){this._w=value,this._onChangeCallback()}set(x,y,z,w){return this._x=x,this._y=y,this._z=z,this._w=w,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(quaternion){return this._x=quaternion.x,this._y=quaternion.y,this._z=quaternion.z,this._w=quaternion.w,this._onChangeCallback(),this}setFromEuler(euler,update){let x=euler._x,y=euler._y,z=euler._z,order=euler._order,cos=Math.cos,sin=Math.sin,c1=cos(x/2),c2=cos(y/2),c3=cos(z/2),s1=sin(x/2),s2=sin(y/2),s3=sin(z/2);switch(order){case"XYZ":this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3;break;case"YXZ":this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3;break;case"ZXY":this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3;break;case"ZYX":this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3;break;case"YZX":this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3;break;case"XZY":this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+order)}return update!==!1&&this._onChangeCallback(),this}setFromAxisAngle(axis,angle2){let halfAngle=angle2/2,s=Math.sin(halfAngle);return this._x=axis.x*s,this._y=axis.y*s,this._z=axis.z*s,this._w=Math.cos(halfAngle),this._onChangeCallback(),this}setFromRotationMatrix(m){let te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;if(trace>0){let s=.5/Math.sqrt(trace+1);this._w=.25/s,this._x=(m32-m23)*s,this._y=(m13-m31)*s,this._z=(m21-m12)*s}else if(m11>m22&&m11>m33){let s=2*Math.sqrt(1+m11-m22-m33);this._w=(m32-m23)/s,this._x=.25*s,this._y=(m12+m21)/s,this._z=(m13+m31)/s}else if(m22>m33){let s=2*Math.sqrt(1+m22-m11-m33);this._w=(m13-m31)/s,this._x=(m12+m21)/s,this._y=.25*s,this._z=(m23+m32)/s}else{let s=2*Math.sqrt(1+m33-m11-m22);this._w=(m21-m12)/s,this._x=(m13+m31)/s,this._y=(m23+m32)/s,this._z=.25*s}return this._onChangeCallback(),this}setFromUnitVectors(vFrom,vTo){let r=vFrom.dot(vTo)+1;return r<Number.EPSILON?(r=0,Math.abs(vFrom.x)>Math.abs(vFrom.z)?(this._x=-vFrom.y,this._y=vFrom.x,this._z=0,this._w=r):(this._x=0,this._y=-vFrom.z,this._z=vFrom.y,this._w=r)):(this._x=vFrom.y*vTo.z-vFrom.z*vTo.y,this._y=vFrom.z*vTo.x-vFrom.x*vTo.z,this._z=vFrom.x*vTo.y-vFrom.y*vTo.x,this._w=r),this.normalize()}angleTo(q){return 2*Math.acos(Math.abs(clamp(this.dot(q),-1,1)))}rotateTowards(q,step){let angle2=this.angleTo(q);if(angle2===0)return this;let t=Math.min(1,step/angle2);return this.slerp(q,t),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let l=this.length();return l===0?(this._x=0,this._y=0,this._z=0,this._w=1):(l=1/l,this._x=this._x*l,this._y=this._y*l,this._z=this._z*l,this._w=this._w*l),this._onChangeCallback(),this}multiply(q){return this.multiplyQuaternions(this,q)}premultiply(q){return this.multiplyQuaternions(q,this)}multiplyQuaternions(a,b){let qax=a._x,qay=a._y,qaz=a._z,qaw=a._w,qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;return this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby,this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz,this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx,this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz,this._onChangeCallback(),this}slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);let x=this._x,y=this._y,z=this._z,w=this._w,cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0?(this._w=-qb._w,this._x=-qb._x,this._y=-qb._y,this._z=-qb._z,cosHalfTheta=-cosHalfTheta):this.copy(qb),cosHalfTheta>=1)return this._w=w,this._x=x,this._y=y,this._z=z,this;let sqrSinHalfTheta=1-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){let s=1-t;return this._w=s*w+t*this._w,this._x=s*x+t*this._x,this._y=s*y+t*this._y,this._z=s*z+t*this._z,this.normalize(),this._onChangeCallback(),this}let sinHalfTheta=Math.sqrt(sqrSinHalfTheta),halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta),ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;return this._w=w*ratioA+this._w*ratioB,this._x=x*ratioA+this._x*ratioB,this._y=y*ratioA+this._y*ratioB,this._z=z*ratioA+this._z*ratioB,this._onChangeCallback(),this}slerpQuaternions(qa,qb,t){return this.copy(qa).slerp(qb,t)}random(){let u1=Math.random(),sqrt1u1=Math.sqrt(1-u1),sqrtu1=Math.sqrt(u1),u2=2*Math.PI*Math.random(),u3=2*Math.PI*Math.random();return this.set(sqrt1u1*Math.cos(u2),sqrtu1*Math.sin(u3),sqrtu1*Math.cos(u3),sqrt1u1*Math.sin(u2))}equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w}fromArray(array,offset=0){return this._x=array[offset],this._y=array[offset+1],this._z=array[offset+2],this._w=array[offset+3],this._onChangeCallback(),this}toArray(array=[],offset=0){return array[offset]=this._x,array[offset+1]=this._y,array[offset+2]=this._z,array[offset+3]=this._w,array}fromBufferAttribute(attribute,index){return this._x=attribute.getX(index),this._y=attribute.getY(index),this._z=attribute.getZ(index),this._w=attribute.getW(index),this}_onChange(callback){return this._onChangeCallback=callback,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},Vector3=class{constructor(x=0,y=0,z=0){Vector3.prototype.isVector3=!0,this.x=x,this.y=y,this.z=z}set(x,y,z){return z===void 0&&(z=this.z),this.x=x,this.y=y,this.z=z,this}setScalar(scalar){return this.x=scalar,this.y=scalar,this.z=scalar,this}setX(x){return this.x=x,this}setY(y){return this.y=y,this}setZ(z){return this.z=z,this}setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error("index is out of range: "+index)}return this}getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+index)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(v){return this.x=v.x,this.y=v.y,this.z=v.z,this}add(v){return this.x+=v.x,this.y+=v.y,this.z+=v.z,this}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this}addScaledVector(v,s){return this.x+=v.x*s,this.y+=v.y*s,this.z+=v.z*s,this}sub(v){return this.x-=v.x,this.y-=v.y,this.z-=v.z,this}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this}multiply(v){return this.x*=v.x,this.y*=v.y,this.z*=v.z,this}multiplyScalar(scalar){return this.x*=scalar,this.y*=scalar,this.z*=scalar,this}multiplyVectors(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this}applyEuler(euler){return this.applyQuaternion(_quaternion$4.setFromEuler(euler))}applyAxisAngle(axis,angle2){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis,angle2))}applyMatrix3(m){let x=this.x,y=this.y,z=this.z,e=m.elements;return this.x=e[0]*x+e[3]*y+e[6]*z,this.y=e[1]*x+e[4]*y+e[7]*z,this.z=e[2]*x+e[5]*y+e[8]*z,this}applyNormalMatrix(m){return this.applyMatrix3(m).normalize()}applyMatrix4(m){let x=this.x,y=this.y,z=this.z,e=m.elements,w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);return this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w,this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w,this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w,this}applyQuaternion(q){let x=this.x,y=this.y,z=this.z,qx=q.x,qy=q.y,qz=q.z,qw=q.w,ix=qw*x+qy*z-qz*y,iy=qw*y+qz*x-qx*z,iz=qw*z+qx*y-qy*x,iw=-qx*x-qy*y-qz*z;return this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy,this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz,this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx,this}project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix)}unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld)}transformDirection(m){let x=this.x,y=this.y,z=this.z,e=m.elements;return this.x=e[0]*x+e[4]*y+e[8]*z,this.y=e[1]*x+e[5]*y+e[9]*z,this.z=e[2]*x+e[6]*y+e[10]*z,this.normalize()}divide(v){return this.x/=v.x,this.y/=v.y,this.z/=v.z,this}divideScalar(scalar){return this.multiplyScalar(1/scalar)}min(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this.z=Math.min(this.z,v.z),this}max(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this.z=Math.max(this.z,v.z),this}clamp(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this.z=Math.max(min.z,Math.min(max.z,this.z)),this}clampScalar(minVal,maxVal){return this.x=Math.max(minVal,Math.min(maxVal,this.x)),this.y=Math.max(minVal,Math.min(maxVal,this.y)),this.z=Math.max(minVal,Math.min(maxVal,this.z)),this}clampLength(min,max){let length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(length){return this.normalize().multiplyScalar(length)}lerp(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this.z+=(v.z-this.z)*alpha,this}lerpVectors(v1,v2,alpha){return this.x=v1.x+(v2.x-v1.x)*alpha,this.y=v1.y+(v2.y-v1.y)*alpha,this.z=v1.z+(v2.z-v1.z)*alpha,this}cross(v){return this.crossVectors(this,v)}crossVectors(a,b){let ax=a.x,ay=a.y,az=a.z,bx=b.x,by=b.y,bz=b.z;return this.x=ay*bz-az*by,this.y=az*bx-ax*bz,this.z=ax*by-ay*bx,this}projectOnVector(v){let denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);let scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar)}projectOnPlane(planeNormal){return _vector$c.copy(this).projectOnVector(planeNormal),this.sub(_vector$c)}reflect(normal){return this.sub(_vector$c.copy(normal).multiplyScalar(2*this.dot(normal)))}angleTo(v){let denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;let theta=this.dot(v)/denominator;return Math.acos(clamp(theta,-1,1))}distanceTo(v){return Math.sqrt(this.distanceToSquared(v))}distanceToSquared(v){let dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz}manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z)}setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta)}setFromSphericalCoords(radius,phi,theta){let sinPhiRadius=Math.sin(phi)*radius;return this.x=sinPhiRadius*Math.sin(theta),this.y=Math.cos(phi)*radius,this.z=sinPhiRadius*Math.cos(theta),this}setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y)}setFromCylindricalCoords(radius,theta,y){return this.x=radius*Math.sin(theta),this.y=y,this.z=radius*Math.cos(theta),this}setFromMatrixPosition(m){let e=m.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(m){let sx=this.setFromMatrixColumn(m,0).length(),sy=this.setFromMatrixColumn(m,1).length(),sz=this.setFromMatrixColumn(m,2).length();return this.x=sx,this.y=sy,this.z=sz,this}setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4)}setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z}fromArray(array,offset=0){return this.x=array[offset],this.y=array[offset+1],this.z=array[offset+2],this}toArray(array=[],offset=0){return array[offset]=this.x,array[offset+1]=this.y,array[offset+2]=this.z,array}fromBufferAttribute(attribute,index){return this.x=attribute.getX(index),this.y=attribute.getY(index),this.z=attribute.getZ(index),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){let u=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,f=Math.sqrt(1-__pow(u,2));return this.x=f*Math.cos(t),this.y=f*Math.sin(t),this.z=u,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}},_vector$c=new Vector3,_quaternion$4=new Quaternion,Box3=class{constructor(min=new Vector3(1/0,1/0,1/0),max=new Vector3(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=min,this.max=max}set(min,max){return this.min.copy(min),this.max.copy(max),this}setFromArray(array){let minX=1/0,minY=1/0,minZ=1/0,maxX=-1/0,maxY=-1/0,maxZ=-1/0;for(let i=0,l=array.length;i<l;i+=3){let x=array[i],y=array[i+1],z=array[i+2];x<minX&&(minX=x),y<minY&&(minY=y),z<minZ&&(minZ=z),x>maxX&&(maxX=x),y>maxY&&(maxY=y),z>maxZ&&(maxZ=z)}return this.min.set(minX,minY,minZ),this.max.set(maxX,maxY,maxZ),this}setFromBufferAttribute(attribute){let minX=1/0,minY=1/0,minZ=1/0,maxX=-1/0,maxY=-1/0,maxZ=-1/0;for(let i=0,l=attribute.count;i<l;i++){let x=attribute.getX(i),y=attribute.getY(i),z=attribute.getZ(i);x<minX&&(minX=x),y<minY&&(minY=y),z<minZ&&(minZ=z),x>maxX&&(maxX=x),y>maxY&&(maxY=y),z>maxZ&&(maxZ=z)}return this.min.set(minX,minY,minZ),this.max.set(maxX,maxY,maxZ),this}setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++)this.expandByPoint(points[i]);return this}setFromCenterAndSize(center,size){let halfSize=_vector$b.copy(size).multiplyScalar(.5);return this.min.copy(center).sub(halfSize),this.max.copy(center).add(halfSize),this}setFromObject(object,precise=!1){return this.makeEmpty(),this.expandByObject(object,precise)}clone(){return new this.constructor().copy(this)}copy(box2){return this.min.copy(box2.min),this.max.copy(box2.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(target){return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(target){return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min)}expandByPoint(point2){return this.min.min(point2),this.max.max(point2),this}expandByVector(vector){return this.min.sub(vector),this.max.add(vector),this}expandByScalar(scalar){return this.min.addScalar(-scalar),this.max.addScalar(scalar),this}expandByObject(object,precise=!1){object.updateWorldMatrix(!1,!1);let geometry=object.geometry;if(geometry!==void 0)if(precise&&geometry.attributes!=null&&geometry.attributes.position!==void 0){let position=geometry.attributes.position;for(let i=0,l=position.count;i<l;i++)_vector$b.fromBufferAttribute(position,i).applyMatrix4(object.matrixWorld),this.expandByPoint(_vector$b)}else geometry.boundingBox===null&&geometry.computeBoundingBox(),_box$3.copy(geometry.boundingBox),_box$3.applyMatrix4(object.matrixWorld),this.union(_box$3);let children=object.children;for(let i=0,l=children.length;i<l;i++)this.expandByObject(children[i],precise);return this}containsPoint(point2){return!(point2.x<this.min.x||point2.x>this.max.x||point2.y<this.min.y||point2.y>this.max.y||point2.z<this.min.z||point2.z>this.max.z)}containsBox(box2){return this.min.x<=box2.min.x&&box2.max.x<=this.max.x&&this.min.y<=box2.min.y&&box2.max.y<=this.max.y&&this.min.z<=box2.min.z&&box2.max.z<=this.max.z}getParameter(point2,target){return target.set((point2.x-this.min.x)/(this.max.x-this.min.x),(point2.y-this.min.y)/(this.max.y-this.min.y),(point2.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(box2){return!(box2.max.x<this.min.x||box2.min.x>this.max.x||box2.max.y<this.min.y||box2.min.y>this.max.y||box2.max.z<this.min.z||box2.min.z>this.max.z)}intersectsSphere(sphere2){return this.clampPoint(sphere2.center,_vector$b),_vector$b.distanceToSquared(sphere2.center)<=sphere2.radius*sphere2.radius}intersectsPlane(plane){let min,max;return plane.normal.x>0?(min=plane.normal.x*this.min.x,max=plane.normal.x*this.max.x):(min=plane.normal.x*this.max.x,max=plane.normal.x*this.min.x),plane.normal.y>0?(min+=plane.normal.y*this.min.y,max+=plane.normal.y*this.max.y):(min+=plane.normal.y*this.max.y,max+=plane.normal.y*this.min.y),plane.normal.z>0?(min+=plane.normal.z*this.min.z,max+=plane.normal.z*this.max.z):(min+=plane.normal.z*this.max.z,max+=plane.normal.z*this.min.z),min<=-plane.constant&&max>=-plane.constant}intersectsTriangle(triangle){if(this.isEmpty())return!1;this.getCenter(_center),_extents.subVectors(this.max,_center),_v0$2.subVectors(triangle.a,_center),_v1$7.subVectors(triangle.b,_center),_v2$4.subVectors(triangle.c,_center),_f0.subVectors(_v1$7,_v0$2),_f1.subVectors(_v2$4,_v1$7),_f2.subVectors(_v0$2,_v2$4);let axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];return!satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents)||(axes=[1,0,0,0,1,0,0,0,1],!satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents))?!1:(_triangleNormal.crossVectors(_f0,_f1),axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z],satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents))}clampPoint(point2,target){return target.copy(point2).clamp(this.min,this.max)}distanceToPoint(point2){return _vector$b.copy(point2).clamp(this.min,this.max).sub(point2).length()}getBoundingSphere(target){return this.getCenter(target.center),target.radius=this.getSize(_vector$b).length()*.5,target}intersect(box2){return this.min.max(box2.min),this.max.min(box2.max),this.isEmpty()&&this.makeEmpty(),this}union(box2){return this.min.min(box2.min),this.max.max(box2.max),this}applyMatrix4(matrix){return this.isEmpty()?this:(_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix),_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix),_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix),_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix),_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix),_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix),_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix),_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix),this.setFromPoints(_points),this)}translate(offset){return this.min.add(offset),this.max.add(offset),this}equals(box2){return box2.min.equals(this.min)&&box2.max.equals(this.max)}},_points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3],_vector$b=new Vector3,_box$3=new Box3,_v0$2=new Vector3,_v1$7=new Vector3,_v2$4=new Vector3,_f0=new Vector3,_f1=new Vector3,_f2=new Vector3,_center=new Vector3,_extents=new Vector3,_triangleNormal=new Vector3,_testAxis=new Vector3;function satForAxes(axes,v0,v1,v2,extents){for(let i=0,j=axes.length-3;i<=j;i+=3){_testAxis.fromArray(axes,i);let r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z),p0=v0.dot(_testAxis),p1=v1.dot(_testAxis),p2=v2.dot(_testAxis);if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r)return!1}return!0}var _box$2=new Box3,_v1$6=new Vector3,_v2$3=new Vector3,Sphere=class{constructor(center=new Vector3,radius=-1){this.center=center,this.radius=radius}set(center,radius){return this.center.copy(center),this.radius=radius,this}setFromPoints(points,optionalCenter){let center=this.center;optionalCenter!==void 0?center.copy(optionalCenter):_box$2.setFromPoints(points).getCenter(center);let maxRadiusSq=0;for(let i=0,il=points.length;i<il;i++)maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));return this.radius=Math.sqrt(maxRadiusSq),this}copy(sphere2){return this.center.copy(sphere2.center),this.radius=sphere2.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(point2){return point2.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(point2){return point2.distanceTo(this.center)-this.radius}intersectsSphere(sphere2){let radiusSum=this.radius+sphere2.radius;return sphere2.center.distanceToSquared(this.center)<=radiusSum*radiusSum}intersectsBox(box2){return box2.intersectsSphere(this)}intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius}clampPoint(point2,target){let deltaLengthSq=this.center.distanceToSquared(point2);return target.copy(point2),deltaLengthSq>this.radius*this.radius&&(target.sub(this.center).normalize(),target.multiplyScalar(this.radius).add(this.center)),target}getBoundingBox(target){return this.isEmpty()?(target.makeEmpty(),target):(target.set(this.center,this.center),target.expandByScalar(this.radius),target)}applyMatrix4(matrix){return this.center.applyMatrix4(matrix),this.radius=this.radius*matrix.getMaxScaleOnAxis(),this}translate(offset){return this.center.add(offset),this}expandByPoint(point2){if(this.isEmpty())return this.center.copy(point2),this.radius=0,this;_v1$6.subVectors(point2,this.center);let lengthSq=_v1$6.lengthSq();if(lengthSq>this.radius*this.radius){let length=Math.sqrt(lengthSq),delta=(length-this.radius)*.5;this.center.addScaledVector(_v1$6,delta/length),this.radius+=delta}return this}union(sphere2){return sphere2.isEmpty()?this:this.isEmpty()?(this.copy(sphere2),this):(this.center.equals(sphere2.center)===!0?this.radius=Math.max(this.radius,sphere2.radius):(_v2$3.subVectors(sphere2.center,this.center).setLength(sphere2.radius),this.expandByPoint(_v1$6.copy(sphere2.center).add(_v2$3)),this.expandByPoint(_v1$6.copy(sphere2.center).sub(_v2$3))),this)}equals(sphere2){return sphere2.center.equals(this.center)&&sphere2.radius===this.radius}clone(){return new this.constructor().copy(this)}},_vector$a=new Vector3,_segCenter=new Vector3,_segDir=new Vector3,_diff=new Vector3,_edge1=new Vector3,_edge2=new Vector3,_normal$1=new Vector3,Ray=class{constructor(origin=new Vector3,direction=new Vector3(0,0,-1)){this.origin=origin,this.direction=direction}set(origin,direction){return this.origin.copy(origin),this.direction.copy(direction),this}copy(ray){return this.origin.copy(ray.origin),this.direction.copy(ray.direction),this}at(t,target){return target.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(v){return this.direction.copy(v).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,_vector$a)),this}closestPointToPoint(point2,target){target.subVectors(point2,this.origin);let directionDistance=target.dot(this.direction);return directionDistance<0?target.copy(this.origin):target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin)}distanceToPoint(point2){return Math.sqrt(this.distanceSqToPoint(point2))}distanceSqToPoint(point2){let directionDistance=_vector$a.subVectors(point2,this.origin).dot(this.direction);return directionDistance<0?this.origin.distanceToSquared(point2):(_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin),_vector$a.distanceToSquared(point2))}distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){_segCenter.copy(v0).add(v1).multiplyScalar(.5),_segDir.copy(v1).sub(v0).normalize(),_diff.copy(this.origin).sub(_segCenter);let segExtent=v0.distanceTo(v1)*.5,a01=-this.direction.dot(_segDir),b0=_diff.dot(this.direction),b1=-_diff.dot(_segDir),c=_diff.lengthSq(),det=Math.abs(1-a01*a01),s0,s1,sqrDist,extDet;if(det>0)if(s0=a01*b1-b0,s1=a01*b0-b1,extDet=segExtent*det,s0>=0)if(s1>=-extDet)if(s1<=extDet){let invDet=1/det;s0*=invDet,s1*=invDet,sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c}else s1=segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;else s1=-segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;else s1<=-extDet?(s0=Math.max(0,-(-a01*segExtent+b0)),s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=-s0*s0+s1*(s1+2*b1)+c):s1<=extDet?(s0=0,s1=Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=s1*(s1+2*b1)+c):(s0=Math.max(0,-(a01*segExtent+b0)),s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=-s0*s0+s1*(s1+2*b1)+c);else s1=a01>0?-segExtent:segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;return optionalPointOnRay&&optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin),optionalPointOnSegment&&optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter),sqrDist}intersectSphere(sphere2,target){_vector$a.subVectors(sphere2.center,this.origin);let tca=_vector$a.dot(this.direction),d2=_vector$a.dot(_vector$a)-tca*tca,radius2=sphere2.radius*sphere2.radius;if(d2>radius2)return null;let thc=Math.sqrt(radius2-d2),t0=tca-thc,t1=tca+thc;return t0<0&&t1<0?null:t0<0?this.at(t1,target):this.at(t0,target)}intersectsSphere(sphere2){return this.distanceSqToPoint(sphere2.center)<=sphere2.radius*sphere2.radius}distanceToPlane(plane){let denominator=plane.normal.dot(this.direction);if(denominator===0)return plane.distanceToPoint(this.origin)===0?0:null;let t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;return t>=0?t:null}intersectPlane(plane,target){let t=this.distanceToPlane(plane);return t===null?null:this.at(t,target)}intersectsPlane(plane){let distToPoint=plane.distanceToPoint(this.origin);return distToPoint===0||plane.normal.dot(this.direction)*distToPoint<0}intersectBox(box2,target){let tmin,tmax,tymin,tymax,tzmin,tzmax,invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z,origin=this.origin;return invdirx>=0?(tmin=(box2.min.x-origin.x)*invdirx,tmax=(box2.max.x-origin.x)*invdirx):(tmin=(box2.max.x-origin.x)*invdirx,tmax=(box2.min.x-origin.x)*invdirx),invdiry>=0?(tymin=(box2.min.y-origin.y)*invdiry,tymax=(box2.max.y-origin.y)*invdiry):(tymin=(box2.max.y-origin.y)*invdiry,tymax=(box2.min.y-origin.y)*invdiry),tmin>tymax||tymin>tmax||((tymin>tmin||isNaN(tmin))&&(tmin=tymin),(tymax<tmax||isNaN(tmax))&&(tmax=tymax),invdirz>=0?(tzmin=(box2.min.z-origin.z)*invdirz,tzmax=(box2.max.z-origin.z)*invdirz):(tzmin=(box2.max.z-origin.z)*invdirz,tzmax=(box2.min.z-origin.z)*invdirz),tmin>tzmax||tzmin>tmax)||((tzmin>tmin||tmin!==tmin)&&(tmin=tzmin),(tzmax<tmax||tmax!==tmax)&&(tmax=tzmax),tmax<0)?null:this.at(tmin>=0?tmin:tmax,target)}intersectsBox(box2){return this.intersectBox(box2,_vector$a)!==null}intersectTriangle(a,b,c,backfaceCulling,target){_edge1.subVectors(b,a),_edge2.subVectors(c,a),_normal$1.crossVectors(_edge1,_edge2);let DdN=this.direction.dot(_normal$1),sign2;if(DdN>0){if(backfaceCulling)return null;sign2=1}else if(DdN<0)sign2=-1,DdN=-DdN;else return null;_diff.subVectors(this.origin,a);let DdQxE2=sign2*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(DdQxE2<0)return null;let DdE1xQ=sign2*this.direction.dot(_edge1.cross(_diff));if(DdE1xQ<0||DdQxE2+DdE1xQ>DdN)return null;let QdN=-sign2*_diff.dot(_normal$1);return QdN<0?null:this.at(QdN/DdN,target)}applyMatrix4(matrix4){return this.origin.applyMatrix4(matrix4),this.direction.transformDirection(matrix4),this}equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},Matrix4=class{constructor(){Matrix4.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){let te=this.elements;return te[0]=n11,te[4]=n12,te[8]=n13,te[12]=n14,te[1]=n21,te[5]=n22,te[9]=n23,te[13]=n24,te[2]=n31,te[6]=n32,te[10]=n33,te[14]=n34,te[3]=n41,te[7]=n42,te[11]=n43,te[15]=n44,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Matrix4().fromArray(this.elements)}copy(m){let te=this.elements,me=m.elements;return te[0]=me[0],te[1]=me[1],te[2]=me[2],te[3]=me[3],te[4]=me[4],te[5]=me[5],te[6]=me[6],te[7]=me[7],te[8]=me[8],te[9]=me[9],te[10]=me[10],te[11]=me[11],te[12]=me[12],te[13]=me[13],te[14]=me[14],te[15]=me[15],this}copyPosition(m){let te=this.elements,me=m.elements;return te[12]=me[12],te[13]=me[13],te[14]=me[14],this}setFromMatrix3(m){let me=m.elements;return this.set(me[0],me[3],me[6],0,me[1],me[4],me[7],0,me[2],me[5],me[8],0,0,0,0,1),this}extractBasis(xAxis,yAxis,zAxis){return xAxis.setFromMatrixColumn(this,0),yAxis.setFromMatrixColumn(this,1),zAxis.setFromMatrixColumn(this,2),this}makeBasis(xAxis,yAxis,zAxis){return this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1),this}extractRotation(m){let te=this.elements,me=m.elements,scaleX=1/_v1$5.setFromMatrixColumn(m,0).length(),scaleY=1/_v1$5.setFromMatrixColumn(m,1).length(),scaleZ=1/_v1$5.setFromMatrixColumn(m,2).length();return te[0]=me[0]*scaleX,te[1]=me[1]*scaleX,te[2]=me[2]*scaleX,te[3]=0,te[4]=me[4]*scaleY,te[5]=me[5]*scaleY,te[6]=me[6]*scaleY,te[7]=0,te[8]=me[8]*scaleZ,te[9]=me[9]*scaleZ,te[10]=me[10]*scaleZ,te[11]=0,te[12]=0,te[13]=0,te[14]=0,te[15]=1,this}makeRotationFromEuler(euler){let te=this.elements,x=euler.x,y=euler.y,z=euler.z,a=Math.cos(x),b=Math.sin(x),c=Math.cos(y),d=Math.sin(y),e=Math.cos(z),f=Math.sin(z);if(euler.order==="XYZ"){let ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e,te[4]=-c*f,te[8]=d,te[1]=af+be*d,te[5]=ae-bf*d,te[9]=-b*c,te[2]=bf-ae*d,te[6]=be+af*d,te[10]=a*c}else if(euler.order==="YXZ"){let ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b,te[4]=de*b-cf,te[8]=a*d,te[1]=a*f,te[5]=a*e,te[9]=-b,te[2]=cf*b-de,te[6]=df+ce*b,te[10]=a*c}else if(euler.order==="ZXY"){let ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b,te[4]=-a*f,te[8]=de+cf*b,te[1]=cf+de*b,te[5]=a*e,te[9]=df-ce*b,te[2]=-a*d,te[6]=b,te[10]=a*c}else if(euler.order==="ZYX"){let ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e,te[4]=be*d-af,te[8]=ae*d+bf,te[1]=c*f,te[5]=bf*d+ae,te[9]=af*d-be,te[2]=-d,te[6]=b*c,te[10]=a*c}else if(euler.order==="YZX"){let ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e,te[4]=bd-ac*f,te[8]=bc*f+ad,te[1]=f,te[5]=a*e,te[9]=-b*e,te[2]=-d*e,te[6]=ad*f+bc,te[10]=ac-bd*f}else if(euler.order==="XZY"){let ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e,te[4]=-f,te[8]=d*e,te[1]=ac*f+bd,te[5]=a*e,te[9]=ad*f-bc,te[2]=bc*f-ad,te[6]=b*e,te[10]=bd*f+ac}return te[3]=0,te[7]=0,te[11]=0,te[12]=0,te[13]=0,te[14]=0,te[15]=1,this}makeRotationFromQuaternion(q){return this.compose(_zero,q,_one)}lookAt(eye,target,up){let te=this.elements;return _z.subVectors(eye,target),_z.lengthSq()===0&&(_z.z=1),_z.normalize(),_x.crossVectors(up,_z),_x.lengthSq()===0&&(Math.abs(up.z)===1?_z.x+=1e-4:_z.z+=1e-4,_z.normalize(),_x.crossVectors(up,_z)),_x.normalize(),_y.crossVectors(_z,_x),te[0]=_x.x,te[4]=_y.x,te[8]=_z.x,te[1]=_x.y,te[5]=_y.y,te[9]=_z.y,te[2]=_x.z,te[6]=_y.z,te[10]=_z.z,this}multiply(m){return this.multiplyMatrices(this,m)}premultiply(m){return this.multiplyMatrices(m,this)}multiplyMatrices(a,b){let ae=a.elements,be=b.elements,te=this.elements,a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12],a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13],a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14],a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15],b11=be[0],b12=be[4],b13=be[8],b14=be[12],b21=be[1],b22=be[5],b23=be[9],b24=be[13],b31=be[2],b32=be[6],b33=be[10],b34=be[14],b41=be[3],b42=be[7],b43=be[11],b44=be[15];return te[0]=a11*b11+a12*b21+a13*b31+a14*b41,te[4]=a11*b12+a12*b22+a13*b32+a14*b42,te[8]=a11*b13+a12*b23+a13*b33+a14*b43,te[12]=a11*b14+a12*b24+a13*b34+a14*b44,te[1]=a21*b11+a22*b21+a23*b31+a24*b41,te[5]=a21*b12+a22*b22+a23*b32+a24*b42,te[9]=a21*b13+a22*b23+a23*b33+a24*b43,te[13]=a21*b14+a22*b24+a23*b34+a24*b44,te[2]=a31*b11+a32*b21+a33*b31+a34*b41,te[6]=a31*b12+a32*b22+a33*b32+a34*b42,te[10]=a31*b13+a32*b23+a33*b33+a34*b43,te[14]=a31*b14+a32*b24+a33*b34+a34*b44,te[3]=a41*b11+a42*b21+a43*b31+a44*b41,te[7]=a41*b12+a42*b22+a43*b32+a44*b42,te[11]=a41*b13+a42*b23+a43*b33+a44*b43,te[15]=a41*b14+a42*b24+a43*b34+a44*b44,this}multiplyScalar(s){let te=this.elements;return te[0]*=s,te[4]*=s,te[8]*=s,te[12]*=s,te[1]*=s,te[5]*=s,te[9]*=s,te[13]*=s,te[2]*=s,te[6]*=s,te[10]*=s,te[14]*=s,te[3]*=s,te[7]*=s,te[11]*=s,te[15]*=s,this}determinant(){let te=this.elements,n11=te[0],n12=te[4],n13=te[8],n14=te[12],n21=te[1],n22=te[5],n23=te[9],n24=te[13],n31=te[2],n32=te[6],n33=te[10],n34=te[14],n41=te[3],n42=te[7],n43=te[11],n44=te[15];return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31)}transpose(){let te=this.elements,tmp2;return tmp2=te[1],te[1]=te[4],te[4]=tmp2,tmp2=te[2],te[2]=te[8],te[8]=tmp2,tmp2=te[6],te[6]=te[9],te[9]=tmp2,tmp2=te[3],te[3]=te[12],te[12]=tmp2,tmp2=te[7],te[7]=te[13],te[13]=tmp2,tmp2=te[11],te[11]=te[14],te[14]=tmp2,this}setPosition(x,y,z){let te=this.elements;return x.isVector3?(te[12]=x.x,te[13]=x.y,te[14]=x.z):(te[12]=x,te[13]=y,te[14]=z),this}invert(){let te=this.elements,n11=te[0],n21=te[1],n31=te[2],n41=te[3],n12=te[4],n22=te[5],n32=te[6],n42=te[7],n13=te[8],n23=te[9],n33=te[10],n43=te[11],n14=te[12],n24=te[13],n34=te[14],n44=te[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34,det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);let detInv=1/det;return te[0]=t11*detInv,te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv,te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv,te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv,te[4]=t12*detInv,te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv,te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv,te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv,te[8]=t13*detInv,te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv,te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv,te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv,te[12]=t14*detInv,te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv,te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv,te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv,this}scale(v){let te=this.elements,x=v.x,y=v.y,z=v.z;return te[0]*=x,te[4]*=y,te[8]*=z,te[1]*=x,te[5]*=y,te[9]*=z,te[2]*=x,te[6]*=y,te[10]*=z,te[3]*=x,te[7]*=y,te[11]*=z,this}getMaxScaleOnAxis(){let te=this.elements,scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2],scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6],scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq))}makeTranslation(x,y,z){return this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1),this}makeRotationX(theta){let c=Math.cos(theta),s=Math.sin(theta);return this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1),this}makeRotationY(theta){let c=Math.cos(theta),s=Math.sin(theta);return this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1),this}makeRotationZ(theta){let c=Math.cos(theta),s=Math.sin(theta);return this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(axis,angle2){let c=Math.cos(angle2),s=Math.sin(angle2),t=1-c,x=axis.x,y=axis.y,z=axis.z,tx=t*x,ty=t*y;return this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1),this}makeScale(x,y,z){return this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1),this}makeShear(xy,xz,yx,yz,zx,zy){return this.set(1,yx,zx,0,xy,1,zy,0,xz,yz,1,0,0,0,0,1),this}compose(position,quaternion,scale){let te=this.elements,x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w,x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2,sx=scale.x,sy=scale.y,sz=scale.z;return te[0]=(1-(yy+zz))*sx,te[1]=(xy+wz)*sx,te[2]=(xz-wy)*sx,te[3]=0,te[4]=(xy-wz)*sy,te[5]=(1-(xx+zz))*sy,te[6]=(yz+wx)*sy,te[7]=0,te[8]=(xz+wy)*sz,te[9]=(yz-wx)*sz,te[10]=(1-(xx+yy))*sz,te[11]=0,te[12]=position.x,te[13]=position.y,te[14]=position.z,te[15]=1,this}decompose(position,quaternion,scale){let te=this.elements,sx=_v1$5.set(te[0],te[1],te[2]).length(),sy=_v1$5.set(te[4],te[5],te[6]).length(),sz=_v1$5.set(te[8],te[9],te[10]).length();this.determinant()<0&&(sx=-sx),position.x=te[12],position.y=te[13],position.z=te[14],_m1$2.copy(this);let invSX=1/sx,invSY=1/sy,invSZ=1/sz;return _m1$2.elements[0]*=invSX,_m1$2.elements[1]*=invSX,_m1$2.elements[2]*=invSX,_m1$2.elements[4]*=invSY,_m1$2.elements[5]*=invSY,_m1$2.elements[6]*=invSY,_m1$2.elements[8]*=invSZ,_m1$2.elements[9]*=invSZ,_m1$2.elements[10]*=invSZ,quaternion.setFromRotationMatrix(_m1$2),scale.x=sx,scale.y=sy,scale.z=sz,this}makePerspective(left,right,top,bottom,near,far){let te=this.elements,x=2*near/(right-left),y=2*near/(top-bottom),a=(right+left)/(right-left),b=(top+bottom)/(top-bottom),c=-(far+near)/(far-near),d=-2*far*near/(far-near);return te[0]=x,te[4]=0,te[8]=a,te[12]=0,te[1]=0,te[5]=y,te[9]=b,te[13]=0,te[2]=0,te[6]=0,te[10]=c,te[14]=d,te[3]=0,te[7]=0,te[11]=-1,te[15]=0,this}makeOrthographic(left,right,top,bottom,near,far){let te=this.elements,w=1/(right-left),h=1/(top-bottom),p=1/(far-near),x=(right+left)*w,y=(top+bottom)*h,z=(far+near)*p;return te[0]=2*w,te[4]=0,te[8]=0,te[12]=-x,te[1]=0,te[5]=2*h,te[9]=0,te[13]=-y,te[2]=0,te[6]=0,te[10]=-2*p,te[14]=-z,te[3]=0,te[7]=0,te[11]=0,te[15]=1,this}equals(matrix){let te=this.elements,me=matrix.elements;for(let i=0;i<16;i++)if(te[i]!==me[i])return!1;return!0}fromArray(array,offset=0){for(let i=0;i<16;i++)this.elements[i]=array[i+offset];return this}toArray(array=[],offset=0){let te=this.elements;return array[offset]=te[0],array[offset+1]=te[1],array[offset+2]=te[2],array[offset+3]=te[3],array[offset+4]=te[4],array[offset+5]=te[5],array[offset+6]=te[6],array[offset+7]=te[7],array[offset+8]=te[8],array[offset+9]=te[9],array[offset+10]=te[10],array[offset+11]=te[11],array[offset+12]=te[12],array[offset+13]=te[13],array[offset+14]=te[14],array[offset+15]=te[15],array}},_v1$5=new Vector3,_m1$2=new Matrix4,_zero=new Vector3(0,0,0),_one=new Vector3(1,1,1),_x=new Vector3,_y=new Vector3,_z=new Vector3,_matrix$1=new Matrix4,_quaternion$3=new Quaternion,Euler=class{constructor(x=0,y=0,z=0,order=Euler.DefaultOrder){this.isEuler=!0,this._x=x,this._y=y,this._z=z,this._order=order}get x(){return this._x}set x(value){this._x=value,this._onChangeCallback()}get y(){return this._y}set y(value){this._y=value,this._onChangeCallback()}get z(){return this._z}set z(value){this._z=value,this._onChangeCallback()}get order(){return this._order}set order(value){this._order=value,this._onChangeCallback()}set(x,y,z,order=this._order){return this._x=x,this._y=y,this._z=z,this._order=order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(euler){return this._x=euler._x,this._y=euler._y,this._z=euler._z,this._order=euler._order,this._onChangeCallback(),this}setFromRotationMatrix(m,order=this._order,update=!0){let te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];switch(order){case"XYZ":this._y=Math.asin(clamp(m13,-1,1)),Math.abs(m13)<.9999999?(this._x=Math.atan2(-m23,m33),this._z=Math.atan2(-m12,m11)):(this._x=Math.atan2(m32,m22),this._z=0);break;case"YXZ":this._x=Math.asin(-clamp(m23,-1,1)),Math.abs(m23)<.9999999?(this._y=Math.atan2(m13,m33),this._z=Math.atan2(m21,m22)):(this._y=Math.atan2(-m31,m11),this._z=0);break;case"ZXY":this._x=Math.asin(clamp(m32,-1,1)),Math.abs(m32)<.9999999?(this._y=Math.atan2(-m31,m33),this._z=Math.atan2(-m12,m22)):(this._y=0,this._z=Math.atan2(m21,m11));break;case"ZYX":this._y=Math.asin(-clamp(m31,-1,1)),Math.abs(m31)<.9999999?(this._x=Math.atan2(m32,m33),this._z=Math.atan2(m21,m11)):(this._x=0,this._z=Math.atan2(-m12,m22));break;case"YZX":this._z=Math.asin(clamp(m21,-1,1)),Math.abs(m21)<.9999999?(this._x=Math.atan2(-m23,m22),this._y=Math.atan2(-m31,m11)):(this._x=0,this._y=Math.atan2(m13,m33));break;case"XZY":this._z=Math.asin(-clamp(m12,-1,1)),Math.abs(m12)<.9999999?(this._x=Math.atan2(m32,m22),this._y=Math.atan2(m13,m11)):(this._x=Math.atan2(-m23,m33),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+order)}return this._order=order,update===!0&&this._onChangeCallback(),this}setFromQuaternion(q,order,update){return _matrix$1.makeRotationFromQuaternion(q),this.setFromRotationMatrix(_matrix$1,order,update)}setFromVector3(v,order=this._order){return this.set(v.x,v.y,v.z,order)}reorder(newOrder){return _quaternion$3.setFromEuler(this),this.setFromQuaternion(_quaternion$3,newOrder)}equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order}fromArray(array){return this._x=array[0],this._y=array[1],this._z=array[2],array[3]!==void 0&&(this._order=array[3]),this._onChangeCallback(),this}toArray(array=[],offset=0){return array[offset]=this._x,array[offset+1]=this._y,array[offset+2]=this._z,array[offset+3]=this._order,array}_onChange(callback){return this._onChangeCallback=callback,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}};Euler.DefaultOrder="XYZ";Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];var Layers=class{constructor(){this.mask=1}set(channel){this.mask=(1<<channel|0)>>>0}enable(channel){this.mask|=1<<channel|0}enableAll(){this.mask=-1}toggle(channel){this.mask^=1<<channel|0}disable(channel){this.mask&=~(1<<channel|0)}disableAll(){this.mask=0}test(layers){return(this.mask&layers.mask)!==0}isEnabled(channel){return(this.mask&(1<<channel|0))!==0}},_object3DId=0,_v1$4=new Vector3,_q1=new Quaternion,_m1$1=new Matrix4,_target=new Vector3,_position$3=new Vector3,_scale$2=new Vector3,_quaternion$2=new Quaternion,_xAxis=new Vector3(1,0,0),_yAxis=new Vector3(0,1,0),_zAxis=new Vector3(0,0,1),_addedEvent={type:"added"},_removedEvent={type:"removed"},Object3D=class extends EventDispatcher{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:_object3DId++}),this.uuid=generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Object3D.DefaultUp.clone();let position=new Vector3,rotation=new Euler,quaternion=new Quaternion,scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,!1)}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,void 0,!1)}rotation._onChange(onRotationChange),quaternion._onChange(onQuaternionChange),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:position},rotation:{configurable:!0,enumerable:!0,value:rotation},quaternion:{configurable:!0,enumerable:!0,value:quaternion},scale:{configurable:!0,enumerable:!0,value:scale},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}}),this.matrix=new Matrix4,this.matrixWorld=new Matrix4,this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=Object3D.DefaultMatrixWorldAutoUpdate,this.layers=new Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(matrix){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(q){return this.quaternion.premultiply(q),this}setRotationFromAxisAngle(axis,angle2){this.quaternion.setFromAxisAngle(axis,angle2)}setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,!0)}setRotationFromMatrix(m){this.quaternion.setFromRotationMatrix(m)}setRotationFromQuaternion(q){this.quaternion.copy(q)}rotateOnAxis(axis,angle2){return _q1.setFromAxisAngle(axis,angle2),this.quaternion.multiply(_q1),this}rotateOnWorldAxis(axis,angle2){return _q1.setFromAxisAngle(axis,angle2),this.quaternion.premultiply(_q1),this}rotateX(angle2){return this.rotateOnAxis(_xAxis,angle2)}rotateY(angle2){return this.rotateOnAxis(_yAxis,angle2)}rotateZ(angle2){return this.rotateOnAxis(_zAxis,angle2)}translateOnAxis(axis,distance){return _v1$4.copy(axis).applyQuaternion(this.quaternion),this.position.add(_v1$4.multiplyScalar(distance)),this}translateX(distance){return this.translateOnAxis(_xAxis,distance)}translateY(distance){return this.translateOnAxis(_yAxis,distance)}translateZ(distance){return this.translateOnAxis(_zAxis,distance)}localToWorld(vector){return vector.applyMatrix4(this.matrixWorld)}worldToLocal(vector){return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert())}lookAt(x,y,z){x.isVector3?_target.copy(x):_target.set(x,y,z);let parent=this.parent;this.updateWorldMatrix(!0,!1),_position$3.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?_m1$1.lookAt(_position$3,_target,this.up):_m1$1.lookAt(_target,_position$3,this.up),this.quaternion.setFromRotationMatrix(_m1$1),parent&&(_m1$1.extractRotation(parent.matrixWorld),_q1.setFromRotationMatrix(_m1$1),this.quaternion.premultiply(_q1.invert()))}add(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return object===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",object),this):(object&&object.isObject3D?(object.parent!==null&&object.parent.remove(object),object.parent=this,this.children.push(object),object.dispatchEvent(_addedEvent)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object),this)}remove(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}let index=this.children.indexOf(object);return index!==-1&&(object.parent=null,this.children.splice(index,1),object.dispatchEvent(_removedEvent)),this}removeFromParent(){let parent=this.parent;return parent!==null&&parent.remove(this),this}clear(){for(let i=0;i<this.children.length;i++){let object=this.children[i];object.parent=null,object.dispatchEvent(_removedEvent)}return this.children.length=0,this}attach(object){return this.updateWorldMatrix(!0,!1),_m1$1.copy(this.matrixWorld).invert(),object.parent!==null&&(object.parent.updateWorldMatrix(!0,!1),_m1$1.multiply(object.parent.matrixWorld)),object.applyMatrix4(_m1$1),this.add(object),object.updateWorldMatrix(!1,!0),this}getObjectById(id2){return this.getObjectByProperty("id",id2)}getObjectByName(name){return this.getObjectByProperty("name",name)}getObjectByProperty(name,value){if(this[name]===value)return this;for(let i=0,l=this.children.length;i<l;i++){let object=this.children[i].getObjectByProperty(name,value);if(object!==void 0)return object}}getWorldPosition(target){return this.updateWorldMatrix(!0,!1),target.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(target){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_position$3,target,_scale$2),target}getWorldScale(target){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_position$3,_quaternion$2,target),target}getWorldDirection(target){this.updateWorldMatrix(!0,!1);let e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(callback){callback(this);let children=this.children;for(let i=0,l=children.length;i<l;i++)children[i].traverse(callback)}traverseVisible(callback){if(this.visible===!1)return;callback(this);let children=this.children;for(let i=0,l=children.length;i<l;i++)children[i].traverseVisible(callback)}traverseAncestors(callback){let parent=this.parent;parent!==null&&(callback(parent),parent.traverseAncestors(callback))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(force){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||force)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,force=!0);let children=this.children;for(let i=0,l=children.length;i<l;i++){let child=children[i];(child.matrixWorldAutoUpdate===!0||force===!0)&&child.updateMatrixWorld(force)}}updateWorldMatrix(updateParents,updateChildren){let parent=this.parent;if(updateParents===!0&&parent!==null&&parent.matrixWorldAutoUpdate===!0&&parent.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),updateChildren===!0){let children=this.children;for(let i=0,l=children.length;i<l;i++){let child=children[i];child.matrixWorldAutoUpdate===!0&&child.updateWorldMatrix(!1,!0)}}}toJSON(meta){let isRootObject=meta===void 0||typeof meta=="string",output={};isRootObject&&(meta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},output.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});let object={};object.uuid=this.uuid,object.type=this.type,this.name!==""&&(object.name=this.name),this.castShadow===!0&&(object.castShadow=!0),this.receiveShadow===!0&&(object.receiveShadow=!0),this.visible===!1&&(object.visible=!1),this.frustumCulled===!1&&(object.frustumCulled=!1),this.renderOrder!==0&&(object.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(object.userData=this.userData),object.layers=this.layers.mask,object.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(object.matrixAutoUpdate=!1),this.isInstancedMesh&&(object.type="InstancedMesh",object.count=this.count,object.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(object.instanceColor=this.instanceColor.toJSON()));function serialize(library,element){return library[element.uuid]===void 0&&(library[element.uuid]=element.toJSON(meta)),element.uuid}if(this.isScene)this.background&&(this.background.isColor?object.background=this.background.toJSON():this.background.isTexture&&(object.background=this.background.toJSON(meta).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(object.environment=this.environment.toJSON(meta).uuid);else if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);let parameters=this.geometry.parameters;if(parameters!==void 0&&parameters.shapes!==void 0){let shapes=parameters.shapes;if(Array.isArray(shapes))for(let i=0,l=shapes.length;i<l;i++){let shape=shapes[i];serialize(meta.shapes,shape)}else serialize(meta.shapes,shapes)}}if(this.isSkinnedMesh&&(object.bindMode=this.bindMode,object.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(serialize(meta.skeletons,this.skeleton),object.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){let uuids=[];for(let i=0,l=this.material.length;i<l;i++)uuids.push(serialize(meta.materials,this.material[i]));object.material=uuids}else object.material=serialize(meta.materials,this.material);if(this.children.length>0){object.children=[];for(let i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(this.animations.length>0){object.animations=[];for(let i=0;i<this.animations.length;i++){let animation=this.animations[i];object.animations.push(serialize(meta.animations,animation))}}if(isRootObject){let geometries=extractFromCache(meta.geometries),materials2=extractFromCache(meta.materials),textures=extractFromCache(meta.textures),images=extractFromCache(meta.images),shapes=extractFromCache(meta.shapes),skeletons=extractFromCache(meta.skeletons),animations=extractFromCache(meta.animations),nodes=extractFromCache(meta.nodes);geometries.length>0&&(output.geometries=geometries),materials2.length>0&&(output.materials=materials2),textures.length>0&&(output.textures=textures),images.length>0&&(output.images=images),shapes.length>0&&(output.shapes=shapes),skeletons.length>0&&(output.skeletons=skeletons),animations.length>0&&(output.animations=animations),nodes.length>0&&(output.nodes=nodes)}return output.object=object,output;function extractFromCache(cache){let values=[];for(let key in cache){let data=cache[key];delete data.metadata,values.push(data)}return values}}clone(recursive){return new this.constructor().copy(this,recursive)}copy(source,recursive=!0){if(this.name=source.name,this.up.copy(source.up),this.position.copy(source.position),this.rotation.order=source.rotation.order,this.quaternion.copy(source.quaternion),this.scale.copy(source.scale),this.matrix.copy(source.matrix),this.matrixWorld.copy(source.matrixWorld),this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=source.matrixWorldAutoUpdate,this.layers.mask=source.layers.mask,this.visible=source.visible,this.castShadow=source.castShadow,this.receiveShadow=source.receiveShadow,this.frustumCulled=source.frustumCulled,this.renderOrder=source.renderOrder,this.userData=JSON.parse(JSON.stringify(source.userData)),recursive===!0)for(let i=0;i<source.children.length;i++){let child=source.children[i];this.add(child.clone())}return this}};Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=!0;Object3D.DefaultMatrixWorldAutoUpdate=!0;var _v0$1=new Vector3,_v1$3=new Vector3,_v2$2=new Vector3,_v3$1=new Vector3,_vab=new Vector3,_vac=new Vector3,_vbc=new Vector3,_vap=new Vector3,_vbp=new Vector3,_vcp=new Vector3,Triangle=class{constructor(a=new Vector3,b=new Vector3,c=new Vector3){this.a=a,this.b=b,this.c=c}static getNormal(a,b,c,target){target.subVectors(c,b),_v0$1.subVectors(a,b),target.cross(_v0$1);let targetLengthSq=target.lengthSq();return targetLengthSq>0?target.multiplyScalar(1/Math.sqrt(targetLengthSq)):target.set(0,0,0)}static getBarycoord(point2,a,b,c,target){_v0$1.subVectors(c,a),_v1$3.subVectors(b,a),_v2$2.subVectors(point2,a);let dot00=_v0$1.dot(_v0$1),dot01=_v0$1.dot(_v1$3),dot02=_v0$1.dot(_v2$2),dot11=_v1$3.dot(_v1$3),dot12=_v1$3.dot(_v2$2),denom=dot00*dot11-dot01*dot01;if(denom===0)return target.set(-2,-1,-1);let invDenom=1/denom,u=(dot11*dot02-dot01*dot12)*invDenom,v=(dot00*dot12-dot01*dot02)*invDenom;return target.set(1-u-v,v,u)}static containsPoint(point2,a,b,c){return this.getBarycoord(point2,a,b,c,_v3$1),_v3$1.x>=0&&_v3$1.y>=0&&_v3$1.x+_v3$1.y<=1}static getUV(point2,p1,p2,p3,uv1,uv2,uv3,target){return this.getBarycoord(point2,p1,p2,p3,_v3$1),target.set(0,0),target.addScaledVector(uv1,_v3$1.x),target.addScaledVector(uv2,_v3$1.y),target.addScaledVector(uv3,_v3$1.z),target}static isFrontFacing(a,b,c,direction){return _v0$1.subVectors(c,b),_v1$3.subVectors(a,b),_v0$1.cross(_v1$3).dot(direction)<0}set(a,b,c){return this.a.copy(a),this.b.copy(b),this.c.copy(c),this}setFromPointsAndIndices(points,i0,i1,i2){return this.a.copy(points[i0]),this.b.copy(points[i1]),this.c.copy(points[i2]),this}setFromAttributeAndIndices(attribute,i0,i1,i2){return this.a.fromBufferAttribute(attribute,i0),this.b.fromBufferAttribute(attribute,i1),this.c.fromBufferAttribute(attribute,i2),this}clone(){return new this.constructor().copy(this)}copy(triangle){return this.a.copy(triangle.a),this.b.copy(triangle.b),this.c.copy(triangle.c),this}getArea(){return _v0$1.subVectors(this.c,this.b),_v1$3.subVectors(this.a,this.b),_v0$1.cross(_v1$3).length()*.5}getMidpoint(target){return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target)}getPlane(target){return target.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(point2,target){return Triangle.getBarycoord(point2,this.a,this.b,this.c,target)}getUV(point2,uv1,uv2,uv3,target){return Triangle.getUV(point2,this.a,this.b,this.c,uv1,uv2,uv3,target)}containsPoint(point2){return Triangle.containsPoint(point2,this.a,this.b,this.c)}isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction)}intersectsBox(box2){return box2.intersectsTriangle(this)}closestPointToPoint(p,target){let a=this.a,b=this.b,c=this.c,v,w;_vab.subVectors(b,a),_vac.subVectors(c,a),_vap.subVectors(p,a);let d1=_vab.dot(_vap),d2=_vac.dot(_vap);if(d1<=0&&d2<=0)return target.copy(a);_vbp.subVectors(p,b);let d3=_vab.dot(_vbp),d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3)return target.copy(b);let vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0)return v=d1/(d1-d3),target.copy(a).addScaledVector(_vab,v);_vcp.subVectors(p,c);let d5=_vab.dot(_vcp),d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6)return target.copy(c);let vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0)return w=d2/(d2-d6),target.copy(a).addScaledVector(_vac,w);let va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0)return _vbc.subVectors(c,b),w=(d4-d3)/(d4-d3+(d5-d6)),target.copy(b).addScaledVector(_vbc,w);let denom=1/(va+vb+vc);return v=vb*denom,w=vc*denom,target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w)}equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c)}},materialId=0,Material=class extends EventDispatcher{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:materialId++}),this.uuid=generateUUID(),this.name="",this.type="Material",this.blending=NormalBlending,this.side=FrontSide,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=SrcAlphaFactor,this.blendDst=OneMinusSrcAlphaFactor,this.blendEquation=AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=AlwaysStencilFunc,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=KeepStencilOp,this.stencilZFail=KeepStencilOp,this.stencilZPass=KeepStencilOp,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(value){this._alphaTest>0!=value>0&&this.version++,this._alphaTest=value}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(values){if(values!==void 0)for(let key in values){let newValue=values[key];if(newValue===void 0){console.warn("THREE.Material: '"+key+"' parameter is undefined.");continue}let currentValue=this[key];if(currentValue===void 0){console.warn("THREE."+this.type+": '"+key+"' is not a property of this material.");continue}currentValue&&currentValue.isColor?currentValue.set(newValue):currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3?currentValue.copy(newValue):this[key]=newValue}}toJSON(meta){let isRootObject=meta===void 0||typeof meta=="string";isRootObject&&(meta={textures:{},images:{}});let data={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};data.uuid=this.uuid,data.type=this.type,this.name!==""&&(data.name=this.name),this.color&&this.color.isColor&&(data.color=this.color.getHex()),this.roughness!==void 0&&(data.roughness=this.roughness),this.metalness!==void 0&&(data.metalness=this.metalness),this.sheen!==void 0&&(data.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(data.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(data.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(data.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(data.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(data.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(data.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(data.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(data.shininess=this.shininess),this.clearcoat!==void 0&&(data.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(data.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid,data.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(data.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(data.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(data.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(data.iridescenceMap=this.iridescenceMap.toJSON(meta).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(data.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(meta).uuid),this.map&&this.map.isTexture&&(data.map=this.map.toJSON(meta).uuid),this.matcap&&this.matcap.isTexture&&(data.matcap=this.matcap.toJSON(meta).uuid),this.alphaMap&&this.alphaMap.isTexture&&(data.alphaMap=this.alphaMap.toJSON(meta).uuid),this.lightMap&&this.lightMap.isTexture&&(data.lightMap=this.lightMap.toJSON(meta).uuid,data.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(data.aoMap=this.aoMap.toJSON(meta).uuid,data.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(data.bumpMap=this.bumpMap.toJSON(meta).uuid,data.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(data.normalMap=this.normalMap.toJSON(meta).uuid,data.normalMapType=this.normalMapType,data.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(data.displacementMap=this.displacementMap.toJSON(meta).uuid,data.displacementScale=this.displacementScale,data.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(data.roughnessMap=this.roughnessMap.toJSON(meta).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(data.metalnessMap=this.metalnessMap.toJSON(meta).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(data.emissiveMap=this.emissiveMap.toJSON(meta).uuid),this.specularMap&&this.specularMap.isTexture&&(data.specularMap=this.specularMap.toJSON(meta).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(data.specularColorMap=this.specularColorMap.toJSON(meta).uuid),this.envMap&&this.envMap.isTexture&&(data.envMap=this.envMap.toJSON(meta).uuid,this.combine!==void 0&&(data.combine=this.combine)),this.envMapIntensity!==void 0&&(data.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(data.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(data.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(data.gradientMap=this.gradientMap.toJSON(meta).uuid),this.transmission!==void 0&&(data.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(data.transmissionMap=this.transmissionMap.toJSON(meta).uuid),this.thickness!==void 0&&(data.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(data.thicknessMap=this.thicknessMap.toJSON(meta).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(data.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(data.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(data.size=this.size),this.shadowSide!==null&&(data.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(data.sizeAttenuation=this.sizeAttenuation),this.blending!==NormalBlending&&(data.blending=this.blending),this.side!==FrontSide&&(data.side=this.side),this.vertexColors&&(data.vertexColors=!0),this.opacity<1&&(data.opacity=this.opacity),this.transparent===!0&&(data.transparent=this.transparent),data.depthFunc=this.depthFunc,data.depthTest=this.depthTest,data.depthWrite=this.depthWrite,data.colorWrite=this.colorWrite,data.stencilWrite=this.stencilWrite,data.stencilWriteMask=this.stencilWriteMask,data.stencilFunc=this.stencilFunc,data.stencilRef=this.stencilRef,data.stencilFuncMask=this.stencilFuncMask,data.stencilFail=this.stencilFail,data.stencilZFail=this.stencilZFail,data.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(data.rotation=this.rotation),this.polygonOffset===!0&&(data.polygonOffset=!0),this.polygonOffsetFactor!==0&&(data.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(data.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(data.linewidth=this.linewidth),this.dashSize!==void 0&&(data.dashSize=this.dashSize),this.gapSize!==void 0&&(data.gapSize=this.gapSize),this.scale!==void 0&&(data.scale=this.scale),this.dithering===!0&&(data.dithering=!0),this.alphaTest>0&&(data.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(data.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(data.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(data.wireframe=this.wireframe),this.wireframeLinewidth>1&&(data.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(data.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(data.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(data.flatShading=this.flatShading),this.visible===!1&&(data.visible=!1),this.toneMapped===!1&&(data.toneMapped=!1),this.fog===!1&&(data.fog=!1),JSON.stringify(this.userData)!=="{}"&&(data.userData=this.userData);function extractFromCache(cache){let values=[];for(let key in cache){let data2=cache[key];delete data2.metadata,values.push(data2)}return values}if(isRootObject){let textures=extractFromCache(meta.textures),images=extractFromCache(meta.images);textures.length>0&&(data.textures=textures),images.length>0&&(data.images=images)}return data}clone(){return new this.constructor().copy(this)}copy(source){this.name=source.name,this.blending=source.blending,this.side=source.side,this.vertexColors=source.vertexColors,this.opacity=source.opacity,this.transparent=source.transparent,this.blendSrc=source.blendSrc,this.blendDst=source.blendDst,this.blendEquation=source.blendEquation,this.blendSrcAlpha=source.blendSrcAlpha,this.blendDstAlpha=source.blendDstAlpha,this.blendEquationAlpha=source.blendEquationAlpha,this.depthFunc=source.depthFunc,this.depthTest=source.depthTest,this.depthWrite=source.depthWrite,this.stencilWriteMask=source.stencilWriteMask,this.stencilFunc=source.stencilFunc,this.stencilRef=source.stencilRef,this.stencilFuncMask=source.stencilFuncMask,this.stencilFail=source.stencilFail,this.stencilZFail=source.stencilZFail,this.stencilZPass=source.stencilZPass,this.stencilWrite=source.stencilWrite;let srcPlanes=source.clippingPlanes,dstPlanes=null;if(srcPlanes!==null){let n=srcPlanes.length;dstPlanes=new Array(n);for(let i=0;i!==n;++i)dstPlanes[i]=srcPlanes[i].clone()}return this.clippingPlanes=dstPlanes,this.clipIntersection=source.clipIntersection,this.clipShadows=source.clipShadows,this.shadowSide=source.shadowSide,this.colorWrite=source.colorWrite,this.precision=source.precision,this.polygonOffset=source.polygonOffset,this.polygonOffsetFactor=source.polygonOffsetFactor,this.polygonOffsetUnits=source.polygonOffsetUnits,this.dithering=source.dithering,this.alphaTest=source.alphaTest,this.alphaToCoverage=source.alphaToCoverage,this.premultipliedAlpha=source.premultipliedAlpha,this.visible=source.visible,this.toneMapped=source.toneMapped,this.userData=JSON.parse(JSON.stringify(source.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(value){value===!0&&this.version++}},MeshBasicMaterial=class extends Material{constructor(parameters){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}},_vector$9=new Vector3,_vector2$1=new Vector2,BufferAttribute=class{constructor(array,itemSize,normalized){if(Array.isArray(array))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=array,this.itemSize=itemSize,this.count=array!==void 0?array.length/itemSize:0,this.normalized=normalized===!0,this.usage=StaticDrawUsage,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(value){value===!0&&this.version++}setUsage(value){return this.usage=value,this}copy(source){return this.name=source.name,this.array=new source.array.constructor(source.array),this.itemSize=source.itemSize,this.count=source.count,this.normalized=source.normalized,this.usage=source.usage,this}copyAt(index1,attribute,index2){index1*=this.itemSize,index2*=attribute.itemSize;for(let i=0,l=this.itemSize;i<l;i++)this.array[index1+i]=attribute.array[index2+i];return this}copyArray(array){return this.array.set(array),this}applyMatrix3(m){if(this.itemSize===2)for(let i=0,l=this.count;i<l;i++)_vector2$1.fromBufferAttribute(this,i),_vector2$1.applyMatrix3(m),this.setXY(i,_vector2$1.x,_vector2$1.y);else if(this.itemSize===3)for(let i=0,l=this.count;i<l;i++)_vector$9.fromBufferAttribute(this,i),_vector$9.applyMatrix3(m),this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);return this}applyMatrix4(m){for(let i=0,l=this.count;i<l;i++)_vector$9.fromBufferAttribute(this,i),_vector$9.applyMatrix4(m),this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);return this}applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++)_vector$9.fromBufferAttribute(this,i),_vector$9.applyNormalMatrix(m),this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);return this}transformDirection(m){for(let i=0,l=this.count;i<l;i++)_vector$9.fromBufferAttribute(this,i),_vector$9.transformDirection(m),this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);return this}set(value,offset=0){return this.array.set(value,offset),this}getX(index){let x=this.array[index*this.itemSize];return this.normalized&&(x=denormalize(x,this.array)),x}setX(index,x){return this.normalized&&(x=normalize(x,this.array)),this.array[index*this.itemSize]=x,this}getY(index){let y=this.array[index*this.itemSize+1];return this.normalized&&(y=denormalize(y,this.array)),y}setY(index,y){return this.normalized&&(y=normalize(y,this.array)),this.array[index*this.itemSize+1]=y,this}getZ(index){let z=this.array[index*this.itemSize+2];return this.normalized&&(z=denormalize(z,this.array)),z}setZ(index,z){return this.normalized&&(z=normalize(z,this.array)),this.array[index*this.itemSize+2]=z,this}getW(index){let w=this.array[index*this.itemSize+3];return this.normalized&&(w=denormalize(w,this.array)),w}setW(index,w){return this.normalized&&(w=normalize(w,this.array)),this.array[index*this.itemSize+3]=w,this}setXY(index,x,y){return index*=this.itemSize,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array)),this.array[index+0]=x,this.array[index+1]=y,this}setXYZ(index,x,y,z){return index*=this.itemSize,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array),z=normalize(z,this.array)),this.array[index+0]=x,this.array[index+1]=y,this.array[index+2]=z,this}setXYZW(index,x,y,z,w){return index*=this.itemSize,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array),z=normalize(z,this.array),w=normalize(w,this.array)),this.array[index+0]=x,this.array[index+1]=y,this.array[index+2]=z,this.array[index+3]=w,this}onUpload(callback){return this.onUploadCallback=callback,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){let data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(data.name=this.name),this.usage!==StaticDrawUsage&&(data.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(data.updateRange=this.updateRange),data}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}},Int8BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int8Array(array),itemSize,normalized)}},Uint8BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint8Array(array),itemSize,normalized)}},Uint8ClampedBufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint8ClampedArray(array),itemSize,normalized)}},Int16BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int16Array(array),itemSize,normalized)}},Uint16BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized)}},Int32BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Int32Array(array),itemSize,normalized)}},Uint32BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint32Array(array),itemSize,normalized)}},Float16BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized),this.isFloat16BufferAttribute=!0}},Float32BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Float32Array(array),itemSize,normalized)}},Float64BufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized){super(new Float64Array(array),itemSize,normalized)}},_id$1=0,_m1=new Matrix4,_obj=new Object3D,_offset=new Vector3,_box$1=new Box3,_boxMorphTargets=new Box3,_vector$8=new Vector3,BufferGeometry=class extends EventDispatcher{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:_id$1++}),this.uuid=generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(index){return Array.isArray(index)?this.index=new(arrayNeedsUint32(index)?Uint32BufferAttribute:Uint16BufferAttribute)(index,1):this.index=index,this}getAttribute(name){return this.attributes[name]}setAttribute(name,attribute){return this.attributes[name]=attribute,this}deleteAttribute(name){return delete this.attributes[name],this}hasAttribute(name){return this.attributes[name]!==void 0}addGroup(start,count,materialIndex=0){this.groups.push({start,count,materialIndex})}clearGroups(){this.groups=[]}setDrawRange(start,count){this.drawRange.start=start,this.drawRange.count=count}applyMatrix4(matrix){let position=this.attributes.position;position!==void 0&&(position.applyMatrix4(matrix),position.needsUpdate=!0);let normal=this.attributes.normal;if(normal!==void 0){let normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix),normal.needsUpdate=!0}let tangent=this.attributes.tangent;return tangent!==void 0&&(tangent.transformDirection(matrix),tangent.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(q){return _m1.makeRotationFromQuaternion(q),this.applyMatrix4(_m1),this}rotateX(angle2){return _m1.makeRotationX(angle2),this.applyMatrix4(_m1),this}rotateY(angle2){return _m1.makeRotationY(angle2),this.applyMatrix4(_m1),this}rotateZ(angle2){return _m1.makeRotationZ(angle2),this.applyMatrix4(_m1),this}translate(x,y,z){return _m1.makeTranslation(x,y,z),this.applyMatrix4(_m1),this}scale(x,y,z){return _m1.makeScale(x,y,z),this.applyMatrix4(_m1),this}lookAt(vector){return _obj.lookAt(vector),_obj.updateMatrix(),this.applyMatrix4(_obj.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(_offset).negate(),this.translate(_offset.x,_offset.y,_offset.z),this}setFromPoints(points){let position=[];for(let i=0,l=points.length;i<l;i++){let point2=points[i];position.push(point2.x,point2.y,point2.z||0)}return this.setAttribute("position",new Float32BufferAttribute(position,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Box3);let position=this.attributes.position,morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new Vector3(-1/0,-1/0,-1/0),new Vector3(1/0,1/0,1/0));return}if(position!==void 0){if(this.boundingBox.setFromBufferAttribute(position),morphAttributesPosition)for(let i=0,il=morphAttributesPosition.length;i<il;i++){let morphAttribute=morphAttributesPosition[i];_box$1.setFromBufferAttribute(morphAttribute),this.morphTargetsRelative?(_vector$8.addVectors(this.boundingBox.min,_box$1.min),this.boundingBox.expandByPoint(_vector$8),_vector$8.addVectors(this.boundingBox.max,_box$1.max),this.boundingBox.expandByPoint(_vector$8)):(this.boundingBox.expandByPoint(_box$1.min),this.boundingBox.expandByPoint(_box$1.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Sphere);let position=this.attributes.position,morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new Vector3,1/0);return}if(position){let center=this.boundingSphere.center;if(_box$1.setFromBufferAttribute(position),morphAttributesPosition)for(let i=0,il=morphAttributesPosition.length;i<il;i++){let morphAttribute=morphAttributesPosition[i];_boxMorphTargets.setFromBufferAttribute(morphAttribute),this.morphTargetsRelative?(_vector$8.addVectors(_box$1.min,_boxMorphTargets.min),_box$1.expandByPoint(_vector$8),_vector$8.addVectors(_box$1.max,_boxMorphTargets.max),_box$1.expandByPoint(_vector$8)):(_box$1.expandByPoint(_boxMorphTargets.min),_box$1.expandByPoint(_boxMorphTargets.max))}_box$1.getCenter(center);let maxRadiusSq=0;for(let i=0,il=position.count;i<il;i++)_vector$8.fromBufferAttribute(position,i),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));if(morphAttributesPosition)for(let i=0,il=morphAttributesPosition.length;i<il;i++){let morphAttribute=morphAttributesPosition[i],morphTargetsRelative=this.morphTargetsRelative;for(let j=0,jl=morphAttribute.count;j<jl;j++)_vector$8.fromBufferAttribute(morphAttribute,j),morphTargetsRelative&&(_offset.fromBufferAttribute(position,j),_vector$8.add(_offset)),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8))}this.boundingSphere.radius=Math.sqrt(maxRadiusSq),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){let index=this.index,attributes=this.attributes;if(index===null||attributes.position===void 0||attributes.normal===void 0||attributes.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}let indices=index.array,positions=attributes.position.array,normals=attributes.normal.array,uvs=attributes.uv.array,nVertices=positions.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new BufferAttribute(new Float32Array(4*nVertices),4));let tangents=this.getAttribute("tangent").array,tan1=[],tan2=[];for(let i=0;i<nVertices;i++)tan1[i]=new Vector3,tan2[i]=new Vector3;let vA=new Vector3,vB=new Vector3,vC=new Vector3,uvA=new Vector2,uvB=new Vector2,uvC=new Vector2,sdir=new Vector3,tdir=new Vector3;function handleTriangle(a,b,c){vA.fromArray(positions,a*3),vB.fromArray(positions,b*3),vC.fromArray(positions,c*3),uvA.fromArray(uvs,a*2),uvB.fromArray(uvs,b*2),uvC.fromArray(uvs,c*2),vB.sub(vA),vC.sub(vA),uvB.sub(uvA),uvC.sub(uvA);let r=1/(uvB.x*uvC.y-uvC.x*uvB.y);!isFinite(r)||(sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC,-uvB.y).multiplyScalar(r),tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB,-uvC.x).multiplyScalar(r),tan1[a].add(sdir),tan1[b].add(sdir),tan1[c].add(sdir),tan2[a].add(tdir),tan2[b].add(tdir),tan2[c].add(tdir))}let groups=this.groups;groups.length===0&&(groups=[{start:0,count:indices.length}]);for(let i=0,il=groups.length;i<il;++i){let group=groups[i],start=group.start,count=group.count;for(let j=start,jl=start+count;j<jl;j+=3)handleTriangle(indices[j+0],indices[j+1],indices[j+2])}let tmp2=new Vector3,tmp22=new Vector3,n=new Vector3,n2=new Vector3;function handleVertex(v){n.fromArray(normals,v*3),n2.copy(n);let t=tan1[v];tmp2.copy(t),tmp2.sub(n.multiplyScalar(n.dot(t))).normalize(),tmp22.crossVectors(n2,t);let w=tmp22.dot(tan2[v])<0?-1:1;tangents[v*4]=tmp2.x,tangents[v*4+1]=tmp2.y,tangents[v*4+2]=tmp2.z,tangents[v*4+3]=w}for(let i=0,il=groups.length;i<il;++i){let group=groups[i],start=group.start,count=group.count;for(let j=start,jl=start+count;j<jl;j+=3)handleVertex(indices[j+0]),handleVertex(indices[j+1]),handleVertex(indices[j+2])}}computeVertexNormals(){let index=this.index,positionAttribute=this.getAttribute("position");if(positionAttribute!==void 0){let normalAttribute=this.getAttribute("normal");if(normalAttribute===void 0)normalAttribute=new BufferAttribute(new Float32Array(positionAttribute.count*3),3),this.setAttribute("normal",normalAttribute);else for(let i=0,il=normalAttribute.count;i<il;i++)normalAttribute.setXYZ(i,0,0,0);let pA=new Vector3,pB=new Vector3,pC=new Vector3,nA=new Vector3,nB=new Vector3,nC=new Vector3,cb=new Vector3,ab=new Vector3;if(index)for(let i=0,il=index.count;i<il;i+=3){let vA=index.getX(i+0),vB=index.getX(i+1),vC=index.getX(i+2);pA.fromBufferAttribute(positionAttribute,vA),pB.fromBufferAttribute(positionAttribute,vB),pC.fromBufferAttribute(positionAttribute,vC),cb.subVectors(pC,pB),ab.subVectors(pA,pB),cb.cross(ab),nA.fromBufferAttribute(normalAttribute,vA),nB.fromBufferAttribute(normalAttribute,vB),nC.fromBufferAttribute(normalAttribute,vC),nA.add(cb),nB.add(cb),nC.add(cb),normalAttribute.setXYZ(vA,nA.x,nA.y,nA.z),normalAttribute.setXYZ(vB,nB.x,nB.y,nB.z),normalAttribute.setXYZ(vC,nC.x,nC.y,nC.z)}else for(let i=0,il=positionAttribute.count;i<il;i+=3)pA.fromBufferAttribute(positionAttribute,i+0),pB.fromBufferAttribute(positionAttribute,i+1),pC.fromBufferAttribute(positionAttribute,i+2),cb.subVectors(pC,pB),ab.subVectors(pA,pB),cb.cross(ab),normalAttribute.setXYZ(i+0,cb.x,cb.y,cb.z),normalAttribute.setXYZ(i+1,cb.x,cb.y,cb.z),normalAttribute.setXYZ(i+2,cb.x,cb.y,cb.z);this.normalizeNormals(),normalAttribute.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){let normals=this.attributes.normal;for(let i=0,il=normals.count;i<il;i++)_vector$8.fromBufferAttribute(normals,i),_vector$8.normalize(),normals.setXYZ(i,_vector$8.x,_vector$8.y,_vector$8.z)}toNonIndexed(){function convertBufferAttribute(attribute,indices2){let array=attribute.array,itemSize=attribute.itemSize,normalized=attribute.normalized,array2=new array.constructor(indices2.length*itemSize),index=0,index2=0;for(let i=0,l=indices2.length;i<l;i++){attribute.isInterleavedBufferAttribute?index=indices2[i]*attribute.data.stride+attribute.offset:index=indices2[i]*itemSize;for(let j=0;j<itemSize;j++)array2[index2++]=array[index++]}return new BufferAttribute(array2,itemSize,normalized)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;let geometry2=new BufferGeometry,indices=this.index.array,attributes=this.attributes;for(let name in attributes){let attribute=attributes[name],newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute)}let morphAttributes=this.morphAttributes;for(let name in morphAttributes){let morphArray=[],morphAttribute=morphAttributes[name];for(let i=0,il=morphAttribute.length;i<il;i++){let attribute=morphAttribute[i],newAttribute=convertBufferAttribute(attribute,indices);morphArray.push(newAttribute)}geometry2.morphAttributes[name]=morphArray}geometry2.morphTargetsRelative=this.morphTargetsRelative;let groups=this.groups;for(let i=0,l=groups.length;i<l;i++){let group=groups[i];geometry2.addGroup(group.start,group.count,group.materialIndex)}return geometry2}toJSON(){let data={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,this.name!==""&&(data.name=this.name),Object.keys(this.userData).length>0&&(data.userData=this.userData),this.parameters!==void 0){let parameters=this.parameters;for(let key in parameters)parameters[key]!==void 0&&(data[key]=parameters[key]);return data}data.data={attributes:{}};let index=this.index;index!==null&&(data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)});let attributes=this.attributes;for(let key in attributes){let attribute=attributes[key];data.data.attributes[key]=attribute.toJSON(data.data)}let morphAttributes={},hasMorphAttributes=!1;for(let key in this.morphAttributes){let attributeArray=this.morphAttributes[key],array=[];for(let i=0,il=attributeArray.length;i<il;i++){let attribute=attributeArray[i];array.push(attribute.toJSON(data.data))}array.length>0&&(morphAttributes[key]=array,hasMorphAttributes=!0)}hasMorphAttributes&&(data.data.morphAttributes=morphAttributes,data.data.morphTargetsRelative=this.morphTargetsRelative);let groups=this.groups;groups.length>0&&(data.data.groups=JSON.parse(JSON.stringify(groups)));let boundingSphere=this.boundingSphere;return boundingSphere!==null&&(data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius}),data}clone(){return new this.constructor().copy(this)}copy(source){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;let data={};this.name=source.name;let index=source.index;index!==null&&this.setIndex(index.clone(data));let attributes=source.attributes;for(let name in attributes){let attribute=attributes[name];this.setAttribute(name,attribute.clone(data))}let morphAttributes=source.morphAttributes;for(let name in morphAttributes){let array=[],morphAttribute=morphAttributes[name];for(let i=0,l=morphAttribute.length;i<l;i++)array.push(morphAttribute[i].clone(data));this.morphAttributes[name]=array}this.morphTargetsRelative=source.morphTargetsRelative;let groups=source.groups;for(let i=0,l=groups.length;i<l;i++){let group=groups[i];this.addGroup(group.start,group.count,group.materialIndex)}let boundingBox=source.boundingBox;boundingBox!==null&&(this.boundingBox=boundingBox.clone());let boundingSphere=source.boundingSphere;return boundingSphere!==null&&(this.boundingSphere=boundingSphere.clone()),this.drawRange.start=source.drawRange.start,this.drawRange.count=source.drawRange.count,this.userData=source.userData,source.parameters!==void 0&&(this.parameters=Object.assign({},source.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}},_inverseMatrix$2=new Matrix4,_ray$2=new Ray,_sphere$3=new Sphere,_vA$1=new Vector3,_vB$1=new Vector3,_vC$1=new Vector3,_tempA=new Vector3,_tempB=new Vector3,_tempC=new Vector3,_morphA=new Vector3,_morphB=new Vector3,_morphC=new Vector3,_uvA$1=new Vector2,_uvB$1=new Vector2,_uvC$1=new Vector2,_intersectionPoint=new Vector3,_intersectionPointWorld=new Vector3,Mesh=class extends Object3D{constructor(geometry=new BufferGeometry,material=new MeshBasicMaterial){super(),this.isMesh=!0,this.type="Mesh",this.geometry=geometry,this.material=material,this.updateMorphTargets()}copy(source,recursive){return super.copy(source,recursive),source.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=source.morphTargetInfluences.slice()),source.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary)),this.material=source.material,this.geometry=source.geometry,this}updateMorphTargets(){let morphAttributes=this.geometry.morphAttributes,keys=Object.keys(morphAttributes);if(keys.length>0){let morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){let name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0),this.morphTargetDictionary[name]=m}}}}raycast(raycaster,intersects2){let geometry=this.geometry,material=this.material,matrixWorld=this.matrixWorld;if(material===void 0||(geometry.boundingSphere===null&&geometry.computeBoundingSphere(),_sphere$3.copy(geometry.boundingSphere),_sphere$3.applyMatrix4(matrixWorld),raycaster.ray.intersectsSphere(_sphere$3)===!1)||(_inverseMatrix$2.copy(matrixWorld).invert(),_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2),geometry.boundingBox!==null&&_ray$2.intersectsBox(geometry.boundingBox)===!1))return;let intersection,index=geometry.index,position=geometry.attributes.position,morphPosition=geometry.morphAttributes.position,morphTargetsRelative=geometry.morphTargetsRelative,uv=geometry.attributes.uv,uv2=geometry.attributes.uv2,groups=geometry.groups,drawRange=geometry.drawRange;if(index!==null)if(Array.isArray(material))for(let i=0,il=groups.length;i<il;i++){let group=groups[i],groupMaterial=material[group.materialIndex],start=Math.max(group.start,drawRange.start),end=Math.min(index.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){let a=index.getX(j),b=index.getX(j+1),c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c),intersection&&(intersection.faceIndex=Math.floor(j/3),intersection.face.materialIndex=group.materialIndex,intersects2.push(intersection))}}else{let start=Math.max(0,drawRange.start),end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){let a=index.getX(i),b=index.getX(i+1),c=index.getX(i+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c),intersection&&(intersection.faceIndex=Math.floor(i/3),intersects2.push(intersection))}}else if(position!==void 0)if(Array.isArray(material))for(let i=0,il=groups.length;i<il;i++){let group=groups[i],groupMaterial=material[group.materialIndex],start=Math.max(group.start,drawRange.start),end=Math.min(position.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){let a=j,b=j+1,c=j+2;intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c),intersection&&(intersection.faceIndex=Math.floor(j/3),intersection.face.materialIndex=group.materialIndex,intersects2.push(intersection))}}else{let start=Math.max(0,drawRange.start),end=Math.min(position.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){let a=i,b=i+1,c=i+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c),intersection&&(intersection.faceIndex=Math.floor(i/3),intersects2.push(intersection))}}}};function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point2){let intersect;if(material.side===BackSide?intersect=ray.intersectTriangle(pC,pB,pA,!0,point2):intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point2),intersect===null)return null;_intersectionPointWorld.copy(point2),_intersectionPointWorld.applyMatrix4(object.matrixWorld);let distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);return distance<raycaster.near||distance>raycaster.far?null:{distance,point:_intersectionPointWorld.clone(),object}}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c){_vA$1.fromBufferAttribute(position,a),_vB$1.fromBufferAttribute(position,b),_vC$1.fromBufferAttribute(position,c);let morphInfluences=object.morphTargetInfluences;if(morphPosition&&morphInfluences){_morphA.set(0,0,0),_morphB.set(0,0,0),_morphC.set(0,0,0);for(let i=0,il=morphPosition.length;i<il;i++){let influence=morphInfluences[i],morphAttribute=morphPosition[i];influence!==0&&(_tempA.fromBufferAttribute(morphAttribute,a),_tempB.fromBufferAttribute(morphAttribute,b),_tempC.fromBufferAttribute(morphAttribute,c),morphTargetsRelative?(_morphA.addScaledVector(_tempA,influence),_morphB.addScaledVector(_tempB,influence),_morphC.addScaledVector(_tempC,influence)):(_morphA.addScaledVector(_tempA.sub(_vA$1),influence),_morphB.addScaledVector(_tempB.sub(_vB$1),influence),_morphC.addScaledVector(_tempC.sub(_vC$1),influence)))}_vA$1.add(_morphA),_vB$1.add(_morphB),_vC$1.add(_morphC)}object.isSkinnedMesh&&(object.boneTransform(a,_vA$1),object.boneTransform(b,_vB$1),object.boneTransform(c,_vC$1));let intersection=checkIntersection(object,material,raycaster,ray,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(intersection){uv&&(_uvA$1.fromBufferAttribute(uv,a),_uvB$1.fromBufferAttribute(uv,b),_uvC$1.fromBufferAttribute(uv,c),intersection.uv=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2)),uv2&&(_uvA$1.fromBufferAttribute(uv2,a),_uvB$1.fromBufferAttribute(uv2,b),_uvC$1.fromBufferAttribute(uv2,c),intersection.uv2=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2));let face={a,b,c,normal:new Vector3,materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,face.normal),intersection.face=face}return intersection}var BoxGeometry=class extends BufferGeometry{constructor(width=1,height=1,depth=1,widthSegments=1,heightSegments=1,depthSegments=1){super(),this.type="BoxGeometry",this.parameters={width,height,depth,widthSegments,heightSegments,depthSegments};let scope=this;widthSegments=Math.floor(widthSegments),heightSegments=Math.floor(heightSegments),depthSegments=Math.floor(depthSegments);let indices=[],vertices=[],normals=[],uvs=[],numberOfVertices=0,groupStart=0;buildPlane("z","y","x",-1,-1,depth,height,width,depthSegments,heightSegments,0),buildPlane("z","y","x",1,-1,depth,height,-width,depthSegments,heightSegments,1),buildPlane("x","z","y",1,1,width,depth,height,widthSegments,depthSegments,2),buildPlane("x","z","y",1,-1,width,depth,-height,widthSegments,depthSegments,3),buildPlane("x","y","z",1,-1,width,height,depth,widthSegments,heightSegments,4),buildPlane("x","y","z",-1,-1,width,height,-depth,widthSegments,heightSegments,5),this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width2,height2,depth2,gridX,gridY,materialIndex){let segmentWidth=width2/gridX,segmentHeight=height2/gridY,widthHalf=width2/2,heightHalf=height2/2,depthHalf=depth2/2,gridX1=gridX+1,gridY1=gridY+1,vertexCounter=0,groupCount=0,vector=new Vector3;for(let iy=0;iy<gridY1;iy++){let y=iy*segmentHeight-heightHalf;for(let ix=0;ix<gridX1;ix++){let x=ix*segmentWidth-widthHalf;vector[u]=x*udir,vector[v]=y*vdir,vector[w]=depthHalf,vertices.push(vector.x,vector.y,vector.z),vector[u]=0,vector[v]=0,vector[w]=depth2>0?1:-1,normals.push(vector.x,vector.y,vector.z),uvs.push(ix/gridX),uvs.push(1-iy/gridY),vertexCounter+=1}}for(let iy=0;iy<gridY;iy++)for(let ix=0;ix<gridX;ix++){let a=numberOfVertices+ix+gridX1*iy,b=numberOfVertices+ix+gridX1*(iy+1),c=numberOfVertices+(ix+1)+gridX1*(iy+1),d=numberOfVertices+(ix+1)+gridX1*iy;indices.push(a,b,d),indices.push(b,c,d),groupCount+=6}scope.addGroup(groupStart,groupCount,materialIndex),groupStart+=groupCount,numberOfVertices+=vertexCounter}}static fromJSON(data){return new BoxGeometry(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)}};function cloneUniforms(src){let dst={};for(let u in src){dst[u]={};for(let p in src[u]){let property=src[u][p];property&&(property.isColor||property.isMatrix3||property.isMatrix4||property.isVector2||property.isVector3||property.isVector4||property.isTexture||property.isQuaternion)?dst[u][p]=property.clone():Array.isArray(property)?dst[u][p]=property.slice():dst[u][p]=property}}return dst}function mergeUniforms(uniforms){let merged={};for(let u=0;u<uniforms.length;u++){let tmp2=cloneUniforms(uniforms[u]);for(let p in tmp2)merged[p]=tmp2[p]}return merged}function cloneUniformsGroups(src){let dst=[];for(let u=0;u<src.length;u++)dst.push(src[u].clone());return dst}function getUnlitUniformColorSpace(renderer){return renderer.getRenderTarget()===null&&renderer.outputEncoding===sRGBEncoding?SRGBColorSpace:LinearSRGBColorSpace}var UniformsUtils={clone:cloneUniforms,merge:mergeUniforms},default_vertex=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,default_fragment=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`,ShaderMaterial=class extends Material{constructor(parameters){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=default_vertex,this.fragmentShader=default_fragment,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,parameters!==void 0&&this.setValues(parameters)}copy(source){return super.copy(source),this.fragmentShader=source.fragmentShader,this.vertexShader=source.vertexShader,this.uniforms=cloneUniforms(source.uniforms),this.uniformsGroups=cloneUniformsGroups(source.uniformsGroups),this.defines=Object.assign({},source.defines),this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.fog=source.fog,this.lights=source.lights,this.clipping=source.clipping,this.extensions=Object.assign({},source.extensions),this.glslVersion=source.glslVersion,this}toJSON(meta){let data=super.toJSON(meta);data.glslVersion=this.glslVersion,data.uniforms={};for(let name in this.uniforms){let value=this.uniforms[name].value;value&&value.isTexture?data.uniforms[name]={type:"t",value:value.toJSON(meta).uuid}:value&&value.isColor?data.uniforms[name]={type:"c",value:value.getHex()}:value&&value.isVector2?data.uniforms[name]={type:"v2",value:value.toArray()}:value&&value.isVector3?data.uniforms[name]={type:"v3",value:value.toArray()}:value&&value.isVector4?data.uniforms[name]={type:"v4",value:value.toArray()}:value&&value.isMatrix3?data.uniforms[name]={type:"m3",value:value.toArray()}:value&&value.isMatrix4?data.uniforms[name]={type:"m4",value:value.toArray()}:data.uniforms[name]={value}}Object.keys(this.defines).length>0&&(data.defines=this.defines),data.vertexShader=this.vertexShader,data.fragmentShader=this.fragmentShader;let extensions={};for(let key in this.extensions)this.extensions[key]===!0&&(extensions[key]=!0);return Object.keys(extensions).length>0&&(data.extensions=extensions),data}},Camera=class extends Object3D{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Matrix4,this.projectionMatrix=new Matrix4,this.projectionMatrixInverse=new Matrix4}copy(source,recursive){return super.copy(source,recursive),this.matrixWorldInverse.copy(source.matrixWorldInverse),this.projectionMatrix.copy(source.projectionMatrix),this.projectionMatrixInverse.copy(source.projectionMatrixInverse),this}getWorldDirection(target){this.updateWorldMatrix(!0,!1);let e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(force){super.updateMatrixWorld(force),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(updateParents,updateChildren){super.updateWorldMatrix(updateParents,updateChildren),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}},PerspectiveCamera=class extends Camera{constructor(fov2=50,aspect2=1,near=.1,far=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=fov2,this.zoom=1,this.near=near,this.far=far,this.focus=10,this.aspect=aspect2,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(source,recursive){return super.copy(source,recursive),this.fov=source.fov,this.zoom=source.zoom,this.near=source.near,this.far=source.far,this.focus=source.focus,this.aspect=source.aspect,this.view=source.view===null?null:Object.assign({},source.view),this.filmGauge=source.filmGauge,this.filmOffset=source.filmOffset,this}setFocalLength(focalLength){let vExtentSlope=.5*this.getFilmHeight()/focalLength;this.fov=RAD2DEG*2*Math.atan(vExtentSlope),this.updateProjectionMatrix()}getFocalLength(){let vExtentSlope=Math.tan(DEG2RAD*.5*this.fov);return .5*this.getFilmHeight()/vExtentSlope}getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=fullWidth,this.view.fullHeight=fullHeight,this.view.offsetX=x,this.view.offsetY=y,this.view.width=width,this.view.height=height,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let near=this.near,top=near*Math.tan(DEG2RAD*.5*this.fov)/this.zoom,height=2*top,width=this.aspect*height,left=-.5*width,view=this.view;if(this.view!==null&&this.view.enabled){let fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth,top-=view.offsetY*height/fullHeight,width*=view.width/fullWidth,height*=view.height/fullHeight}let skew=this.filmOffset;skew!==0&&(left+=near*skew/this.getFilmWidth()),this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){let data=super.toJSON(meta);return data.object.fov=this.fov,data.object.zoom=this.zoom,data.object.near=this.near,data.object.far=this.far,data.object.focus=this.focus,data.object.aspect=this.aspect,this.view!==null&&(data.object.view=Object.assign({},this.view)),data.object.filmGauge=this.filmGauge,data.object.filmOffset=this.filmOffset,data}},fov=-90,aspect=1,CubeCamera=class extends Object3D{constructor(near,far,renderTarget){super(),this.type="CubeCamera",this.renderTarget=renderTarget;let cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.layers=this.layers,cameraPX.up.set(0,1,0),cameraPX.lookAt(1,0,0),this.add(cameraPX);let cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.layers=this.layers,cameraNX.up.set(0,1,0),cameraNX.lookAt(-1,0,0),this.add(cameraNX);let cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.layers=this.layers,cameraPY.up.set(0,0,-1),cameraPY.lookAt(0,1,0),this.add(cameraPY);let cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.layers=this.layers,cameraNY.up.set(0,0,1),cameraNY.lookAt(0,-1,0),this.add(cameraNY);let cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.layers=this.layers,cameraPZ.up.set(0,1,0),cameraPZ.lookAt(0,0,1),this.add(cameraPZ);let cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.layers=this.layers,cameraNZ.up.set(0,1,0),cameraNZ.lookAt(0,0,-1),this.add(cameraNZ)}update(renderer,scene){this.parent===null&&this.updateMatrixWorld();let renderTarget=this.renderTarget,[cameraPX,cameraNX,cameraPY,cameraNY,cameraPZ,cameraNZ]=this.children,currentRenderTarget=renderer.getRenderTarget(),currentToneMapping=renderer.toneMapping,currentXrEnabled=renderer.xr.enabled;renderer.toneMapping=NoToneMapping,renderer.xr.enabled=!1;let generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=!1,renderer.setRenderTarget(renderTarget,0),renderer.render(scene,cameraPX),renderer.setRenderTarget(renderTarget,1),renderer.render(scene,cameraNX),renderer.setRenderTarget(renderTarget,2),renderer.render(scene,cameraPY),renderer.setRenderTarget(renderTarget,3),renderer.render(scene,cameraNY),renderer.setRenderTarget(renderTarget,4),renderer.render(scene,cameraPZ),renderTarget.texture.generateMipmaps=generateMipmaps,renderer.setRenderTarget(renderTarget,5),renderer.render(scene,cameraNZ),renderer.setRenderTarget(currentRenderTarget),renderer.toneMapping=currentToneMapping,renderer.xr.enabled=currentXrEnabled,renderTarget.texture.needsPMREMUpdate=!0}},CubeTexture=class extends Texture{constructor(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=images!==void 0?images:[],mapping=mapping!==void 0?mapping:CubeReflectionMapping,super(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(value){this.image=value}},WebGLCubeRenderTarget=class extends WebGLRenderTarget{constructor(size=1,options={}){super(size,size,options),this.isWebGLCubeRenderTarget=!0;let image={width:size,height:size,depth:1},images=[image,image,image,image,image,image];this.texture=new CubeTexture(images,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=options.generateMipmaps!==void 0?options.generateMipmaps:!1,this.texture.minFilter=options.minFilter!==void 0?options.minFilter:LinearFilter}fromEquirectangularTexture(renderer,texture){this.texture.type=texture.type,this.texture.encoding=texture.encoding,this.texture.generateMipmaps=texture.generateMipmaps,this.texture.minFilter=texture.minFilter,this.texture.magFilter=texture.magFilter;let shader={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},geometry=new BoxGeometry(5,5,5),material=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;let mesh=new Mesh(geometry,material),currentMinFilter=texture.minFilter;return texture.minFilter===LinearMipmapLinearFilter&&(texture.minFilter=LinearFilter),new CubeCamera(1,10,this).update(renderer,mesh),texture.minFilter=currentMinFilter,mesh.geometry.dispose(),mesh.material.dispose(),this}clear(renderer,color,depth,stencil){let currentRenderTarget=renderer.getRenderTarget();for(let i=0;i<6;i++)renderer.setRenderTarget(this,i),renderer.clear(color,depth,stencil);renderer.setRenderTarget(currentRenderTarget)}},_vector1=new Vector3,_vector2=new Vector3,_normalMatrix=new Matrix3,Plane=class{constructor(normal=new Vector3(1,0,0),constant=0){this.isPlane=!0,this.normal=normal,this.constant=constant}set(normal,constant){return this.normal.copy(normal),this.constant=constant,this}setComponents(x,y,z,w){return this.normal.set(x,y,z),this.constant=w,this}setFromNormalAndCoplanarPoint(normal,point2){return this.normal.copy(normal),this.constant=-point2.dot(this.normal),this}setFromCoplanarPoints(a,b,c){let normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(normal,a),this}copy(plane){return this.normal.copy(plane.normal),this.constant=plane.constant,this}normalize(){let inverseNormalLength=1/this.normal.length();return this.normal.multiplyScalar(inverseNormalLength),this.constant*=inverseNormalLength,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(point2){return this.normal.dot(point2)+this.constant}distanceToSphere(sphere2){return this.distanceToPoint(sphere2.center)-sphere2.radius}projectPoint(point2,target){return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point2)).add(point2)}intersectLine(line2,target){let direction=line2.delta(_vector1),denominator=this.normal.dot(direction);if(denominator===0)return this.distanceToPoint(line2.start)===0?target.copy(line2.start):null;let t=-(line2.start.dot(this.normal)+this.constant)/denominator;return t<0||t>1?null:target.copy(direction).multiplyScalar(t).add(line2.start)}intersectsLine(line2){let startSign=this.distanceToPoint(line2.start),endSign=this.distanceToPoint(line2.end);return startSign<0&&endSign>0||endSign<0&&startSign>0}intersectsBox(box2){return box2.intersectsPlane(this)}intersectsSphere(sphere2){return sphere2.intersectsPlane(this)}coplanarPoint(target){return target.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(matrix,optionalNormalMatrix){let normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix),referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix),normal=this.normal.applyMatrix3(normalMatrix).normalize();return this.constant=-referencePoint.dot(normal),this}translate(offset){return this.constant-=offset.dot(this.normal),this}equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant}clone(){return new this.constructor().copy(this)}},_sphere$2=new Sphere,_vector$7=new Vector3,Frustum=class{constructor(p0=new Plane,p1=new Plane,p2=new Plane,p3=new Plane,p4=new Plane,p5=new Plane){this.planes=[p0,p1,p2,p3,p4,p5]}set(p0,p1,p2,p3,p4,p5){let planes=this.planes;return planes[0].copy(p0),planes[1].copy(p1),planes[2].copy(p2),planes[3].copy(p3),planes[4].copy(p4),planes[5].copy(p5),this}copy(frustum){let planes=this.planes;for(let i=0;i<6;i++)planes[i].copy(frustum.planes[i]);return this}setFromProjectionMatrix(m){let planes=this.planes,me=m.elements,me0=me[0],me1=me[1],me2=me[2],me3=me[3],me4=me[4],me5=me[5],me6=me[6],me7=me[7],me8=me[8],me9=me[9],me10=me[10],me11=me[11],me12=me[12],me13=me[13],me14=me[14],me15=me[15];return planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize(),planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize(),planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize(),planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize(),planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize(),planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize(),this}intersectsObject(object){let geometry=object.geometry;return geometry.boundingSphere===null&&geometry.computeBoundingSphere(),_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld),this.intersectsSphere(_sphere$2)}intersectsSprite(sprite){return _sphere$2.center.set(0,0,0),_sphere$2.radius=.7071067811865476,_sphere$2.applyMatrix4(sprite.matrixWorld),this.intersectsSphere(_sphere$2)}intersectsSphere(sphere2){let planes=this.planes,center=sphere2.center,negRadius=-sphere2.radius;for(let i=0;i<6;i++)if(planes[i].distanceToPoint(center)<negRadius)return!1;return!0}intersectsBox(box2){let planes=this.planes;for(let i=0;i<6;i++){let plane=planes[i];if(_vector$7.x=plane.normal.x>0?box2.max.x:box2.min.x,_vector$7.y=plane.normal.y>0?box2.max.y:box2.min.y,_vector$7.z=plane.normal.z>0?box2.max.z:box2.min.z,plane.distanceToPoint(_vector$7)<0)return!1}return!0}containsPoint(point2){let planes=this.planes;for(let i=0;i<6;i++)if(planes[i].distanceToPoint(point2)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};function WebGLAnimation(){let context=null,isAnimating=!1,animationLoop=null,requestId=null;function onAnimationFrame(time,frame){animationLoop(time,frame),requestId=context.requestAnimationFrame(onAnimationFrame)}return{start:function(){isAnimating!==!0&&animationLoop!==null&&(requestId=context.requestAnimationFrame(onAnimationFrame),isAnimating=!0)},stop:function(){context.cancelAnimationFrame(requestId),isAnimating=!1},setAnimationLoop:function(callback){animationLoop=callback},setContext:function(value){context=value}}}function WebGLAttributes(gl,capabilities){let isWebGL2=capabilities.isWebGL2,buffers=new WeakMap;function createBuffer(attribute,bufferType){let array=attribute.array,usage=attribute.usage,buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer),gl.bufferData(bufferType,array,usage),attribute.onUploadCallback();let type;if(array instanceof Float32Array)type=5126;else if(array instanceof Uint16Array)if(attribute.isFloat16BufferAttribute)if(isWebGL2)type=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else type=5123;else if(array instanceof Int16Array)type=5122;else if(array instanceof Uint32Array)type=5125;else if(array instanceof Int32Array)type=5124;else if(array instanceof Int8Array)type=5120;else if(array instanceof Uint8Array)type=5121;else if(array instanceof Uint8ClampedArray)type=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+array);return{buffer,type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version}}function updateBuffer(buffer,attribute,bufferType){let array=attribute.array,updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer),updateRange.count===-1?gl.bufferSubData(bufferType,0,array):(isWebGL2?gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array,updateRange.offset,updateRange.count):gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count)),updateRange.count=-1),attribute.onUploadCallback()}function get(attribute){return attribute.isInterleavedBufferAttribute&&(attribute=attribute.data),buffers.get(attribute)}function remove2(attribute){attribute.isInterleavedBufferAttribute&&(attribute=attribute.data);let data=buffers.get(attribute);data&&(gl.deleteBuffer(data.buffer),buffers.delete(attribute))}function update(attribute,bufferType){if(attribute.isGLBufferAttribute){let cached=buffers.get(attribute);(!cached||cached.version<attribute.version)&&buffers.set(attribute,{buffer:attribute.buffer,type:attribute.type,bytesPerElement:attribute.elementSize,version:attribute.version});return}attribute.isInterleavedBufferAttribute&&(attribute=attribute.data);let data=buffers.get(attribute);data===void 0?buffers.set(attribute,createBuffer(attribute,bufferType)):data.version<attribute.version&&(updateBuffer(data.buffer,attribute,bufferType),data.version=attribute.version)}return{get,remove:remove2,update}}var PlaneGeometry=class extends BufferGeometry{constructor(width=1,height=1,widthSegments=1,heightSegments=1){super(),this.type="PlaneGeometry",this.parameters={width,height,widthSegments,heightSegments};let width_half=width/2,height_half=height/2,gridX=Math.floor(widthSegments),gridY=Math.floor(heightSegments),gridX1=gridX+1,gridY1=gridY+1,segment_width=width/gridX,segment_height=height/gridY,indices=[],vertices=[],normals=[],uvs=[];for(let iy=0;iy<gridY1;iy++){let y=iy*segment_height-height_half;for(let ix=0;ix<gridX1;ix++){let x=ix*segment_width-width_half;vertices.push(x,-y,0),normals.push(0,0,1),uvs.push(ix/gridX),uvs.push(1-iy/gridY)}}for(let iy=0;iy<gridY;iy++)for(let ix=0;ix<gridX;ix++){let a=ix+gridX1*iy,b=ix+gridX1*(iy+1),c=ix+1+gridX1*(iy+1),d=ix+1+gridX1*iy;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2))}static fromJSON(data){return new PlaneGeometry(data.width,data.height,data.widthSegments,data.heightSegments)}},alphamap_fragment=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,alphamap_pars_fragment=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,alphatest_fragment=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,alphatest_pars_fragment=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,aomap_fragment=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,aomap_pars_fragment=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,begin_vertex="vec3 transformed = vec3( position );",beginnormal_vertex=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,bsdfs=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
#ifdef USE_IRIDESCENCE
	vec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,iridescence_fragment=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,bumpmap_pars_fragment=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,clipping_planes_fragment=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,clipping_planes_pars_fragment=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,clipping_planes_pars_vertex=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,clipping_planes_vertex=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,color_fragment=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,color_pars_fragment=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,color_pars_vertex=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,color_vertex=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,common=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,cube_uv_reflection_fragment=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,defaultnormal_vertex=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,displacementmap_pars_vertex=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,displacementmap_vertex=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,emissivemap_fragment=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,emissivemap_pars_fragment=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,envmap_fragment=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,envmap_common_pars_fragment=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,envmap_pars_fragment=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,envmap_pars_vertex=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,envmap_vertex=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,fog_vertex=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,fog_pars_vertex=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,fog_fragment=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,fog_pars_fragment=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,gradientmap_pars_fragment=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,lightmap_fragment=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,lightmap_pars_fragment=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,lights_lambert_fragment=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,lights_lambert_pars_fragment=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,lights_pars_begin=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,envmap_physical_pars_fragment=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,lights_toon_fragment=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,lights_toon_pars_fragment=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,lights_phong_fragment=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,lights_phong_pars_fragment=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,lights_physical_fragment=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,lights_physical_pars_fragment=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	#ifdef USE_IRIDESCENCE
		reflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,lights_fragment_begin=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,lights_fragment_maps=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,lights_fragment_end=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,logdepthbuf_fragment=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,logdepthbuf_pars_fragment=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,logdepthbuf_pars_vertex=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,logdepthbuf_vertex=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,map_fragment=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,map_pars_fragment=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,map_particle_fragment=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,map_particle_pars_fragment=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,metalnessmap_fragment=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,metalnessmap_pars_fragment=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,morphcolor_vertex=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,morphnormal_vertex=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,morphtarget_pars_vertex=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,morphtarget_vertex=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,normal_fragment_begin=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,normal_fragment_maps=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,normal_pars_fragment=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_pars_vertex=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_vertex=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,normalmap_pars_fragment=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,clearcoat_normal_fragment_begin=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,clearcoat_normal_fragment_maps=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,clearcoat_pars_fragment=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,iridescence_pars_fragment=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,output_fragment=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,packing=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,premultiplied_alpha_fragment=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,project_vertex=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,dithering_fragment=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,dithering_pars_fragment=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,roughnessmap_fragment=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,roughnessmap_pars_fragment=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,shadowmap_pars_fragment=`#if NUM_SPOT_LIGHT_COORDS > 0
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,shadowmap_pars_vertex=`#if NUM_SPOT_LIGHT_COORDS > 0
  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,shadowmap_vertex=`#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,shadowmask_pars_fragment=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,skinbase_vertex=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,skinning_pars_vertex=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,skinning_vertex=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,skinnormal_vertex=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,specularmap_fragment=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,specularmap_pars_fragment=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,tonemapping_fragment=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,tonemapping_pars_fragment=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,transmission_fragment=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,transmission_pars_fragment=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,uv_pars_fragment=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,uv_pars_vertex=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,uv_vertex=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,uv2_pars_fragment=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,uv2_pars_vertex=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,uv2_vertex=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,worldpos_vertex=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,vertex$h=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,fragment$h=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,vertex$g=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,fragment$g=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,vertex$f=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,fragment$f=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,vertex$e=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,fragment$e=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,vertex$d=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,fragment$d=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,vertex$c=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,fragment$c=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,vertex$b=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,fragment$b=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,vertex$a=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,fragment$a=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$9=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$9=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$8=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,fragment$8=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$7=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,fragment$7=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,vertex$6=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$6=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$5=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,fragment$5=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$4=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$4=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$3=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,fragment$3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,vertex$2=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$2=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,vertex$1=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,fragment$1=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,ShaderChunk={alphamap_fragment,alphamap_pars_fragment,alphatest_fragment,alphatest_pars_fragment,aomap_fragment,aomap_pars_fragment,begin_vertex,beginnormal_vertex,bsdfs,iridescence_fragment,bumpmap_pars_fragment,clipping_planes_fragment,clipping_planes_pars_fragment,clipping_planes_pars_vertex,clipping_planes_vertex,color_fragment,color_pars_fragment,color_pars_vertex,color_vertex,common,cube_uv_reflection_fragment,defaultnormal_vertex,displacementmap_pars_vertex,displacementmap_vertex,emissivemap_fragment,emissivemap_pars_fragment,encodings_fragment,encodings_pars_fragment,envmap_fragment,envmap_common_pars_fragment,envmap_pars_fragment,envmap_pars_vertex,envmap_physical_pars_fragment,envmap_vertex,fog_vertex,fog_pars_vertex,fog_fragment,fog_pars_fragment,gradientmap_pars_fragment,lightmap_fragment,lightmap_pars_fragment,lights_lambert_fragment,lights_lambert_pars_fragment,lights_pars_begin,lights_toon_fragment,lights_toon_pars_fragment,lights_phong_fragment,lights_phong_pars_fragment,lights_physical_fragment,lights_physical_pars_fragment,lights_fragment_begin,lights_fragment_maps,lights_fragment_end,logdepthbuf_fragment,logdepthbuf_pars_fragment,logdepthbuf_pars_vertex,logdepthbuf_vertex,map_fragment,map_pars_fragment,map_particle_fragment,map_particle_pars_fragment,metalnessmap_fragment,metalnessmap_pars_fragment,morphcolor_vertex,morphnormal_vertex,morphtarget_pars_vertex,morphtarget_vertex,normal_fragment_begin,normal_fragment_maps,normal_pars_fragment,normal_pars_vertex,normal_vertex,normalmap_pars_fragment,clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps,clearcoat_pars_fragment,iridescence_pars_fragment,output_fragment,packing,premultiplied_alpha_fragment,project_vertex,dithering_fragment,dithering_pars_fragment,roughnessmap_fragment,roughnessmap_pars_fragment,shadowmap_pars_fragment,shadowmap_pars_vertex,shadowmap_vertex,shadowmask_pars_fragment,skinbase_vertex,skinning_pars_vertex,skinning_vertex,skinnormal_vertex,specularmap_fragment,specularmap_pars_fragment,tonemapping_fragment,tonemapping_pars_fragment,transmission_fragment,transmission_pars_fragment,uv_pars_fragment,uv_pars_vertex,uv_vertex,uv2_pars_fragment,uv2_pars_vertex,uv2_vertex,worldpos_vertex,background_vert:vertex$h,background_frag:fragment$h,backgroundCube_vert:vertex$g,backgroundCube_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1},UniformsLib={common:{diffuse:{value:new Color(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Matrix3},uv2Transform:{value:new Matrix3},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color(16777215)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3}}},ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:ShaderChunk.backgroundCube_vert,fragmentShader:ShaderChunk.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new Color(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Vector2},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Color(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Color(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};var _rgb={r:0,b:0,g:0};function WebGLBackground(renderer,cubemaps,cubeuvmaps,state,objects,alpha,premultipliedAlpha){let clearColor=new Color(0),clearAlpha=alpha===!0?0:1,planeMesh,boxMesh,currentBackground=null,currentBackgroundVersion=0,currentTonemapping=null;function render(renderList,scene){let forceClear=!1,background=scene.isScene===!0?scene.background:null;background&&background.isTexture&&(background=(scene.backgroundBlurriness>0?cubeuvmaps:cubemaps).get(background));let xr=renderer.xr,session=xr.getSession&&xr.getSession();session&&session.environmentBlendMode==="additive"&&(background=null),background===null?setClear(clearColor,clearAlpha):background&&background.isColor&&(setClear(background,1),forceClear=!0),(renderer.autoClear||forceClear)&&renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil),background&&(background.isCubeTexture||background.mapping===CubeUVReflectionMapping)?(boxMesh===void 0&&(boxMesh=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.backgroundCube.uniforms),vertexShader:ShaderLib.backgroundCube.vertexShader,fragmentShader:ShaderLib.backgroundCube.fragmentShader,side:BackSide,depthTest:!1,depthWrite:!1,fog:!1})),boxMesh.geometry.deleteAttribute("normal"),boxMesh.geometry.deleteAttribute("uv"),boxMesh.onBeforeRender=function(renderer2,scene2,camera){this.matrixWorld.copyPosition(camera.matrixWorld)},Object.defineProperty(boxMesh.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),objects.update(boxMesh)),boxMesh.material.uniforms.envMap.value=background,boxMesh.material.uniforms.flipEnvMap.value=background.isCubeTexture&&background.isRenderTargetTexture===!1?-1:1,boxMesh.material.uniforms.backgroundBlurriness.value=scene.backgroundBlurriness,boxMesh.material.uniforms.backgroundIntensity.value=scene.backgroundIntensity,(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping)&&(boxMesh.material.needsUpdate=!0,currentBackground=background,currentBackgroundVersion=background.version,currentTonemapping=renderer.toneMapping),boxMesh.layers.enableAll(),renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null)):background&&background.isTexture&&(planeMesh===void 0&&(planeMesh=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:!1,depthWrite:!1,fog:!1})),planeMesh.geometry.deleteAttribute("normal"),Object.defineProperty(planeMesh.material,"map",{get:function(){return this.uniforms.t2D.value}}),objects.update(planeMesh)),planeMesh.material.uniforms.t2D.value=background,planeMesh.material.uniforms.backgroundIntensity.value=scene.backgroundIntensity,background.matrixAutoUpdate===!0&&background.updateMatrix(),planeMesh.material.uniforms.uvTransform.value.copy(background.matrix),(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping)&&(planeMesh.material.needsUpdate=!0,currentBackground=background,currentBackgroundVersion=background.version,currentTonemapping=renderer.toneMapping),planeMesh.layers.enableAll(),renderList.unshift(planeMesh,planeMesh.geometry,planeMesh.material,0,0,null))}function setClear(color,alpha2){color.getRGB(_rgb,getUnlitUniformColorSpace(renderer)),state.buffers.color.setClear(_rgb.r,_rgb.g,_rgb.b,alpha2,premultipliedAlpha)}return{getClearColor:function(){return clearColor},setClearColor:function(color,alpha2=1){clearColor.set(color),clearAlpha=alpha2,setClear(clearColor,clearAlpha)},getClearAlpha:function(){return clearAlpha},setClearAlpha:function(alpha2){clearAlpha=alpha2,setClear(clearColor,clearAlpha)},render}}function WebGLBindingStates(gl,extensions,attributes,capabilities){let maxVertexAttributes=gl.getParameter(34921),extension=capabilities.isWebGL2?null:extensions.get("OES_vertex_array_object"),vaoAvailable=capabilities.isWebGL2||extension!==null,bindingStates={},defaultState=createBindingState(null),currentState=defaultState,forceUpdate=!1;function setup(object,material,program,geometry,index){let updateBuffers=!1;if(vaoAvailable){let state=getBindingState(geometry,program,material);currentState!==state&&(currentState=state,bindVertexArrayObject(currentState.object)),updateBuffers=needsUpdate(object,geometry,program,index),updateBuffers&&saveCache(object,geometry,program,index)}else{let wireframe=material.wireframe===!0;(currentState.geometry!==geometry.id||currentState.program!==program.id||currentState.wireframe!==wireframe)&&(currentState.geometry=geometry.id,currentState.program=program.id,currentState.wireframe=wireframe,updateBuffers=!0)}index!==null&&attributes.update(index,34963),(updateBuffers||forceUpdate)&&(forceUpdate=!1,setupVertexAttributes(object,material,program,geometry),index!==null&&gl.bindBuffer(34963,attributes.get(index).buffer))}function createVertexArrayObject(){return capabilities.isWebGL2?gl.createVertexArray():extension.createVertexArrayOES()}function bindVertexArrayObject(vao){return capabilities.isWebGL2?gl.bindVertexArray(vao):extension.bindVertexArrayOES(vao)}function deleteVertexArrayObject(vao){return capabilities.isWebGL2?gl.deleteVertexArray(vao):extension.deleteVertexArrayOES(vao)}function getBindingState(geometry,program,material){let wireframe=material.wireframe===!0,programMap=bindingStates[geometry.id];programMap===void 0&&(programMap={},bindingStates[geometry.id]=programMap);let stateMap=programMap[program.id];stateMap===void 0&&(stateMap={},programMap[program.id]=stateMap);let state=stateMap[wireframe];return state===void 0&&(state=createBindingState(createVertexArrayObject()),stateMap[wireframe]=state),state}function createBindingState(vao){let newAttributes=[],enabledAttributes=[],attributeDivisors=[];for(let i=0;i<maxVertexAttributes;i++)newAttributes[i]=0,enabledAttributes[i]=0,attributeDivisors[i]=0;return{geometry:null,program:null,wireframe:!1,newAttributes,enabledAttributes,attributeDivisors,object:vao,attributes:{},index:null}}function needsUpdate(object,geometry,program,index){let cachedAttributes=currentState.attributes,geometryAttributes=geometry.attributes,attributesNum=0,programAttributes=program.getAttributes();for(let name in programAttributes)if(programAttributes[name].location>=0){let cachedAttribute=cachedAttributes[name],geometryAttribute=geometryAttributes[name];if(geometryAttribute===void 0&&(name==="instanceMatrix"&&object.instanceMatrix&&(geometryAttribute=object.instanceMatrix),name==="instanceColor"&&object.instanceColor&&(geometryAttribute=object.instanceColor)),cachedAttribute===void 0||cachedAttribute.attribute!==geometryAttribute||geometryAttribute&&cachedAttribute.data!==geometryAttribute.data)return!0;attributesNum++}return currentState.attributesNum!==attributesNum||currentState.index!==index}function saveCache(object,geometry,program,index){let cache={},attributes2=geometry.attributes,attributesNum=0,programAttributes=program.getAttributes();for(let name in programAttributes)if(programAttributes[name].location>=0){let attribute=attributes2[name];attribute===void 0&&(name==="instanceMatrix"&&object.instanceMatrix&&(attribute=object.instanceMatrix),name==="instanceColor"&&object.instanceColor&&(attribute=object.instanceColor));let data={};data.attribute=attribute,attribute&&attribute.data&&(data.data=attribute.data),cache[name]=data,attributesNum++}currentState.attributes=cache,currentState.attributesNum=attributesNum,currentState.index=index}function initAttributes(){let newAttributes=currentState.newAttributes;for(let i=0,il=newAttributes.length;i<il;i++)newAttributes[i]=0}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0)}function enableAttributeAndDivisor(attribute,meshPerAttribute){let newAttributes=currentState.newAttributes,enabledAttributes=currentState.enabledAttributes,attributeDivisors=currentState.attributeDivisors;newAttributes[attribute]=1,enabledAttributes[attribute]===0&&(gl.enableVertexAttribArray(attribute),enabledAttributes[attribute]=1),attributeDivisors[attribute]!==meshPerAttribute&&((capabilities.isWebGL2?gl:extensions.get("ANGLE_instanced_arrays"))[capabilities.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](attribute,meshPerAttribute),attributeDivisors[attribute]=meshPerAttribute)}function disableUnusedAttributes(){let newAttributes=currentState.newAttributes,enabledAttributes=currentState.enabledAttributes;for(let i=0,il=enabledAttributes.length;i<il;i++)enabledAttributes[i]!==newAttributes[i]&&(gl.disableVertexAttribArray(i),enabledAttributes[i]=0)}function vertexAttribPointer(index,size,type,normalized,stride,offset){capabilities.isWebGL2===!0&&(type===5124||type===5125)?gl.vertexAttribIPointer(index,size,type,stride,offset):gl.vertexAttribPointer(index,size,type,normalized,stride,offset)}function setupVertexAttributes(object,material,program,geometry){if(capabilities.isWebGL2===!1&&(object.isInstancedMesh||geometry.isInstancedBufferGeometry)&&extensions.get("ANGLE_instanced_arrays")===null)return;initAttributes();let geometryAttributes=geometry.attributes,programAttributes=program.getAttributes(),materialDefaultAttributeValues=material.defaultAttributeValues;for(let name in programAttributes){let programAttribute=programAttributes[name];if(programAttribute.location>=0){let geometryAttribute=geometryAttributes[name];if(geometryAttribute===void 0&&(name==="instanceMatrix"&&object.instanceMatrix&&(geometryAttribute=object.instanceMatrix),name==="instanceColor"&&object.instanceColor&&(geometryAttribute=object.instanceColor)),geometryAttribute!==void 0){let normalized=geometryAttribute.normalized,size=geometryAttribute.itemSize,attribute=attributes.get(geometryAttribute);if(attribute===void 0)continue;let buffer=attribute.buffer,type=attribute.type,bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){let data=geometryAttribute.data,stride=data.stride,offset=geometryAttribute.offset;if(data.isInstancedInterleavedBuffer){for(let i=0;i<programAttribute.locationSize;i++)enableAttributeAndDivisor(programAttribute.location+i,data.meshPerAttribute);object.isInstancedMesh!==!0&&geometry._maxInstanceCount===void 0&&(geometry._maxInstanceCount=data.meshPerAttribute*data.count)}else for(let i=0;i<programAttribute.locationSize;i++)enableAttribute(programAttribute.location+i);gl.bindBuffer(34962,buffer);for(let i=0;i<programAttribute.locationSize;i++)vertexAttribPointer(programAttribute.location+i,size/programAttribute.locationSize,type,normalized,stride*bytesPerElement,(offset+size/programAttribute.locationSize*i)*bytesPerElement)}else{if(geometryAttribute.isInstancedBufferAttribute){for(let i=0;i<programAttribute.locationSize;i++)enableAttributeAndDivisor(programAttribute.location+i,geometryAttribute.meshPerAttribute);object.isInstancedMesh!==!0&&geometry._maxInstanceCount===void 0&&(geometry._maxInstanceCount=geometryAttribute.meshPerAttribute*geometryAttribute.count)}else for(let i=0;i<programAttribute.locationSize;i++)enableAttribute(programAttribute.location+i);gl.bindBuffer(34962,buffer);for(let i=0;i<programAttribute.locationSize;i++)vertexAttribPointer(programAttribute.location+i,size/programAttribute.locationSize,type,normalized,size*bytesPerElement,size/programAttribute.locationSize*i*bytesPerElement)}}else if(materialDefaultAttributeValues!==void 0){let value=materialDefaultAttributeValues[name];if(value!==void 0)switch(value.length){case 2:gl.vertexAttrib2fv(programAttribute.location,value);break;case 3:gl.vertexAttrib3fv(programAttribute.location,value);break;case 4:gl.vertexAttrib4fv(programAttribute.location,value);break;default:gl.vertexAttrib1fv(programAttribute.location,value)}}}}disableUnusedAttributes()}function dispose(){reset();for(let geometryId in bindingStates){let programMap=bindingStates[geometryId];for(let programId in programMap){let stateMap=programMap[programId];for(let wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object),delete stateMap[wireframe];delete programMap[programId]}delete bindingStates[geometryId]}}function releaseStatesOfGeometry(geometry){if(bindingStates[geometry.id]===void 0)return;let programMap=bindingStates[geometry.id];for(let programId in programMap){let stateMap=programMap[programId];for(let wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object),delete stateMap[wireframe];delete programMap[programId]}delete bindingStates[geometry.id]}function releaseStatesOfProgram(program){for(let geometryId in bindingStates){let programMap=bindingStates[geometryId];if(programMap[program.id]===void 0)continue;let stateMap=programMap[program.id];for(let wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object),delete stateMap[wireframe];delete programMap[program.id]}}function reset(){resetDefaultState(),forceUpdate=!0,currentState!==defaultState&&(currentState=defaultState,bindVertexArrayObject(currentState.object))}function resetDefaultState(){defaultState.geometry=null,defaultState.program=null,defaultState.wireframe=!1}return{setup,reset,resetDefaultState,dispose,releaseStatesOfGeometry,releaseStatesOfProgram,initAttributes,enableAttribute,disableUnusedAttributes}}function WebGLBufferRenderer(gl,extensions,info,capabilities){let isWebGL2=capabilities.isWebGL2,mode;function setMode(value){mode=value}function render(start,count){gl.drawArrays(mode,start,count),info.update(count,mode,1)}function renderInstances(start,count,primcount){if(primcount===0)return;let extension,methodName;if(isWebGL2)extension=gl,methodName="drawArraysInstanced";else if(extension=extensions.get("ANGLE_instanced_arrays"),methodName="drawArraysInstancedANGLE",extension===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}extension[methodName](mode,start,count,primcount),info.update(count,mode,primcount)}this.setMode=setMode,this.render=render,this.renderInstances=renderInstances}function WebGLCapabilities(gl,extensions,parameters){let maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==void 0)return maxAnisotropy;if(extensions.has("EXT_texture_filter_anisotropic")===!0){let extension=extensions.get("EXT_texture_filter_anisotropic");maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else maxAnisotropy=0;return maxAnisotropy}function getMaxPrecision(precision2){if(precision2==="highp"){if(gl.getShaderPrecisionFormat(35633,36338).precision>0&&gl.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";precision2="mediump"}return precision2==="mediump"&&gl.getShaderPrecisionFormat(35633,36337).precision>0&&gl.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}let isWebGL2=typeof WebGL2RenderingContext!="undefined"&&gl instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&gl instanceof WebGL2ComputeRenderingContext,precision=parameters.precision!==void 0?parameters.precision:"highp",maxPrecision=getMaxPrecision(precision);maxPrecision!==precision&&(console.warn("THREE.WebGLRenderer:",precision,"not supported, using",maxPrecision,"instead."),precision=maxPrecision);let drawBuffers=isWebGL2||extensions.has("WEBGL_draw_buffers"),logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===!0,maxTextures=gl.getParameter(34930),maxVertexTextures=gl.getParameter(35660),maxTextureSize=gl.getParameter(3379),maxCubemapSize=gl.getParameter(34076),maxAttributes=gl.getParameter(34921),maxVertexUniforms=gl.getParameter(36347),maxVaryings=gl.getParameter(36348),maxFragmentUniforms=gl.getParameter(36349),vertexTextures=maxVertexTextures>0,floatFragmentTextures=isWebGL2||extensions.has("OES_texture_float"),floatVertexTextures=vertexTextures&&floatFragmentTextures,maxSamples=isWebGL2?gl.getParameter(36183):0;return{isWebGL2,drawBuffers,getMaxAnisotropy,getMaxPrecision,precision,logarithmicDepthBuffer,maxTextures,maxVertexTextures,maxTextureSize,maxCubemapSize,maxAttributes,maxVertexUniforms,maxVaryings,maxFragmentUniforms,vertexTextures,floatFragmentTextures,floatVertexTextures,maxSamples}}function WebGLClipping(properties){let scope=this,globalState=null,numGlobalPlanes=0,localClippingEnabled=!1,renderingShadows=!1,plane=new Plane,viewNormalMatrix=new Matrix3,uniform={value:null,needsUpdate:!1};this.uniform=uniform,this.numPlanes=0,this.numIntersection=0,this.init=function(planes,enableLocalClipping,camera){let enabled=planes.length!==0||enableLocalClipping||numGlobalPlanes!==0||localClippingEnabled;return localClippingEnabled=enableLocalClipping,globalState=projectPlanes(planes,camera,0),numGlobalPlanes=planes.length,enabled},this.beginShadows=function(){renderingShadows=!0,projectPlanes(null)},this.endShadows=function(){renderingShadows=!1,resetGlobalState()},this.setState=function(material,camera,useCache){let planes=material.clippingPlanes,clipIntersection=material.clipIntersection,clipShadows=material.clipShadows,materialProperties=properties.get(material);if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows)renderingShadows?projectPlanes(null):resetGlobalState();else{let nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4,dstArray=materialProperties.clippingState||null;uniform.value=dstArray,dstArray=projectPlanes(planes,camera,lGlobal,useCache);for(let i=0;i!==lGlobal;++i)dstArray[i]=globalState[i];materialProperties.clippingState=dstArray,this.numIntersection=clipIntersection?this.numPlanes:0,this.numPlanes+=nGlobal}};function resetGlobalState(){uniform.value!==globalState&&(uniform.value=globalState,uniform.needsUpdate=numGlobalPlanes>0),scope.numPlanes=numGlobalPlanes,scope.numIntersection=0}function projectPlanes(planes,camera,dstOffset,skipTransform){let nPlanes=planes!==null?planes.length:0,dstArray=null;if(nPlanes!==0){if(dstArray=uniform.value,skipTransform!==!0||dstArray===null){let flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix),(dstArray===null||dstArray.length<flatSize)&&(dstArray=new Float32Array(flatSize));for(let i=0,i4=dstOffset;i!==nPlanes;++i,i4+=4)plane.copy(planes[i]).applyMatrix4(viewMatrix,viewNormalMatrix),plane.normal.toArray(dstArray,i4),dstArray[i4+3]=plane.constant}uniform.value=dstArray,uniform.needsUpdate=!0}return scope.numPlanes=nPlanes,scope.numIntersection=0,dstArray}}function WebGLCubeMaps(renderer){let cubemaps=new WeakMap;function mapTextureMapping(texture,mapping){return mapping===EquirectangularReflectionMapping?texture.mapping=CubeReflectionMapping:mapping===EquirectangularRefractionMapping&&(texture.mapping=CubeRefractionMapping),texture}function get(texture){if(texture&&texture.isTexture&&texture.isRenderTargetTexture===!1){let mapping=texture.mapping;if(mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping)if(cubemaps.has(texture)){let cubemap=cubemaps.get(texture).texture;return mapTextureMapping(cubemap,texture.mapping)}else{let image=texture.image;if(image&&image.height>0){let renderTarget=new WebGLCubeRenderTarget(image.height/2);return renderTarget.fromEquirectangularTexture(renderer,texture),cubemaps.set(texture,renderTarget),texture.addEventListener("dispose",onTextureDispose),mapTextureMapping(renderTarget.texture,texture.mapping)}else return null}}return texture}function onTextureDispose(event){let texture=event.target;texture.removeEventListener("dispose",onTextureDispose);let cubemap=cubemaps.get(texture);cubemap!==void 0&&(cubemaps.delete(texture),cubemap.dispose())}function dispose(){cubemaps=new WeakMap}return{get,dispose}}var OrthographicCamera=class extends Camera{constructor(left=-1,right=1,top=1,bottom=-1,near=.1,far=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=left,this.right=right,this.top=top,this.bottom=bottom,this.near=near,this.far=far,this.updateProjectionMatrix()}copy(source,recursive){return super.copy(source,recursive),this.left=source.left,this.right=source.right,this.top=source.top,this.bottom=source.bottom,this.near=source.near,this.far=source.far,this.zoom=source.zoom,this.view=source.view===null?null:Object.assign({},source.view),this}setViewOffset(fullWidth,fullHeight,x,y,width,height){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=fullWidth,this.view.fullHeight=fullHeight,this.view.offsetX=x,this.view.offsetY=y,this.view.width=width,this.view.height=height,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let dx=(this.right-this.left)/(2*this.zoom),dy=(this.top-this.bottom)/(2*this.zoom),cx=(this.right+this.left)/2,cy=(this.top+this.bottom)/2,left=cx-dx,right=cx+dx,top=cy+dy,bottom=cy-dy;if(this.view!==null&&this.view.enabled){let scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom,scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX,right=left+scaleW*this.view.width,top-=scaleH*this.view.offsetY,bottom=top-scaleH*this.view.height}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){let data=super.toJSON(meta);return data.object.zoom=this.zoom,data.object.left=this.left,data.object.right=this.right,data.object.top=this.top,data.object.bottom=this.bottom,data.object.near=this.near,data.object.far=this.far,this.view!==null&&(data.object.view=Object.assign({},this.view)),data}},LOD_MIN=4,EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582],MAX_SAMPLES=20,_flatCamera=new OrthographicCamera,_clearColor=new Color,_oldTarget=null,PHI=(1+Math.sqrt(5))/2,INV_PHI=1/PHI,_axisDirections=[new Vector3(1,1,1),new Vector3(-1,1,1),new Vector3(1,1,-1),new Vector3(-1,1,-1),new Vector3(0,PHI,INV_PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(INV_PHI,0,PHI),new Vector3(-INV_PHI,0,PHI),new Vector3(PHI,INV_PHI,0),new Vector3(-PHI,INV_PHI,0)],PMREMGenerator=class{constructor(renderer){this._renderer=renderer,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(scene,sigma=0,near=.1,far=100){_oldTarget=this._renderer.getRenderTarget(),this._setSize(256);let cubeUVRenderTarget=this._allocateTargets();return cubeUVRenderTarget.depthBuffer=!0,this._sceneToCubeUV(scene,near,far,cubeUVRenderTarget),sigma>0&&this._blur(cubeUVRenderTarget,0,0,sigma),this._applyPMREM(cubeUVRenderTarget),this._cleanup(cubeUVRenderTarget),cubeUVRenderTarget}fromEquirectangular(equirectangular,renderTarget=null){return this._fromTexture(equirectangular,renderTarget)}fromCubemap(cubemap,renderTarget=null){return this._fromTexture(cubemap,renderTarget)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=_getCubemapMaterial(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=_getEquirectMaterial(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(cubeSize){this._lodMax=Math.floor(Math.log2(cubeSize)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let i=0;i<this._lodPlanes.length;i++)this._lodPlanes[i].dispose()}_cleanup(outputTarget){this._renderer.setRenderTarget(_oldTarget),outputTarget.scissorTest=!1,_setViewport(outputTarget,0,0,outputTarget.width,outputTarget.height)}_fromTexture(texture,renderTarget){texture.mapping===CubeReflectionMapping||texture.mapping===CubeRefractionMapping?this._setSize(texture.image.length===0?16:texture.image[0].width||texture.image[0].image.width):this._setSize(texture.image.width/4),_oldTarget=this._renderer.getRenderTarget();let cubeUVRenderTarget=renderTarget||this._allocateTargets();return this._textureToCubeUV(texture,cubeUVRenderTarget),this._applyPMREM(cubeUVRenderTarget),this._cleanup(cubeUVRenderTarget),cubeUVRenderTarget}_allocateTargets(){let width=3*Math.max(this._cubeSize,112),height=4*this._cubeSize,params={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:!1,type:HalfFloatType,format:RGBAFormat,encoding:LinearEncoding,depthBuffer:!1},cubeUVRenderTarget=_createRenderTarget(width,height,params);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==width){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=_createRenderTarget(width,height,params);let{_lodMax}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(_lodMax)),this._blurMaterial=_getBlurShader(_lodMax,width,height)}return cubeUVRenderTarget}_compileMaterial(material){let tmpMesh=new Mesh(this._lodPlanes[0],material);this._renderer.compile(tmpMesh,_flatCamera)}_sceneToCubeUV(scene,near,far,cubeUVRenderTarget){let cubeCamera=new PerspectiveCamera(90,1,near,far),upSign=[1,-1,1,1,1,1],forwardSign=[1,1,1,-1,-1,-1],renderer=this._renderer,originalAutoClear=renderer.autoClear,toneMapping=renderer.toneMapping;renderer.getClearColor(_clearColor),renderer.toneMapping=NoToneMapping,renderer.autoClear=!1;let backgroundMaterial=new MeshBasicMaterial({name:"PMREM.Background",side:BackSide,depthWrite:!1,depthTest:!1}),backgroundBox=new Mesh(new BoxGeometry,backgroundMaterial),useSolidColor=!1,background=scene.background;background?background.isColor&&(backgroundMaterial.color.copy(background),scene.background=null,useSolidColor=!0):(backgroundMaterial.color.copy(_clearColor),useSolidColor=!0);for(let i=0;i<6;i++){let col=i%3;col===0?(cubeCamera.up.set(0,upSign[i],0),cubeCamera.lookAt(forwardSign[i],0,0)):col===1?(cubeCamera.up.set(0,0,upSign[i]),cubeCamera.lookAt(0,forwardSign[i],0)):(cubeCamera.up.set(0,upSign[i],0),cubeCamera.lookAt(0,0,forwardSign[i]));let size=this._cubeSize;_setViewport(cubeUVRenderTarget,col*size,i>2?size:0,size,size),renderer.setRenderTarget(cubeUVRenderTarget),useSolidColor&&renderer.render(backgroundBox,cubeCamera),renderer.render(scene,cubeCamera)}backgroundBox.geometry.dispose(),backgroundBox.material.dispose(),renderer.toneMapping=toneMapping,renderer.autoClear=originalAutoClear,scene.background=background}_textureToCubeUV(texture,cubeUVRenderTarget){let renderer=this._renderer,isCubeTexture=texture.mapping===CubeReflectionMapping||texture.mapping===CubeRefractionMapping;isCubeTexture?(this._cubemapMaterial===null&&(this._cubemapMaterial=_getCubemapMaterial()),this._cubemapMaterial.uniforms.flipEnvMap.value=texture.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=_getEquirectMaterial());let material=isCubeTexture?this._cubemapMaterial:this._equirectMaterial,mesh=new Mesh(this._lodPlanes[0],material),uniforms=material.uniforms;uniforms.envMap.value=texture;let size=this._cubeSize;_setViewport(cubeUVRenderTarget,0,0,3*size,2*size),renderer.setRenderTarget(cubeUVRenderTarget),renderer.render(mesh,_flatCamera)}_applyPMREM(cubeUVRenderTarget){let renderer=this._renderer,autoClear=renderer.autoClear;renderer.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){let sigma=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),poleAxis=_axisDirections[(i-1)%_axisDirections.length];this._blur(cubeUVRenderTarget,i-1,i,sigma,poleAxis)}renderer.autoClear=autoClear}_blur(cubeUVRenderTarget,lodIn,lodOut,sigma,poleAxis){let pingPongRenderTarget=this._pingPongRenderTarget;this._halfBlur(cubeUVRenderTarget,pingPongRenderTarget,lodIn,lodOut,sigma,"latitudinal",poleAxis),this._halfBlur(pingPongRenderTarget,cubeUVRenderTarget,lodOut,lodOut,sigma,"longitudinal",poleAxis)}_halfBlur(targetIn,targetOut,lodIn,lodOut,sigmaRadians,direction,poleAxis){let renderer=this._renderer,blurMaterial=this._blurMaterial;direction!=="latitudinal"&&direction!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");let STANDARD_DEVIATIONS=3,blurMesh=new Mesh(this._lodPlanes[lodOut],blurMaterial),blurUniforms=blurMaterial.uniforms,pixels=this._sizeLods[lodIn]-1,radiansPerPixel=isFinite(sigmaRadians)?Math.PI/(2*pixels):2*Math.PI/(2*MAX_SAMPLES-1),sigmaPixels=sigmaRadians/radiansPerPixel,samples=isFinite(sigmaRadians)?1+Math.floor(STANDARD_DEVIATIONS*sigmaPixels):MAX_SAMPLES;samples>MAX_SAMPLES&&console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);let weights=[],sum=0;for(let i=0;i<MAX_SAMPLES;++i){let x2=i/sigmaPixels,weight=Math.exp(-x2*x2/2);weights.push(weight),i===0?sum+=weight:i<samples&&(sum+=2*weight)}for(let i=0;i<weights.length;i++)weights[i]=weights[i]/sum;blurUniforms.envMap.value=targetIn.texture,blurUniforms.samples.value=samples,blurUniforms.weights.value=weights,blurUniforms.latitudinal.value=direction==="latitudinal",poleAxis&&(blurUniforms.poleAxis.value=poleAxis);let{_lodMax}=this;blurUniforms.dTheta.value=radiansPerPixel,blurUniforms.mipInt.value=_lodMax-lodIn;let outputSize=this._sizeLods[lodOut],x=3*outputSize*(lodOut>_lodMax-LOD_MIN?lodOut-_lodMax+LOD_MIN:0),y=4*(this._cubeSize-outputSize);_setViewport(targetOut,x,y,3*outputSize,2*outputSize),renderer.setRenderTarget(targetOut),renderer.render(blurMesh,_flatCamera)}};function _createPlanes(lodMax){let lodPlanes=[],sizeLods=[],sigmas=[],lod=lodMax,totalLods=lodMax-LOD_MIN+1+EXTRA_LOD_SIGMA.length;for(let i=0;i<totalLods;i++){let sizeLod=Math.pow(2,lod);sizeLods.push(sizeLod);let sigma=1/sizeLod;i>lodMax-LOD_MIN?sigma=EXTRA_LOD_SIGMA[i-lodMax+LOD_MIN-1]:i===0&&(sigma=0),sigmas.push(sigma);let texelSize=1/(sizeLod-2),min=-texelSize,max=1+texelSize,uv1=[min,min,max,min,max,max,min,min,max,max,min,max],cubeFaces=6,vertices=6,positionSize=3,uvSize=2,faceIndexSize=1,position=new Float32Array(positionSize*vertices*cubeFaces),uv=new Float32Array(uvSize*vertices*cubeFaces),faceIndex=new Float32Array(faceIndexSize*vertices*cubeFaces);for(let face=0;face<cubeFaces;face++){let x=face%3*2/3-1,y=face>2?0:-1,coordinates=[x,y,0,x+2/3,y,0,x+2/3,y+1,0,x,y,0,x+2/3,y+1,0,x,y+1,0];position.set(coordinates,positionSize*vertices*face),uv.set(uv1,uvSize*vertices*face);let fill=[face,face,face,face,face,face];faceIndex.set(fill,faceIndexSize*vertices*face)}let planes=new BufferGeometry;planes.setAttribute("position",new BufferAttribute(position,positionSize)),planes.setAttribute("uv",new BufferAttribute(uv,uvSize)),planes.setAttribute("faceIndex",new BufferAttribute(faceIndex,faceIndexSize)),lodPlanes.push(planes),lod>LOD_MIN&&lod--}return{lodPlanes,sizeLods,sigmas}}function _createRenderTarget(width,height,params){let cubeUVRenderTarget=new WebGLRenderTarget(width,height,params);return cubeUVRenderTarget.texture.mapping=CubeUVReflectionMapping,cubeUVRenderTarget.texture.name="PMREM.cubeUv",cubeUVRenderTarget.scissorTest=!0,cubeUVRenderTarget}function _setViewport(target,x,y,width,height){target.viewport.set(x,y,width,height),target.scissor.set(x,y,width,height)}function _getBlurShader(lodMax,width,height){let weights=new Float32Array(MAX_SAMPLES),poleAxis=new Vector3(0,1,0);return new ShaderMaterial({name:"SphericalGaussianBlur",defines:{n:MAX_SAMPLES,CUBEUV_TEXEL_WIDTH:1/width,CUBEUV_TEXEL_HEIGHT:1/height,CUBEUV_MAX_MIP:`${lodMax}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:weights},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:poleAxis}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getEquirectMaterial(){return new ShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getCubemapMaterial(){return new ShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getCommonVertexShader(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function WebGLCubeUVMaps(renderer){let cubeUVmaps=new WeakMap,pmremGenerator=null;function get(texture){if(texture&&texture.isTexture){let mapping=texture.mapping,isEquirectMap=mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping,isCubeMap=mapping===CubeReflectionMapping||mapping===CubeRefractionMapping;if(isEquirectMap||isCubeMap)if(texture.isRenderTargetTexture&&texture.needsPMREMUpdate===!0){texture.needsPMREMUpdate=!1;let renderTarget=cubeUVmaps.get(texture);return pmremGenerator===null&&(pmremGenerator=new PMREMGenerator(renderer)),renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture,renderTarget):pmremGenerator.fromCubemap(texture,renderTarget),cubeUVmaps.set(texture,renderTarget),renderTarget.texture}else{if(cubeUVmaps.has(texture))return cubeUVmaps.get(texture).texture;{let image=texture.image;if(isEquirectMap&&image&&image.height>0||isCubeMap&&image&&isCubeTextureComplete(image)){pmremGenerator===null&&(pmremGenerator=new PMREMGenerator(renderer));let renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture):pmremGenerator.fromCubemap(texture);return cubeUVmaps.set(texture,renderTarget),texture.addEventListener("dispose",onTextureDispose),renderTarget.texture}else return null}}}return texture}function isCubeTextureComplete(image){let count=0,length=6;for(let i=0;i<length;i++)image[i]!==void 0&&count++;return count===length}function onTextureDispose(event){let texture=event.target;texture.removeEventListener("dispose",onTextureDispose);let cubemapUV=cubeUVmaps.get(texture);cubemapUV!==void 0&&(cubeUVmaps.delete(texture),cubemapUV.dispose())}function dispose(){cubeUVmaps=new WeakMap,pmremGenerator!==null&&(pmremGenerator.dispose(),pmremGenerator=null)}return{get,dispose}}function WebGLExtensions(gl){let extensions={};function getExtension(name){if(extensions[name]!==void 0)return extensions[name];let extension;switch(name){case"WEBGL_depth_texture":extension=gl.getExtension("WEBGL_depth_texture")||gl.getExtension("MOZ_WEBGL_depth_texture")||gl.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":extension=gl.getExtension("EXT_texture_filter_anisotropic")||gl.getExtension("MOZ_EXT_texture_filter_anisotropic")||gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":extension=gl.getExtension("WEBGL_compressed_texture_s3tc")||gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":extension=gl.getExtension("WEBGL_compressed_texture_pvrtc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:extension=gl.getExtension(name)}return extensions[name]=extension,extension}return{has:function(name){return getExtension(name)!==null},init:function(capabilities){capabilities.isWebGL2?getExtension("EXT_color_buffer_float"):(getExtension("WEBGL_depth_texture"),getExtension("OES_texture_float"),getExtension("OES_texture_half_float"),getExtension("OES_texture_half_float_linear"),getExtension("OES_standard_derivatives"),getExtension("OES_element_index_uint"),getExtension("OES_vertex_array_object"),getExtension("ANGLE_instanced_arrays")),getExtension("OES_texture_float_linear"),getExtension("EXT_color_buffer_half_float"),getExtension("WEBGL_multisampled_render_to_texture")},get:function(name){let extension=getExtension(name);return extension===null&&console.warn("THREE.WebGLRenderer: "+name+" extension not supported."),extension}}}function WebGLGeometries(gl,attributes,info,bindingStates){let geometries={},wireframeAttributes=new WeakMap;function onGeometryDispose(event){let geometry=event.target;geometry.index!==null&&attributes.remove(geometry.index);for(let name in geometry.attributes)attributes.remove(geometry.attributes[name]);geometry.removeEventListener("dispose",onGeometryDispose),delete geometries[geometry.id];let attribute=wireframeAttributes.get(geometry);attribute&&(attributes.remove(attribute),wireframeAttributes.delete(geometry)),bindingStates.releaseStatesOfGeometry(geometry),geometry.isInstancedBufferGeometry===!0&&delete geometry._maxInstanceCount,info.memory.geometries--}function get(object,geometry){return geometries[geometry.id]===!0||(geometry.addEventListener("dispose",onGeometryDispose),geometries[geometry.id]=!0,info.memory.geometries++),geometry}function update(geometry){let geometryAttributes=geometry.attributes;for(let name in geometryAttributes)attributes.update(geometryAttributes[name],34962);let morphAttributes=geometry.morphAttributes;for(let name in morphAttributes){let array=morphAttributes[name];for(let i=0,l=array.length;i<l;i++)attributes.update(array[i],34962)}}function updateWireframeAttribute(geometry){let indices=[],geometryIndex=geometry.index,geometryPosition=geometry.attributes.position,version=0;if(geometryIndex!==null){let array=geometryIndex.array;version=geometryIndex.version;for(let i=0,l=array.length;i<l;i+=3){let a=array[i+0],b=array[i+1],c=array[i+2];indices.push(a,b,b,c,c,a)}}else{let array=geometryPosition.array;version=geometryPosition.version;for(let i=0,l=array.length/3-1;i<l;i+=3){let a=i+0,b=i+1,c=i+2;indices.push(a,b,b,c,c,a)}}let attribute=new(arrayNeedsUint32(indices)?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attribute.version=version;let previousAttribute=wireframeAttributes.get(geometry);previousAttribute&&attributes.remove(previousAttribute),wireframeAttributes.set(geometry,attribute)}function getWireframeAttribute(geometry){let currentAttribute=wireframeAttributes.get(geometry);if(currentAttribute){let geometryIndex=geometry.index;geometryIndex!==null&&currentAttribute.version<geometryIndex.version&&updateWireframeAttribute(geometry)}else updateWireframeAttribute(geometry);return wireframeAttributes.get(geometry)}return{get,update,getWireframeAttribute}}function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){let isWebGL2=capabilities.isWebGL2,mode;function setMode(value){mode=value}let type,bytesPerElement;function setIndex(value){type=value.type,bytesPerElement=value.bytesPerElement}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement),info.update(count,mode,1)}function renderInstances(start,count,primcount){if(primcount===0)return;let extension,methodName;if(isWebGL2)extension=gl,methodName="drawElementsInstanced";else if(extension=extensions.get("ANGLE_instanced_arrays"),methodName="drawElementsInstancedANGLE",extension===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}extension[methodName](mode,count,type,start*bytesPerElement,primcount),info.update(count,mode,primcount)}this.setMode=setMode,this.setIndex=setIndex,this.render=render,this.renderInstances=renderInstances}function WebGLInfo(gl){let memory={geometries:0,textures:0},render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){switch(render.calls++,mode){case 4:render.triangles+=instanceCount*(count/3);break;case 1:render.lines+=instanceCount*(count/2);break;case 3:render.lines+=instanceCount*(count-1);break;case 2:render.lines+=instanceCount*count;break;case 0:render.points+=instanceCount*count;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",mode);break}}function reset(){render.frame++,render.calls=0,render.triangles=0,render.points=0,render.lines=0}return{memory,render,programs:null,autoReset:!0,reset,update}}function numericalSort(a,b){return a[0]-b[0]}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1])}function WebGLMorphtargets(gl,capabilities,textures){let influencesList={},morphInfluences=new Float32Array(8),morphTextures=new WeakMap,morph=new Vector4,workInfluences=[];for(let i=0;i<8;i++)workInfluences[i]=[i,0];function update(object,geometry,material,program){let objectInfluences=object.morphTargetInfluences;if(capabilities.isWebGL2===!0){let morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color,morphTargetsCount=morphAttribute!==void 0?morphAttribute.length:0,entry=morphTextures.get(geometry);if(entry===void 0||entry.count!==morphTargetsCount){let disposeTexture=function(){texture.dispose(),morphTextures.delete(geometry),geometry.removeEventListener("dispose",disposeTexture)};entry!==void 0&&entry.texture.dispose();let hasMorphPosition=geometry.morphAttributes.position!==void 0,hasMorphNormals=geometry.morphAttributes.normal!==void 0,hasMorphColors=geometry.morphAttributes.color!==void 0,morphTargets=geometry.morphAttributes.position||[],morphNormals=geometry.morphAttributes.normal||[],morphColors=geometry.morphAttributes.color||[],vertexDataCount=0;hasMorphPosition===!0&&(vertexDataCount=1),hasMorphNormals===!0&&(vertexDataCount=2),hasMorphColors===!0&&(vertexDataCount=3);let width=geometry.attributes.position.count*vertexDataCount,height=1;width>capabilities.maxTextureSize&&(height=Math.ceil(width/capabilities.maxTextureSize),width=capabilities.maxTextureSize);let buffer=new Float32Array(width*height*4*morphTargetsCount),texture=new DataArrayTexture(buffer,width,height,morphTargetsCount);texture.type=FloatType,texture.needsUpdate=!0;let vertexDataStride=vertexDataCount*4;for(let i=0;i<morphTargetsCount;i++){let morphTarget=morphTargets[i],morphNormal=morphNormals[i],morphColor=morphColors[i],offset=width*height*4*i;for(let j=0;j<morphTarget.count;j++){let stride=j*vertexDataStride;hasMorphPosition===!0&&(morph.fromBufferAttribute(morphTarget,j),buffer[offset+stride+0]=morph.x,buffer[offset+stride+1]=morph.y,buffer[offset+stride+2]=morph.z,buffer[offset+stride+3]=0),hasMorphNormals===!0&&(morph.fromBufferAttribute(morphNormal,j),buffer[offset+stride+4]=morph.x,buffer[offset+stride+5]=morph.y,buffer[offset+stride+6]=morph.z,buffer[offset+stride+7]=0),hasMorphColors===!0&&(morph.fromBufferAttribute(morphColor,j),buffer[offset+stride+8]=morph.x,buffer[offset+stride+9]=morph.y,buffer[offset+stride+10]=morph.z,buffer[offset+stride+11]=morphColor.itemSize===4?morph.w:1)}}entry={count:morphTargetsCount,texture,size:new Vector2(width,height)},morphTextures.set(geometry,entry),geometry.addEventListener("dispose",disposeTexture)}let morphInfluencesSum=0;for(let i=0;i<objectInfluences.length;i++)morphInfluencesSum+=objectInfluences[i];let morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,"morphTargetBaseInfluence",morphBaseInfluence),program.getUniforms().setValue(gl,"morphTargetInfluences",objectInfluences),program.getUniforms().setValue(gl,"morphTargetsTexture",entry.texture,textures),program.getUniforms().setValue(gl,"morphTargetsTextureSize",entry.size)}else{let length=objectInfluences===void 0?0:objectInfluences.length,influences=influencesList[geometry.id];if(influences===void 0||influences.length!==length){influences=[];for(let i=0;i<length;i++)influences[i]=[i,0];influencesList[geometry.id]=influences}for(let i=0;i<length;i++){let influence=influences[i];influence[0]=i,influence[1]=objectInfluences[i]}influences.sort(absNumericalSort);for(let i=0;i<8;i++)i<length&&influences[i][1]?(workInfluences[i][0]=influences[i][0],workInfluences[i][1]=influences[i][1]):(workInfluences[i][0]=Number.MAX_SAFE_INTEGER,workInfluences[i][1]=0);workInfluences.sort(numericalSort);let morphTargets=geometry.morphAttributes.position,morphNormals=geometry.morphAttributes.normal,morphInfluencesSum=0;for(let i=0;i<8;i++){let influence=workInfluences[i],index=influence[0],value=influence[1];index!==Number.MAX_SAFE_INTEGER&&value?(morphTargets&&geometry.getAttribute("morphTarget"+i)!==morphTargets[index]&&geometry.setAttribute("morphTarget"+i,morphTargets[index]),morphNormals&&geometry.getAttribute("morphNormal"+i)!==morphNormals[index]&&geometry.setAttribute("morphNormal"+i,morphNormals[index]),morphInfluences[i]=value,morphInfluencesSum+=value):(morphTargets&&geometry.hasAttribute("morphTarget"+i)===!0&&geometry.deleteAttribute("morphTarget"+i),morphNormals&&geometry.hasAttribute("morphNormal"+i)===!0&&geometry.deleteAttribute("morphNormal"+i),morphInfluences[i]=0)}let morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,"morphTargetBaseInfluence",morphBaseInfluence),program.getUniforms().setValue(gl,"morphTargetInfluences",morphInfluences)}}return{update}}function WebGLObjects(gl,geometries,attributes,info){let updateMap=new WeakMap;function update(object){let frame=info.render.frame,geometry=object.geometry,buffergeometry=geometries.get(object,geometry);return updateMap.get(buffergeometry)!==frame&&(geometries.update(buffergeometry),updateMap.set(buffergeometry,frame)),object.isInstancedMesh&&(object.hasEventListener("dispose",onInstancedMeshDispose)===!1&&object.addEventListener("dispose",onInstancedMeshDispose),attributes.update(object.instanceMatrix,34962),object.instanceColor!==null&&attributes.update(object.instanceColor,34962)),buffergeometry}function dispose(){updateMap=new WeakMap}function onInstancedMeshDispose(event){let instancedMesh=event.target;instancedMesh.removeEventListener("dispose",onInstancedMeshDispose),attributes.remove(instancedMesh.instanceMatrix),instancedMesh.instanceColor!==null&&attributes.remove(instancedMesh.instanceColor)}return{update,dispose}}var emptyTexture=new Texture,emptyArrayTexture=new DataArrayTexture,empty3dTexture=new Data3DTexture,emptyCubeTexture=new CubeTexture,arrayCacheF32=[],arrayCacheI32=[],mat4array=new Float32Array(16),mat3array=new Float32Array(9),mat2array=new Float32Array(4);function flatten(array,nBlocks,blockSize){let firstElem=array[0];if(firstElem<=0||firstElem>0)return array;let n=nBlocks*blockSize,r=arrayCacheF32[n];if(r===void 0&&(r=new Float32Array(n),arrayCacheF32[n]=r),nBlocks!==0){firstElem.toArray(r,0);for(let i=1,offset=0;i!==nBlocks;++i)offset+=blockSize,array[i].toArray(r,offset)}return r}function arraysEqual(a,b){if(a.length!==b.length)return!1;for(let i=0,l=a.length;i<l;i++)if(a[i]!==b[i])return!1;return!0}function copyArray(a,b){for(let i=0,l=b.length;i<l;i++)a[i]=b[i]}function allocTexUnits(textures,n){let r=arrayCacheI32[n];r===void 0&&(r=new Int32Array(n),arrayCacheI32[n]=r);for(let i=0;i!==n;++i)r[i]=textures.allocateTextureUnit();return r}function setValueV1f(gl,v){let cache=this.cache;cache[0]!==v&&(gl.uniform1f(this.addr,v),cache[0]=v)}function setValueV2f(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y)&&(gl.uniform2f(this.addr,v.x,v.y),cache[0]=v.x,cache[1]=v.y);else{if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v),copyArray(cache,v)}}function setValueV3f(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z)&&(gl.uniform3f(this.addr,v.x,v.y,v.z),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z);else if(v.r!==void 0)(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b)&&(gl.uniform3f(this.addr,v.r,v.g,v.b),cache[0]=v.r,cache[1]=v.g,cache[2]=v.b);else{if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v),copyArray(cache,v)}}function setValueV4f(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w)&&(gl.uniform4f(this.addr,v.x,v.y,v.z,v.w),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z,cache[3]=v.w);else{if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v),copyArray(cache,v)}}function setValueM2(gl,v){let cache=this.cache,elements=v.elements;if(elements===void 0){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,!1,v),copyArray(cache,v)}else{if(arraysEqual(cache,elements))return;mat2array.set(elements),gl.uniformMatrix2fv(this.addr,!1,mat2array),copyArray(cache,elements)}}function setValueM3(gl,v){let cache=this.cache,elements=v.elements;if(elements===void 0){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,!1,v),copyArray(cache,v)}else{if(arraysEqual(cache,elements))return;mat3array.set(elements),gl.uniformMatrix3fv(this.addr,!1,mat3array),copyArray(cache,elements)}}function setValueM4(gl,v){let cache=this.cache,elements=v.elements;if(elements===void 0){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,!1,v),copyArray(cache,v)}else{if(arraysEqual(cache,elements))return;mat4array.set(elements),gl.uniformMatrix4fv(this.addr,!1,mat4array),copyArray(cache,elements)}}function setValueV1i(gl,v){let cache=this.cache;cache[0]!==v&&(gl.uniform1i(this.addr,v),cache[0]=v)}function setValueV2i(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y)&&(gl.uniform2i(this.addr,v.x,v.y),cache[0]=v.x,cache[1]=v.y);else{if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v),copyArray(cache,v)}}function setValueV3i(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z)&&(gl.uniform3i(this.addr,v.x,v.y,v.z),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z);else{if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v),copyArray(cache,v)}}function setValueV4i(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w)&&(gl.uniform4i(this.addr,v.x,v.y,v.z,v.w),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z,cache[3]=v.w);else{if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v),copyArray(cache,v)}}function setValueV1ui(gl,v){let cache=this.cache;cache[0]!==v&&(gl.uniform1ui(this.addr,v),cache[0]=v)}function setValueV2ui(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y)&&(gl.uniform2ui(this.addr,v.x,v.y),cache[0]=v.x,cache[1]=v.y);else{if(arraysEqual(cache,v))return;gl.uniform2uiv(this.addr,v),copyArray(cache,v)}}function setValueV3ui(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z)&&(gl.uniform3ui(this.addr,v.x,v.y,v.z),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z);else{if(arraysEqual(cache,v))return;gl.uniform3uiv(this.addr,v),copyArray(cache,v)}}function setValueV4ui(gl,v){let cache=this.cache;if(v.x!==void 0)(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w)&&(gl.uniform4ui(this.addr,v.x,v.y,v.z,v.w),cache[0]=v.x,cache[1]=v.y,cache[2]=v.z,cache[3]=v.w);else{if(arraysEqual(cache,v))return;gl.uniform4uiv(this.addr,v),copyArray(cache,v)}}function setValueT1(gl,v,textures){let cache=this.cache,unit=textures.allocateTextureUnit();cache[0]!==unit&&(gl.uniform1i(this.addr,unit),cache[0]=unit),textures.setTexture2D(v||emptyTexture,unit)}function setValueT3D1(gl,v,textures){let cache=this.cache,unit=textures.allocateTextureUnit();cache[0]!==unit&&(gl.uniform1i(this.addr,unit),cache[0]=unit),textures.setTexture3D(v||empty3dTexture,unit)}function setValueT6(gl,v,textures){let cache=this.cache,unit=textures.allocateTextureUnit();cache[0]!==unit&&(gl.uniform1i(this.addr,unit),cache[0]=unit),textures.setTextureCube(v||emptyCubeTexture,unit)}function setValueT2DArray1(gl,v,textures){let cache=this.cache,unit=textures.allocateTextureUnit();cache[0]!==unit&&(gl.uniform1i(this.addr,unit),cache[0]=unit),textures.setTexture2DArray(v||emptyArrayTexture,unit)}function getSingularSetter(type){switch(type){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 36294:return setValueV2ui;case 36295:return setValueV3ui;case 36296:return setValueV4ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(gl,v){gl.uniform1fv(this.addr,v)}function setValueV2fArray(gl,v){let data=flatten(v,this.size,2);gl.uniform2fv(this.addr,data)}function setValueV3fArray(gl,v){let data=flatten(v,this.size,3);gl.uniform3fv(this.addr,data)}function setValueV4fArray(gl,v){let data=flatten(v,this.size,4);gl.uniform4fv(this.addr,data)}function setValueM2Array(gl,v){let data=flatten(v,this.size,4);gl.uniformMatrix2fv(this.addr,!1,data)}function setValueM3Array(gl,v){let data=flatten(v,this.size,9);gl.uniformMatrix3fv(this.addr,!1,data)}function setValueM4Array(gl,v){let data=flatten(v,this.size,16);gl.uniformMatrix4fv(this.addr,!1,data)}function setValueV1iArray(gl,v){gl.uniform1iv(this.addr,v)}function setValueV2iArray(gl,v){gl.uniform2iv(this.addr,v)}function setValueV3iArray(gl,v){gl.uniform3iv(this.addr,v)}function setValueV4iArray(gl,v){gl.uniform4iv(this.addr,v)}function setValueV1uiArray(gl,v){gl.uniform1uiv(this.addr,v)}function setValueV2uiArray(gl,v){gl.uniform2uiv(this.addr,v)}function setValueV3uiArray(gl,v){gl.uniform3uiv(this.addr,v)}function setValueV4uiArray(gl,v){gl.uniform4uiv(this.addr,v)}function setValueT1Array(gl,v,textures){let cache=this.cache,n=v.length,units=allocTexUnits(textures,n);arraysEqual(cache,units)||(gl.uniform1iv(this.addr,units),copyArray(cache,units));for(let i=0;i!==n;++i)textures.setTexture2D(v[i]||emptyTexture,units[i])}function setValueT3DArray(gl,v,textures){let cache=this.cache,n=v.length,units=allocTexUnits(textures,n);arraysEqual(cache,units)||(gl.uniform1iv(this.addr,units),copyArray(cache,units));for(let i=0;i!==n;++i)textures.setTexture3D(v[i]||empty3dTexture,units[i])}function setValueT6Array(gl,v,textures){let cache=this.cache,n=v.length,units=allocTexUnits(textures,n);arraysEqual(cache,units)||(gl.uniform1iv(this.addr,units),copyArray(cache,units));for(let i=0;i!==n;++i)textures.setTextureCube(v[i]||emptyCubeTexture,units[i])}function setValueT2DArrayArray(gl,v,textures){let cache=this.cache,n=v.length,units=allocTexUnits(textures,n);arraysEqual(cache,units)||(gl.uniform1iv(this.addr,units),copyArray(cache,units));for(let i=0;i!==n;++i)textures.setTexture2DArray(v[i]||emptyArrayTexture,units[i])}function getPureArraySetter(type){switch(type){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 5125:return setValueV1uiArray;case 36294:return setValueV2uiArray;case 36295:return setValueV3uiArray;case 36296:return setValueV4uiArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35679:case 36299:case 36307:return setValueT3DArray;case 35680:case 36300:case 36308:case 36293:return setValueT6Array;case 36289:case 36303:case 36311:case 36292:return setValueT2DArrayArray}}var SingleUniform=class{constructor(id2,activeInfo,addr){this.id=id2,this.addr=addr,this.cache=[],this.setValue=getSingularSetter(activeInfo.type)}},PureArrayUniform=class{constructor(id2,activeInfo,addr){this.id=id2,this.addr=addr,this.cache=[],this.size=activeInfo.size,this.setValue=getPureArraySetter(activeInfo.type)}},StructuredUniform=class{constructor(id2){this.id=id2,this.seq=[],this.map={}}setValue(gl,value,textures){let seq=this.seq;for(let i=0,n=seq.length;i!==n;++i){let u=seq[i];u.setValue(gl,value[u.id],textures)}}},RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(container,uniformObject){container.seq.push(uniformObject),container.map[uniformObject.id]=uniformObject}function parseUniform(activeInfo,addr,container){let path=activeInfo.name,pathLength=path.length;for(RePathPart.lastIndex=0;;){let match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex,id2=match[1],idIsIndex=match[2]==="]",subscript=match[3];if(idIsIndex&&(id2=id2|0),subscript===void 0||subscript==="["&&matchEnd+2===pathLength){addUniform(container,subscript===void 0?new SingleUniform(id2,activeInfo,addr):new PureArrayUniform(id2,activeInfo,addr));break}else{let next=container.map[id2];next===void 0&&(next=new StructuredUniform(id2),addUniform(container,next)),container=next}}}var WebGLUniforms=class{constructor(gl,program){this.seq=[],this.map={};let n=gl.getProgramParameter(program,35718);for(let i=0;i<n;++i){let info=gl.getActiveUniform(program,i),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this)}}setValue(gl,name,value,textures){let u=this.map[name];u!==void 0&&u.setValue(gl,value,textures)}setOptional(gl,object,name){let v=object[name];v!==void 0&&this.setValue(gl,name,v)}static upload(gl,seq,values,textures){for(let i=0,n=seq.length;i!==n;++i){let u=seq[i],v=values[u.id];v.needsUpdate!==!1&&u.setValue(gl,v.value,textures)}}static seqWithValue(seq,values){let r=[];for(let i=0,n=seq.length;i!==n;++i){let u=seq[i];u.id in values&&r.push(u)}return r}};function WebGLShader(gl,type,string){let shader=gl.createShader(type);return gl.shaderSource(shader,string),gl.compileShader(shader),shader}var programIdCount=0;function handleSource(string,errorLine){let lines=string.split(`
`),lines2=[],from=Math.max(errorLine-6,0),to=Math.min(errorLine+6,lines.length);for(let i=from;i<to;i++){let line2=i+1;lines2.push(`${line2===errorLine?">":" "} ${line2}: ${lines[i]}`)}return lines2.join(`
`)}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",encoding),["Linear","( value )"]}}function getShaderErrors(gl,shader,type){let status=gl.getShaderParameter(shader,35713),errors=gl.getShaderInfoLog(shader).trim();if(status&&errors==="")return"";let errorMatches=/ERROR: 0:(\d+)/.exec(errors);if(errorMatches){let errorLine=parseInt(errorMatches[1]);return type.toUpperCase()+`

`+errors+`

`+handleSource(gl.getShaderSource(shader),errorLine)}else return errors}function getTexelEncodingFunction(functionName,encoding){let components=getEncodingComponents(encoding);return"vec4 "+functionName+"( vec4 value ) { return LinearTo"+components[0]+components[1]+"; }"}function getToneMappingFunction(functionName,toneMapping){let toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName="Linear";break;case ReinhardToneMapping:toneMappingName="Reinhard";break;case CineonToneMapping:toneMappingName="OptimizedCineon";break;case ACESFilmicToneMapping:toneMappingName="ACESFilmic";break;case CustomToneMapping:toneMappingName="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",toneMapping),toneMappingName="Linear"}return"vec3 "+functionName+"( vec3 color ) { return "+toneMappingName+"ToneMapping( color ); }"}function generateExtensions(parameters){return[parameters.extensionDerivatives||!!parameters.envMapCubeUVHeight||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||parameters.flatShading||parameters.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(parameters.extensionShaderTextureLOD||parameters.envMap||parameters.transmission)&&parameters.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(filterEmptyLine).join(`
`)}function generateDefines(defines){let chunks=[];for(let name in defines){let value=defines[name];value!==!1&&chunks.push("#define "+name+" "+value)}return chunks.join(`
`)}function fetchAttributeLocations(gl,program){let attributes={},n=gl.getProgramParameter(program,35721);for(let i=0;i<n;i++){let info=gl.getActiveAttrib(program,i),name=info.name,locationSize=1;info.type===35674&&(locationSize=2),info.type===35675&&(locationSize=3),info.type===35676&&(locationSize=4),attributes[name]={type:info.type,location:gl.getAttribLocation(program,name),locationSize}}return attributes}function filterEmptyLine(string){return string!==""}function replaceLightNums(string,parameters){let numSpotLightCoords=parameters.numSpotLightShadows+parameters.numSpotLightMaps-parameters.numSpotLightShadowsWithMaps;return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows)}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection)}var includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(string){return string.replace(includePattern,includeReplacer)}function includeReplacer(match,include){let string=ShaderChunk[include];if(string===void 0)throw new Error("Can not resolve #include <"+include+">");return resolveIncludes(string)}var unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(string){return string.replace(unrollLoopPattern,loopReplacer)}function loopReplacer(match,start,end,snippet){let string="";for(let i=parseInt(start);i<parseInt(end);i++)string+=snippet.replace(/\[\s*i\s*\]/g,"[ "+i+" ]").replace(/UNROLLED_LOOP_INDEX/g,i);return string}function generatePrecision(parameters){let precisionstring="precision "+parameters.precision+` float;
precision `+parameters.precision+" int;";return parameters.precision==="highp"?precisionstring+=`
#define HIGH_PRECISION`:parameters.precision==="mediump"?precisionstring+=`
#define MEDIUM_PRECISION`:parameters.precision==="lowp"&&(precisionstring+=`
#define LOW_PRECISION`),precisionstring}function generateShadowMapTypeDefine(parameters){let shadowMapTypeDefine="SHADOWMAP_TYPE_BASIC";return parameters.shadowMapType===PCFShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF":parameters.shadowMapType===PCFSoftShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF_SOFT":parameters.shadowMapType===VSMShadowMap&&(shadowMapTypeDefine="SHADOWMAP_TYPE_VSM"),shadowMapTypeDefine}function generateEnvMapTypeDefine(parameters){let envMapTypeDefine="ENVMAP_TYPE_CUBE";if(parameters.envMap)switch(parameters.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE_UV";break}return envMapTypeDefine}function generateEnvMapModeDefine(parameters){let envMapModeDefine="ENVMAP_MODE_REFLECTION";if(parameters.envMap)switch(parameters.envMapMode){case CubeRefractionMapping:envMapModeDefine="ENVMAP_MODE_REFRACTION";break}return envMapModeDefine}function generateEnvMapBlendingDefine(parameters){let envMapBlendingDefine="ENVMAP_BLENDING_NONE";if(parameters.envMap)switch(parameters.combine){case MultiplyOperation:envMapBlendingDefine="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:envMapBlendingDefine="ENVMAP_BLENDING_MIX";break;case AddOperation:envMapBlendingDefine="ENVMAP_BLENDING_ADD";break}return envMapBlendingDefine}function generateCubeUVSize(parameters){let imageHeight=parameters.envMapCubeUVHeight;if(imageHeight===null)return null;let maxMip=Math.log2(imageHeight)-2,texelHeight=1/imageHeight;return{texelWidth:1/(3*Math.max(Math.pow(2,maxMip),7*16)),texelHeight,maxMip}}function WebGLProgram(renderer,cacheKey,parameters,bindingStates){let gl=renderer.getContext(),defines=parameters.defines,vertexShader2=parameters.vertexShader,fragmentShader2=parameters.fragmentShader,shadowMapTypeDefine=generateShadowMapTypeDefine(parameters),envMapTypeDefine=generateEnvMapTypeDefine(parameters),envMapModeDefine=generateEnvMapModeDefine(parameters),envMapBlendingDefine=generateEnvMapBlendingDefine(parameters),envMapCubeUVSize=generateCubeUVSize(parameters),customExtensions=parameters.isWebGL2?"":generateExtensions(parameters),customDefines=generateDefines(defines),program=gl.createProgram(),prefixVertex,prefixFragment,versionString=parameters.glslVersion?"#version "+parameters.glslVersion+`
`:"";parameters.isRawShaderMaterial?(prefixVertex=[customDefines].filter(filterEmptyLine).join(`
`),prefixVertex.length>0&&(prefixVertex+=`
`),prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join(`
`),prefixFragment.length>0&&(prefixFragment+=`
`)):(prefixVertex=[generatePrecision(parameters),"#define SHADER_NAME "+parameters.shaderName,customDefines,parameters.instancing?"#define USE_INSTANCING":"",parameters.instancingColor?"#define USE_INSTANCING_COLOR":"",parameters.supportsVertexTextures?"#define VERTEX_TEXTURES":"",parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp2?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.normalMap&&parameters.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",parameters.normalMap&&parameters.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",parameters.clearcoatMap?"#define USE_CLEARCOATMAP":"",parameters.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",parameters.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",parameters.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",parameters.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",parameters.displacementMap&&parameters.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",parameters.specularColorMap?"#define USE_SPECULARCOLORMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.transmission?"#define USE_TRANSMISSION":"",parameters.transmissionMap?"#define USE_TRANSMISSIONMAP":"",parameters.thicknessMap?"#define USE_THICKNESSMAP":"",parameters.sheenColorMap?"#define USE_SHEENCOLORMAP":"",parameters.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",parameters.vertexTangents?"#define USE_TANGENT":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.vertexAlphas?"#define USE_COLOR_ALPHA":"",parameters.vertexUvs?"#define USE_UV":"",parameters.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.skinning?"#define USE_SKINNING":"",parameters.morphTargets?"#define USE_MORPHTARGETS":"",parameters.morphNormals&&parameters.flatShading===!1?"#define USE_MORPHNORMALS":"",parameters.morphColors&&parameters.isWebGL2?"#define USE_MORPHCOLORS":"",parameters.morphTargetsCount>0&&parameters.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",parameters.morphTargetsCount>0&&parameters.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+parameters.morphTextureStride:"",parameters.morphTargetsCount>0&&parameters.isWebGL2?"#define MORPHTARGETS_COUNT "+parameters.morphTargetsCount:"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"",parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.sizeAttenuation?"#define USE_SIZEATTENUATION":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(filterEmptyLine).join(`
`),prefixFragment=[customExtensions,generatePrecision(parameters),"#define SHADER_NAME "+parameters.shaderName,customDefines,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp2?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.matcap?"#define USE_MATCAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapTypeDefine:"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.envMap?"#define "+envMapBlendingDefine:"",envMapCubeUVSize?"#define CUBEUV_TEXEL_WIDTH "+envMapCubeUVSize.texelWidth:"",envMapCubeUVSize?"#define CUBEUV_TEXEL_HEIGHT "+envMapCubeUVSize.texelHeight:"",envMapCubeUVSize?"#define CUBEUV_MAX_MIP "+envMapCubeUVSize.maxMip+".0":"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.normalMap&&parameters.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",parameters.normalMap&&parameters.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",parameters.clearcoat?"#define USE_CLEARCOAT":"",parameters.clearcoatMap?"#define USE_CLEARCOATMAP":"",parameters.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",parameters.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",parameters.iridescence?"#define USE_IRIDESCENCE":"",parameters.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",parameters.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",parameters.specularColorMap?"#define USE_SPECULARCOLORMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.alphaTest?"#define USE_ALPHATEST":"",parameters.sheen?"#define USE_SHEEN":"",parameters.sheenColorMap?"#define USE_SHEENCOLORMAP":"",parameters.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",parameters.transmission?"#define USE_TRANSMISSION":"",parameters.transmissionMap?"#define USE_TRANSMISSIONMAP":"",parameters.thicknessMap?"#define USE_THICKNESSMAP":"",parameters.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",parameters.vertexTangents?"#define USE_TANGENT":"",parameters.vertexColors||parameters.instancingColor?"#define USE_COLOR":"",parameters.vertexAlphas?"#define USE_COLOR_ALPHA":"",parameters.vertexUvs?"#define USE_UV":"",parameters.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",parameters.gradientMap?"#define USE_GRADIENTMAP":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"",parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",parameters.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",parameters.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",parameters.toneMapping!==NoToneMapping?ShaderChunk.tonemapping_pars_fragment:"",parameters.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",parameters.toneMapping):"",parameters.dithering?"#define DITHERING":"",parameters.opaque?"#define OPAQUE":"",ShaderChunk.encodings_pars_fragment,getTexelEncodingFunction("linearToOutputTexel",parameters.outputEncoding),parameters.useDepthPacking?"#define DEPTH_PACKING "+parameters.depthPacking:"",`
`].filter(filterEmptyLine).join(`
`)),vertexShader2=resolveIncludes(vertexShader2),vertexShader2=replaceLightNums(vertexShader2,parameters),vertexShader2=replaceClippingPlaneNums(vertexShader2,parameters),fragmentShader2=resolveIncludes(fragmentShader2),fragmentShader2=replaceLightNums(fragmentShader2,parameters),fragmentShader2=replaceClippingPlaneNums(fragmentShader2,parameters),vertexShader2=unrollLoops(vertexShader2),fragmentShader2=unrollLoops(fragmentShader2),parameters.isWebGL2&&parameters.isRawShaderMaterial!==!0&&(versionString=`#version 300 es
`,prefixVertex=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+prefixVertex,prefixFragment=["#define varying in",parameters.glslVersion===GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",parameters.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+prefixFragment);let vertexGlsl=versionString+prefixVertex+vertexShader2,fragmentGlsl=versionString+prefixFragment+fragmentShader2,glVertexShader=WebGLShader(gl,35633,vertexGlsl),glFragmentShader=WebGLShader(gl,35632,fragmentGlsl);if(gl.attachShader(program,glVertexShader),gl.attachShader(program,glFragmentShader),parameters.index0AttributeName!==void 0?gl.bindAttribLocation(program,0,parameters.index0AttributeName):parameters.morphTargets===!0&&gl.bindAttribLocation(program,0,"position"),gl.linkProgram(program),renderer.debug.checkShaderErrors){let programLog=gl.getProgramInfoLog(program).trim(),vertexLog=gl.getShaderInfoLog(glVertexShader).trim(),fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim(),runnable=!0,haveDiagnostics=!0;if(gl.getProgramParameter(program,35714)===!1){runnable=!1;let vertexErrors=getShaderErrors(gl,glVertexShader,"vertex"),fragmentErrors=getShaderErrors(gl,glFragmentShader,"fragment");console.error("THREE.WebGLProgram: Shader Error "+gl.getError()+" - VALIDATE_STATUS "+gl.getProgramParameter(program,35715)+`

Program Info Log: `+programLog+`
`+vertexErrors+`
`+fragmentErrors)}else programLog!==""?console.warn("THREE.WebGLProgram: Program Info Log:",programLog):(vertexLog===""||fragmentLog==="")&&(haveDiagnostics=!1);haveDiagnostics&&(this.diagnostics={runnable,programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}})}gl.deleteShader(glVertexShader),gl.deleteShader(glFragmentShader);let cachedUniforms;this.getUniforms=function(){return cachedUniforms===void 0&&(cachedUniforms=new WebGLUniforms(gl,program)),cachedUniforms};let cachedAttributes;return this.getAttributes=function(){return cachedAttributes===void 0&&(cachedAttributes=fetchAttributeLocations(gl,program)),cachedAttributes},this.destroy=function(){bindingStates.releaseStatesOfProgram(this),gl.deleteProgram(program),this.program=void 0},this.name=parameters.shaderName,this.id=programIdCount++,this.cacheKey=cacheKey,this.usedTimes=1,this.program=program,this.vertexShader=glVertexShader,this.fragmentShader=glFragmentShader,this}var _id=0,WebGLShaderCache=class{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(material){let vertexShader2=material.vertexShader,fragmentShader2=material.fragmentShader,vertexShaderStage=this._getShaderStage(vertexShader2),fragmentShaderStage=this._getShaderStage(fragmentShader2),materialShaders=this._getShaderCacheForMaterial(material);return materialShaders.has(vertexShaderStage)===!1&&(materialShaders.add(vertexShaderStage),vertexShaderStage.usedTimes++),materialShaders.has(fragmentShaderStage)===!1&&(materialShaders.add(fragmentShaderStage),fragmentShaderStage.usedTimes++),this}remove(material){let materialShaders=this.materialCache.get(material);for(let shaderStage of materialShaders)shaderStage.usedTimes--,shaderStage.usedTimes===0&&this.shaderCache.delete(shaderStage.code);return this.materialCache.delete(material),this}getVertexShaderID(material){return this._getShaderStage(material.vertexShader).id}getFragmentShaderID(material){return this._getShaderStage(material.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(material){let cache=this.materialCache,set=cache.get(material);return set===void 0&&(set=new Set,cache.set(material,set)),set}_getShaderStage(code){let cache=this.shaderCache,stage=cache.get(code);return stage===void 0&&(stage=new WebGLShaderStage(code),cache.set(code,stage)),stage}},WebGLShaderStage=class{constructor(code){this.id=_id++,this.code=code,this.usedTimes=0}};function WebGLPrograms(renderer,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping){let _programLayers=new Layers,_customShaders=new WebGLShaderCache,programs=[],isWebGL2=capabilities.isWebGL2,logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer,vertexTextures=capabilities.vertexTextures,precision=capabilities.precision,shaderIDs={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function getParameters(material,lights,shadows,scene,object){let fog=scene.fog,geometry=object.geometry,environment=material.isMeshStandardMaterial?scene.environment:null,envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment),envMapCubeUVHeight=!!envMap&&envMap.mapping===CubeUVReflectionMapping?envMap.image.height:null,shaderID=shaderIDs[material.type];material.precision!==null&&(precision=capabilities.getMaxPrecision(material.precision),precision!==material.precision&&console.warn("THREE.WebGLProgram.getParameters:",material.precision,"not supported, using",precision,"instead."));let morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color,morphTargetsCount=morphAttribute!==void 0?morphAttribute.length:0,morphTextureStride=0;geometry.morphAttributes.position!==void 0&&(morphTextureStride=1),geometry.morphAttributes.normal!==void 0&&(morphTextureStride=2),geometry.morphAttributes.color!==void 0&&(morphTextureStride=3);let vertexShader2,fragmentShader2,customVertexShaderID,customFragmentShaderID;if(shaderID){let shader=ShaderLib[shaderID];vertexShader2=shader.vertexShader,fragmentShader2=shader.fragmentShader}else vertexShader2=material.vertexShader,fragmentShader2=material.fragmentShader,_customShaders.update(material),customVertexShaderID=_customShaders.getVertexShaderID(material),customFragmentShaderID=_customShaders.getFragmentShaderID(material);let currentRenderTarget=renderer.getRenderTarget(),useAlphaTest=material.alphaTest>0,useClearcoat=material.clearcoat>0,useIridescence=material.iridescence>0;return{isWebGL2,shaderID,shaderName:material.type,vertexShader:vertexShader2,fragmentShader:fragmentShader2,defines:material.defines,customVertexShaderID,customFragmentShaderID,isRawShaderMaterial:material.isRawShaderMaterial===!0,glslVersion:material.glslVersion,precision,instancing:object.isInstancedMesh===!0,instancingColor:object.isInstancedMesh===!0&&object.instanceColor!==null,supportsVertexTextures:vertexTextures,outputEncoding:currentRenderTarget===null?renderer.outputEncoding:currentRenderTarget.isXRRenderTarget===!0?currentRenderTarget.texture.encoding:LinearEncoding,map:!!material.map,matcap:!!material.matcap,envMap:!!envMap,envMapMode:envMap&&envMap.mapping,envMapCubeUVHeight,lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===TangentSpaceNormalMap,decodeVideoTexture:!!material.map&&material.map.isVideoTexture===!0&&material.map.encoding===sRGBEncoding,clearcoat:useClearcoat,clearcoatMap:useClearcoat&&!!material.clearcoatMap,clearcoatRoughnessMap:useClearcoat&&!!material.clearcoatRoughnessMap,clearcoatNormalMap:useClearcoat&&!!material.clearcoatNormalMap,iridescence:useIridescence,iridescenceMap:useIridescence&&!!material.iridescenceMap,iridescenceThicknessMap:useIridescence&&!!material.iridescenceThicknessMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,specularIntensityMap:!!material.specularIntensityMap,specularColorMap:!!material.specularColorMap,opaque:material.transparent===!1&&material.blending===NormalBlending,alphaMap:!!material.alphaMap,alphaTest:useAlphaTest,gradientMap:!!material.gradientMap,sheen:material.sheen>0,sheenColorMap:!!material.sheenColorMap,sheenRoughnessMap:!!material.sheenRoughnessMap,transmission:material.transmission>0,transmissionMap:!!material.transmissionMap,thicknessMap:!!material.thicknessMap,combine:material.combine,vertexTangents:!!material.normalMap&&!!geometry.attributes.tangent,vertexColors:material.vertexColors,vertexAlphas:material.vertexColors===!0&&!!geometry.attributes.color&&geometry.attributes.color.itemSize===4,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatMap||!!material.clearcoatRoughnessMap||!!material.clearcoatNormalMap||!!material.iridescenceMap||!!material.iridescenceThicknessMap||!!material.displacementMap||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||!!material.sheenColorMap||!!material.sheenRoughnessMap,uvsVertexOnly:!(!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap||!!material.iridescenceMap||!!material.iridescenceThicknessMap||material.transmission>0||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||material.sheen>0||!!material.sheenColorMap||!!material.sheenRoughnessMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog===!0,fogExp2:fog&&fog.isFogExp2,flatShading:!!material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer,skinning:object.isSkinnedMesh===!0,morphTargets:geometry.morphAttributes.position!==void 0,morphNormals:geometry.morphAttributes.normal!==void 0,morphColors:geometry.morphAttributes.color!==void 0,morphTargetsCount,morphTextureStride,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numSpotLightMaps:lights.spotLightMap.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numSpotLightShadowsWithMaps:lights.numSpotLightShadowsWithMaps,numClippingPlanes:clipping.numPlanes,numClipIntersection:clipping.numIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,useDepthPacking:!!material.depthPacking,depthPacking:material.depthPacking||0,index0AttributeName:material.index0AttributeName,extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.fragDepth,extensionDrawBuffers:material.extensions&&material.extensions.drawBuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.has("EXT_frag_depth"),rendererExtensionDrawBuffers:isWebGL2||extensions.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:isWebGL2||extensions.has("EXT_shader_texture_lod"),customProgramCacheKey:material.customProgramCacheKey()}}function getProgramCacheKey(parameters){let array=[];if(parameters.shaderID?array.push(parameters.shaderID):(array.push(parameters.customVertexShaderID),array.push(parameters.customFragmentShaderID)),parameters.defines!==void 0)for(let name in parameters.defines)array.push(name),array.push(parameters.defines[name]);return parameters.isRawShaderMaterial===!1&&(getProgramCacheKeyParameters(array,parameters),getProgramCacheKeyBooleans(array,parameters),array.push(renderer.outputEncoding)),array.push(parameters.customProgramCacheKey),array.join()}function getProgramCacheKeyParameters(array,parameters){array.push(parameters.precision),array.push(parameters.outputEncoding),array.push(parameters.envMapMode),array.push(parameters.envMapCubeUVHeight),array.push(parameters.combine),array.push(parameters.vertexUvs),array.push(parameters.fogExp2),array.push(parameters.sizeAttenuation),array.push(parameters.morphTargetsCount),array.push(parameters.morphAttributeCount),array.push(parameters.numDirLights),array.push(parameters.numPointLights),array.push(parameters.numSpotLights),array.push(parameters.numSpotLightMaps),array.push(parameters.numHemiLights),array.push(parameters.numRectAreaLights),array.push(parameters.numDirLightShadows),array.push(parameters.numPointLightShadows),array.push(parameters.numSpotLightShadows),array.push(parameters.numSpotLightShadowsWithMaps),array.push(parameters.shadowMapType),array.push(parameters.toneMapping),array.push(parameters.numClippingPlanes),array.push(parameters.numClipIntersection),array.push(parameters.depthPacking)}function getProgramCacheKeyBooleans(array,parameters){_programLayers.disableAll(),parameters.isWebGL2&&_programLayers.enable(0),parameters.supportsVertexTextures&&_programLayers.enable(1),parameters.instancing&&_programLayers.enable(2),parameters.instancingColor&&_programLayers.enable(3),parameters.map&&_programLayers.enable(4),parameters.matcap&&_programLayers.enable(5),parameters.envMap&&_programLayers.enable(6),parameters.lightMap&&_programLayers.enable(7),parameters.aoMap&&_programLayers.enable(8),parameters.emissiveMap&&_programLayers.enable(9),parameters.bumpMap&&_programLayers.enable(10),parameters.normalMap&&_programLayers.enable(11),parameters.objectSpaceNormalMap&&_programLayers.enable(12),parameters.tangentSpaceNormalMap&&_programLayers.enable(13),parameters.clearcoat&&_programLayers.enable(14),parameters.clearcoatMap&&_programLayers.enable(15),parameters.clearcoatRoughnessMap&&_programLayers.enable(16),parameters.clearcoatNormalMap&&_programLayers.enable(17),parameters.iridescence&&_programLayers.enable(18),parameters.iridescenceMap&&_programLayers.enable(19),parameters.iridescenceThicknessMap&&_programLayers.enable(20),parameters.displacementMap&&_programLayers.enable(21),parameters.specularMap&&_programLayers.enable(22),parameters.roughnessMap&&_programLayers.enable(23),parameters.metalnessMap&&_programLayers.enable(24),parameters.gradientMap&&_programLayers.enable(25),parameters.alphaMap&&_programLayers.enable(26),parameters.alphaTest&&_programLayers.enable(27),parameters.vertexColors&&_programLayers.enable(28),parameters.vertexAlphas&&_programLayers.enable(29),parameters.vertexUvs&&_programLayers.enable(30),parameters.vertexTangents&&_programLayers.enable(31),parameters.uvsVertexOnly&&_programLayers.enable(32),array.push(_programLayers.mask),_programLayers.disableAll(),parameters.fog&&_programLayers.enable(0),parameters.useFog&&_programLayers.enable(1),parameters.flatShading&&_programLayers.enable(2),parameters.logarithmicDepthBuffer&&_programLayers.enable(3),parameters.skinning&&_programLayers.enable(4),parameters.morphTargets&&_programLayers.enable(5),parameters.morphNormals&&_programLayers.enable(6),parameters.morphColors&&_programLayers.enable(7),parameters.premultipliedAlpha&&_programLayers.enable(8),parameters.shadowMapEnabled&&_programLayers.enable(9),parameters.physicallyCorrectLights&&_programLayers.enable(10),parameters.doubleSided&&_programLayers.enable(11),parameters.flipSided&&_programLayers.enable(12),parameters.useDepthPacking&&_programLayers.enable(13),parameters.dithering&&_programLayers.enable(14),parameters.specularIntensityMap&&_programLayers.enable(15),parameters.specularColorMap&&_programLayers.enable(16),parameters.transmission&&_programLayers.enable(17),parameters.transmissionMap&&_programLayers.enable(18),parameters.thicknessMap&&_programLayers.enable(19),parameters.sheen&&_programLayers.enable(20),parameters.sheenColorMap&&_programLayers.enable(21),parameters.sheenRoughnessMap&&_programLayers.enable(22),parameters.decodeVideoTexture&&_programLayers.enable(23),parameters.opaque&&_programLayers.enable(24),array.push(_programLayers.mask)}function getUniforms(material){let shaderID=shaderIDs[material.type],uniforms;if(shaderID){let shader=ShaderLib[shaderID];uniforms=UniformsUtils.clone(shader.uniforms)}else uniforms=material.uniforms;return uniforms}function acquireProgram(parameters,cacheKey){let program;for(let p=0,pl=programs.length;p<pl;p++){let preexistingProgram=programs[p];if(preexistingProgram.cacheKey===cacheKey){program=preexistingProgram,++program.usedTimes;break}}return program===void 0&&(program=new WebGLProgram(renderer,cacheKey,parameters,bindingStates),programs.push(program)),program}function releaseProgram(program){if(--program.usedTimes===0){let i=programs.indexOf(program);programs[i]=programs[programs.length-1],programs.pop(),program.destroy()}}function releaseShaderCache(material){_customShaders.remove(material)}function dispose(){_customShaders.dispose()}return{getParameters,getProgramCacheKey,getUniforms,acquireProgram,releaseProgram,releaseShaderCache,programs,dispose}}function WebGLProperties(){let properties=new WeakMap;function get(object){let map=properties.get(object);return map===void 0&&(map={},properties.set(object,map)),map}function remove2(object){properties.delete(object)}function update(object,key,value){properties.get(object)[key]=value}function dispose(){properties=new WeakMap}return{get,remove:remove2,update,dispose}}function painterSortStable(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function reversePainterSortStable(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function WebGLRenderList(){let renderItems=[],renderItemsIndex=0,opaque=[],transmissive=[],transparent=[];function init(){renderItemsIndex=0,opaque.length=0,transmissive.length=0,transparent.length=0}function getNextRenderItem(object,geometry,material,groupOrder,z,group){let renderItem=renderItems[renderItemsIndex];return renderItem===void 0?(renderItem={id:object.id,object,geometry,material,groupOrder,renderOrder:object.renderOrder,z,group},renderItems[renderItemsIndex]=renderItem):(renderItem.id=object.id,renderItem.object=object,renderItem.geometry=geometry,renderItem.material=material,renderItem.groupOrder=groupOrder,renderItem.renderOrder=object.renderOrder,renderItem.z=z,renderItem.group=group),renderItemsIndex++,renderItem}function push(object,geometry,material,groupOrder,z,group){let renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);material.transmission>0?transmissive.push(renderItem):material.transparent===!0?transparent.push(renderItem):opaque.push(renderItem)}function unshift(object,geometry,material,groupOrder,z,group){let renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);material.transmission>0?transmissive.unshift(renderItem):material.transparent===!0?transparent.unshift(renderItem):opaque.unshift(renderItem)}function sort(customOpaqueSort,customTransparentSort){opaque.length>1&&opaque.sort(customOpaqueSort||painterSortStable),transmissive.length>1&&transmissive.sort(customTransparentSort||reversePainterSortStable),transparent.length>1&&transparent.sort(customTransparentSort||reversePainterSortStable)}function finish(){for(let i=renderItemsIndex,il=renderItems.length;i<il;i++){let renderItem=renderItems[i];if(renderItem.id===null)break;renderItem.id=null,renderItem.object=null,renderItem.geometry=null,renderItem.material=null,renderItem.group=null}}return{opaque,transmissive,transparent,init,push,unshift,finish,sort}}function WebGLRenderLists(){let lists=new WeakMap;function get(scene,renderCallDepth){let listArray=lists.get(scene),list;return listArray===void 0?(list=new WebGLRenderList,lists.set(scene,[list])):renderCallDepth>=listArray.length?(list=new WebGLRenderList,listArray.push(list)):list=listArray[renderCallDepth],list}function dispose(){lists=new WeakMap}return{get,dispose}}function UniformsCache(){let lights={};return{get:function(light){if(lights[light.id]!==void 0)return lights[light.id];let uniforms;switch(light.type){case"DirectionalLight":uniforms={direction:new Vector3,color:new Color};break;case"SpotLight":uniforms={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":uniforms={position:new Vector3,color:new Color,distance:0,decay:0};break;case"HemisphereLight":uniforms={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":uniforms={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3};break}return lights[light.id]=uniforms,uniforms}}}function ShadowUniformsCache(){let lights={};return{get:function(light){if(lights[light.id]!==void 0)return lights[light.id];let uniforms;switch(light.type){case"DirectionalLight":uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}return lights[light.id]=uniforms,uniforms}}}var nextVersion=0;function shadowCastingAndTexturingLightsFirst(lightA,lightB){return(lightB.castShadow?2:0)-(lightA.castShadow?2:0)+(lightB.map?1:0)-(lightA.map?1:0)}function WebGLLights(extensions,capabilities){let cache=new UniformsCache,shadowCache=ShadowUniformsCache(),state={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let i=0;i<9;i++)state.probe.push(new Vector3);let vector3=new Vector3,matrix4=new Matrix4,matrix42=new Matrix4;function setup(lights,physicallyCorrectLights){let r=0,g=0,b=0;for(let i=0;i<9;i++)state.probe[i].set(0,0,0);let directionalLength=0,pointLength=0,spotLength=0,rectAreaLength=0,hemiLength=0,numDirectionalShadows=0,numPointShadows=0,numSpotShadows=0,numSpotMaps=0,numSpotShadowsWithMaps=0;lights.sort(shadowCastingAndTexturingLightsFirst);let scaleFactor=physicallyCorrectLights!==!0?Math.PI:1;for(let i=0,l=lights.length;i<l;i++){let light=lights[i],color=light.color,intensity=light.intensity,distance=light.distance,shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight)r+=color.r*intensity*scaleFactor,g+=color.g*intensity*scaleFactor,b+=color.b*intensity*scaleFactor;else if(light.isLightProbe)for(let j=0;j<9;j++)state.probe[j].addScaledVector(light.sh.coefficients[j],intensity);else if(light.isDirectionalLight){let uniforms=cache.get(light);if(uniforms.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor),light.castShadow){let shadow=light.shadow,shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias,shadowUniforms.shadowNormalBias=shadow.normalBias,shadowUniforms.shadowRadius=shadow.radius,shadowUniforms.shadowMapSize=shadow.mapSize,state.directionalShadow[directionalLength]=shadowUniforms,state.directionalShadowMap[directionalLength]=shadowMap,state.directionalShadowMatrix[directionalLength]=light.shadow.matrix,numDirectionalShadows++}state.directional[directionalLength]=uniforms,directionalLength++}else if(light.isSpotLight){let uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.color.copy(color).multiplyScalar(intensity*scaleFactor),uniforms.distance=distance,uniforms.coneCos=Math.cos(light.angle),uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra)),uniforms.decay=light.decay,state.spot[spotLength]=uniforms;let shadow=light.shadow;if(light.map&&(state.spotLightMap[numSpotMaps]=light.map,numSpotMaps++,shadow.updateMatrices(light),light.castShadow&&numSpotShadowsWithMaps++),state.spotLightMatrix[spotLength]=shadow.matrix,light.castShadow){let shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias,shadowUniforms.shadowNormalBias=shadow.normalBias,shadowUniforms.shadowRadius=shadow.radius,shadowUniforms.shadowMapSize=shadow.mapSize,state.spotShadow[spotLength]=shadowUniforms,state.spotShadowMap[spotLength]=shadowMap,numSpotShadows++}spotLength++}else if(light.isRectAreaLight){let uniforms=cache.get(light);uniforms.color.copy(color).multiplyScalar(intensity),uniforms.halfWidth.set(light.width*.5,0,0),uniforms.halfHeight.set(0,light.height*.5,0),state.rectArea[rectAreaLength]=uniforms,rectAreaLength++}else if(light.isPointLight){let uniforms=cache.get(light);if(uniforms.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor),uniforms.distance=light.distance,uniforms.decay=light.decay,light.castShadow){let shadow=light.shadow,shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias,shadowUniforms.shadowNormalBias=shadow.normalBias,shadowUniforms.shadowRadius=shadow.radius,shadowUniforms.shadowMapSize=shadow.mapSize,shadowUniforms.shadowCameraNear=shadow.camera.near,shadowUniforms.shadowCameraFar=shadow.camera.far,state.pointShadow[pointLength]=shadowUniforms,state.pointShadowMap[pointLength]=shadowMap,state.pointShadowMatrix[pointLength]=light.shadow.matrix,numPointShadows++}state.point[pointLength]=uniforms,pointLength++}else if(light.isHemisphereLight){let uniforms=cache.get(light);uniforms.skyColor.copy(light.color).multiplyScalar(intensity*scaleFactor),uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity*scaleFactor),state.hemi[hemiLength]=uniforms,hemiLength++}}rectAreaLength>0&&(capabilities.isWebGL2||extensions.has("OES_texture_float_linear")===!0?(state.rectAreaLTC1=UniformsLib.LTC_FLOAT_1,state.rectAreaLTC2=UniformsLib.LTC_FLOAT_2):extensions.has("OES_texture_half_float_linear")===!0?(state.rectAreaLTC1=UniformsLib.LTC_HALF_1,state.rectAreaLTC2=UniformsLib.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),state.ambient[0]=r,state.ambient[1]=g,state.ambient[2]=b;let hash=state.hash;(hash.directionalLength!==directionalLength||hash.pointLength!==pointLength||hash.spotLength!==spotLength||hash.rectAreaLength!==rectAreaLength||hash.hemiLength!==hemiLength||hash.numDirectionalShadows!==numDirectionalShadows||hash.numPointShadows!==numPointShadows||hash.numSpotShadows!==numSpotShadows||hash.numSpotMaps!==numSpotMaps)&&(state.directional.length=directionalLength,state.spot.length=spotLength,state.rectArea.length=rectAreaLength,state.point.length=pointLength,state.hemi.length=hemiLength,state.directionalShadow.length=numDirectionalShadows,state.directionalShadowMap.length=numDirectionalShadows,state.pointShadow.length=numPointShadows,state.pointShadowMap.length=numPointShadows,state.spotShadow.length=numSpotShadows,state.spotShadowMap.length=numSpotShadows,state.directionalShadowMatrix.length=numDirectionalShadows,state.pointShadowMatrix.length=numPointShadows,state.spotLightMatrix.length=numSpotShadows+numSpotMaps-numSpotShadowsWithMaps,state.spotLightMap.length=numSpotMaps,state.numSpotLightShadowsWithMaps=numSpotShadowsWithMaps,hash.directionalLength=directionalLength,hash.pointLength=pointLength,hash.spotLength=spotLength,hash.rectAreaLength=rectAreaLength,hash.hemiLength=hemiLength,hash.numDirectionalShadows=numDirectionalShadows,hash.numPointShadows=numPointShadows,hash.numSpotShadows=numSpotShadows,hash.numSpotMaps=numSpotMaps,state.version=nextVersion++)}function setupView(lights,camera){let directionalLength=0,pointLength=0,spotLength=0,rectAreaLength=0,hemiLength=0,viewMatrix=camera.matrixWorldInverse;for(let i=0,l=lights.length;i<l;i++){let light=lights[i];if(light.isDirectionalLight){let uniforms=state.directional[directionalLength];uniforms.direction.setFromMatrixPosition(light.matrixWorld),vector3.setFromMatrixPosition(light.target.matrixWorld),uniforms.direction.sub(vector3),uniforms.direction.transformDirection(viewMatrix),directionalLength++}else if(light.isSpotLight){let uniforms=state.spot[spotLength];uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),uniforms.direction.setFromMatrixPosition(light.matrixWorld),vector3.setFromMatrixPosition(light.target.matrixWorld),uniforms.direction.sub(vector3),uniforms.direction.transformDirection(viewMatrix),spotLength++}else if(light.isRectAreaLight){let uniforms=state.rectArea[rectAreaLength];uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),matrix42.identity(),matrix4.copy(light.matrixWorld),matrix4.premultiply(viewMatrix),matrix42.extractRotation(matrix4),uniforms.halfWidth.set(light.width*.5,0,0),uniforms.halfHeight.set(0,light.height*.5,0),uniforms.halfWidth.applyMatrix4(matrix42),uniforms.halfHeight.applyMatrix4(matrix42),rectAreaLength++}else if(light.isPointLight){let uniforms=state.point[pointLength];uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),pointLength++}else if(light.isHemisphereLight){let uniforms=state.hemi[hemiLength];uniforms.direction.setFromMatrixPosition(light.matrixWorld),uniforms.direction.transformDirection(viewMatrix),hemiLength++}}}return{setup,setupView,state}}function WebGLRenderState(extensions,capabilities){let lights=new WebGLLights(extensions,capabilities),lightsArray=[],shadowsArray=[];function init(){lightsArray.length=0,shadowsArray.length=0}function pushLight(light){lightsArray.push(light)}function pushShadow(shadowLight){shadowsArray.push(shadowLight)}function setupLights(physicallyCorrectLights){lights.setup(lightsArray,physicallyCorrectLights)}function setupLightsView(camera){lights.setupView(lightsArray,camera)}return{init,state:{lightsArray,shadowsArray,lights},setupLights,setupLightsView,pushLight,pushShadow}}function WebGLRenderStates(extensions,capabilities){let renderStates=new WeakMap;function get(scene,renderCallDepth=0){let renderStateArray=renderStates.get(scene),renderState;return renderStateArray===void 0?(renderState=new WebGLRenderState(extensions,capabilities),renderStates.set(scene,[renderState])):renderCallDepth>=renderStateArray.length?(renderState=new WebGLRenderState(extensions,capabilities),renderStateArray.push(renderState)):renderState=renderStateArray[renderCallDepth],renderState}function dispose(){renderStates=new WeakMap}return{get,dispose}}var MeshDepthMaterial=class extends Material{constructor(parameters){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=BasicDepthPacking,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(parameters)}copy(source){return super.copy(source),this.depthPacking=source.depthPacking,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this}},MeshDistanceMaterial=class extends Material{constructor(parameters){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new Vector3,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(parameters)}copy(source){return super.copy(source),this.referencePosition.copy(source.referencePosition),this.nearDistance=source.nearDistance,this.farDistance=source.farDistance,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this}},vertex=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,fragment=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function WebGLShadowMap(_renderer,_objects,_capabilities){let _frustum=new Frustum,_shadowMapSize=new Vector2,_viewportSize=new Vector2,_viewport=new Vector4,_depthMaterial=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),_distanceMaterial=new MeshDistanceMaterial,_materialCache={},_maxTextureSize=_capabilities.maxTextureSize,shadowSide={0:BackSide,1:FrontSide,2:DoubleSide},shadowMaterialVertical=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vertex,fragmentShader:fragment}),shadowMaterialHorizontal=shadowMaterialVertical.clone();shadowMaterialHorizontal.defines.HORIZONTAL_PASS=1;let fullScreenTri=new BufferGeometry;fullScreenTri.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));let fullScreenMesh=new Mesh(fullScreenTri,shadowMaterialVertical),scope=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=PCFShadowMap,this.render=function(lights,scene,camera){if(scope.enabled===!1||scope.autoUpdate===!1&&scope.needsUpdate===!1||lights.length===0)return;let currentRenderTarget=_renderer.getRenderTarget(),activeCubeFace=_renderer.getActiveCubeFace(),activeMipmapLevel=_renderer.getActiveMipmapLevel(),_state=_renderer.state;_state.setBlending(NoBlending),_state.buffers.color.setClear(1,1,1,1),_state.buffers.depth.setTest(!0),_state.setScissorTest(!1);for(let i=0,il=lights.length;i<il;i++){let light=lights[i],shadow=light.shadow;if(shadow===void 0){console.warn("THREE.WebGLShadowMap:",light,"has no shadow.");continue}if(shadow.autoUpdate===!1&&shadow.needsUpdate===!1)continue;_shadowMapSize.copy(shadow.mapSize);let shadowFrameExtents=shadow.getFrameExtents();if(_shadowMapSize.multiply(shadowFrameExtents),_viewportSize.copy(shadow.mapSize),(_shadowMapSize.x>_maxTextureSize||_shadowMapSize.y>_maxTextureSize)&&(_shadowMapSize.x>_maxTextureSize&&(_viewportSize.x=Math.floor(_maxTextureSize/shadowFrameExtents.x),_shadowMapSize.x=_viewportSize.x*shadowFrameExtents.x,shadow.mapSize.x=_viewportSize.x),_shadowMapSize.y>_maxTextureSize&&(_viewportSize.y=Math.floor(_maxTextureSize/shadowFrameExtents.y),_shadowMapSize.y=_viewportSize.y*shadowFrameExtents.y,shadow.mapSize.y=_viewportSize.y)),shadow.map===null){let pars=this.type!==VSMShadowMap?{minFilter:NearestFilter,magFilter:NearestFilter}:{};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars),shadow.map.texture.name=light.name+".shadowMap",shadow.camera.updateProjectionMatrix()}_renderer.setRenderTarget(shadow.map),_renderer.clear();let viewportCount=shadow.getViewportCount();for(let vp=0;vp<viewportCount;vp++){let viewport=shadow.getViewport(vp);_viewport.set(_viewportSize.x*viewport.x,_viewportSize.y*viewport.y,_viewportSize.x*viewport.z,_viewportSize.y*viewport.w),_state.viewport(_viewport),shadow.updateMatrices(light,vp),_frustum=shadow.getFrustum(),renderObject(scene,camera,shadow.camera,light,this.type)}shadow.isPointLightShadow!==!0&&this.type===VSMShadowMap&&VSMPass(shadow,camera),shadow.needsUpdate=!1}scope.needsUpdate=!1,_renderer.setRenderTarget(currentRenderTarget,activeCubeFace,activeMipmapLevel)};function VSMPass(shadow,camera){let geometry=_objects.update(fullScreenMesh);shadowMaterialVertical.defines.VSM_SAMPLES!==shadow.blurSamples&&(shadowMaterialVertical.defines.VSM_SAMPLES=shadow.blurSamples,shadowMaterialHorizontal.defines.VSM_SAMPLES=shadow.blurSamples,shadowMaterialVertical.needsUpdate=!0,shadowMaterialHorizontal.needsUpdate=!0),shadow.mapPass===null&&(shadow.mapPass=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y)),shadowMaterialVertical.uniforms.shadow_pass.value=shadow.map.texture,shadowMaterialVertical.uniforms.resolution.value=shadow.mapSize,shadowMaterialVertical.uniforms.radius.value=shadow.radius,_renderer.setRenderTarget(shadow.mapPass),_renderer.clear(),_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialVertical,fullScreenMesh,null),shadowMaterialHorizontal.uniforms.shadow_pass.value=shadow.mapPass.texture,shadowMaterialHorizontal.uniforms.resolution.value=shadow.mapSize,shadowMaterialHorizontal.uniforms.radius.value=shadow.radius,_renderer.setRenderTarget(shadow.map),_renderer.clear(),_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialHorizontal,fullScreenMesh,null)}function getDepthMaterial(object,material,light,shadowCameraNear,shadowCameraFar,type){let result=null,customMaterial=light.isPointLight===!0?object.customDistanceMaterial:object.customDepthMaterial;if(customMaterial!==void 0?result=customMaterial:result=light.isPointLight===!0?_distanceMaterial:_depthMaterial,_renderer.localClippingEnabled&&material.clipShadows===!0&&Array.isArray(material.clippingPlanes)&&material.clippingPlanes.length!==0||material.displacementMap&&material.displacementScale!==0||material.alphaMap&&material.alphaTest>0||material.map&&material.alphaTest>0){let keyA=result.uuid,keyB=material.uuid,materialsForVariant=_materialCache[keyA];materialsForVariant===void 0&&(materialsForVariant={},_materialCache[keyA]=materialsForVariant);let cachedMaterial=materialsForVariant[keyB];cachedMaterial===void 0&&(cachedMaterial=result.clone(),materialsForVariant[keyB]=cachedMaterial),result=cachedMaterial}return result.visible=material.visible,result.wireframe=material.wireframe,type===VSMShadowMap?result.side=material.shadowSide!==null?material.shadowSide:material.side:result.side=material.shadowSide!==null?material.shadowSide:shadowSide[material.side],result.alphaMap=material.alphaMap,result.alphaTest=material.alphaTest,result.map=material.map,result.clipShadows=material.clipShadows,result.clippingPlanes=material.clippingPlanes,result.clipIntersection=material.clipIntersection,result.displacementMap=material.displacementMap,result.displacementScale=material.displacementScale,result.displacementBias=material.displacementBias,result.wireframeLinewidth=material.wireframeLinewidth,result.linewidth=material.linewidth,light.isPointLight===!0&&result.isMeshDistanceMaterial===!0&&(result.referencePosition.setFromMatrixPosition(light.matrixWorld),result.nearDistance=shadowCameraNear,result.farDistance=shadowCameraFar),result}function renderObject(object,camera,shadowCamera,light,type){if(object.visible===!1)return;if(object.layers.test(camera.layers)&&(object.isMesh||object.isLine||object.isPoints)&&(object.castShadow||object.receiveShadow&&type===VSMShadowMap)&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);let geometry=_objects.update(object),material=object.material;if(Array.isArray(material)){let groups=geometry.groups;for(let k=0,kl=groups.length;k<kl;k++){let group=groups[k],groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){let depthMaterial=getDepthMaterial(object,groupMaterial,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group)}}}else if(material.visible){let depthMaterial=getDepthMaterial(object,material,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,null)}}let children=object.children;for(let i=0,l=children.length;i<l;i++)renderObject(children[i],camera,shadowCamera,light,type)}}function WebGLState(gl,extensions,capabilities){let isWebGL2=capabilities.isWebGL2;function ColorBuffer(){let locked=!1,color=new Vector4,currentColorMask=null,currentColorClear=new Vector4(0,0,0,0);return{setMask:function(colorMask){currentColorMask!==colorMask&&!locked&&(gl.colorMask(colorMask,colorMask,colorMask,colorMask),currentColorMask=colorMask)},setLocked:function(lock){locked=lock},setClear:function(r,g,b,a,premultipliedAlpha){premultipliedAlpha===!0&&(r*=a,g*=a,b*=a),color.set(r,g,b,a),currentColorClear.equals(color)===!1&&(gl.clearColor(r,g,b,a),currentColorClear.copy(color))},reset:function(){locked=!1,currentColorMask=null,currentColorClear.set(-1,0,0,0)}}}function DepthBuffer(){let locked=!1,currentDepthMask=null,currentDepthFunc=null,currentDepthClear=null;return{setTest:function(depthTest){depthTest?enable(2929):disable(2929)},setMask:function(depthMask){currentDepthMask!==depthMask&&!locked&&(gl.depthMask(depthMask),currentDepthMask=depthMask)},setFunc:function(depthFunc){if(currentDepthFunc!==depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(512);break;case AlwaysDepth:gl.depthFunc(519);break;case LessDepth:gl.depthFunc(513);break;case LessEqualDepth:gl.depthFunc(515);break;case EqualDepth:gl.depthFunc(514);break;case GreaterEqualDepth:gl.depthFunc(518);break;case GreaterDepth:gl.depthFunc(516);break;case NotEqualDepth:gl.depthFunc(517);break;default:gl.depthFunc(515)}currentDepthFunc=depthFunc}},setLocked:function(lock){locked=lock},setClear:function(depth){currentDepthClear!==depth&&(gl.clearDepth(depth),currentDepthClear=depth)},reset:function(){locked=!1,currentDepthMask=null,currentDepthFunc=null,currentDepthClear=null}}}function StencilBuffer(){let locked=!1,currentStencilMask=null,currentStencilFunc=null,currentStencilRef=null,currentStencilFuncMask=null,currentStencilFail=null,currentStencilZFail=null,currentStencilZPass=null,currentStencilClear=null;return{setTest:function(stencilTest){locked||(stencilTest?enable(2960):disable(2960))},setMask:function(stencilMask){currentStencilMask!==stencilMask&&!locked&&(gl.stencilMask(stencilMask),currentStencilMask=stencilMask)},setFunc:function(stencilFunc,stencilRef,stencilMask){(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask)&&(gl.stencilFunc(stencilFunc,stencilRef,stencilMask),currentStencilFunc=stencilFunc,currentStencilRef=stencilRef,currentStencilFuncMask=stencilMask)},setOp:function(stencilFail,stencilZFail,stencilZPass){(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass)&&(gl.stencilOp(stencilFail,stencilZFail,stencilZPass),currentStencilFail=stencilFail,currentStencilZFail=stencilZFail,currentStencilZPass=stencilZPass)},setLocked:function(lock){locked=lock},setClear:function(stencil){currentStencilClear!==stencil&&(gl.clearStencil(stencil),currentStencilClear=stencil)},reset:function(){locked=!1,currentStencilMask=null,currentStencilFunc=null,currentStencilRef=null,currentStencilFuncMask=null,currentStencilFail=null,currentStencilZFail=null,currentStencilZPass=null,currentStencilClear=null}}}let colorBuffer=new ColorBuffer,depthBuffer=new DepthBuffer,stencilBuffer=new StencilBuffer,uboBindings=new WeakMap,uboProgamMap=new WeakMap,enabledCapabilities={},currentBoundFramebuffers={},currentDrawbuffers=new WeakMap,defaultDrawbuffers=[],currentProgram=null,currentBlendingEnabled=!1,currentBlending=null,currentBlendEquation=null,currentBlendSrc=null,currentBlendDst=null,currentBlendEquationAlpha=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null,currentPremultipledAlpha=!1,currentFlipSided=null,currentCullFace=null,currentLineWidth=null,currentPolygonOffsetFactor=null,currentPolygonOffsetUnits=null,maxTextures=gl.getParameter(35661),lineWidthAvailable=!1,version=0,glVersion=gl.getParameter(7938);glVersion.indexOf("WebGL")!==-1?(version=parseFloat(/^WebGL (\d)/.exec(glVersion)[1]),lineWidthAvailable=version>=1):glVersion.indexOf("OpenGL ES")!==-1&&(version=parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]),lineWidthAvailable=version>=2);let currentTextureSlot=null,currentBoundTextures={},scissorParam=gl.getParameter(3088),viewportParam=gl.getParameter(2978),currentScissor=new Vector4().fromArray(scissorParam),currentViewport=new Vector4().fromArray(viewportParam);function createTexture(type,target,count){let data=new Uint8Array(4),texture=gl.createTexture();gl.bindTexture(type,texture),gl.texParameteri(type,10241,9728),gl.texParameteri(type,10240,9728);for(let i=0;i<count;i++)gl.texImage2D(target+i,0,6408,1,1,0,6408,5121,data);return texture}let emptyTextures={};emptyTextures[3553]=createTexture(3553,3553,1),emptyTextures[34067]=createTexture(34067,34069,6),colorBuffer.setClear(0,0,0,1),depthBuffer.setClear(1),stencilBuffer.setClear(0),enable(2929),depthBuffer.setFunc(LessEqualDepth),setFlipSided(!1),setCullFace(CullFaceBack),enable(2884),setBlending(NoBlending);function enable(id2){enabledCapabilities[id2]!==!0&&(gl.enable(id2),enabledCapabilities[id2]=!0)}function disable(id2){enabledCapabilities[id2]!==!1&&(gl.disable(id2),enabledCapabilities[id2]=!1)}function bindFramebuffer(target,framebuffer){return currentBoundFramebuffers[target]!==framebuffer?(gl.bindFramebuffer(target,framebuffer),currentBoundFramebuffers[target]=framebuffer,isWebGL2&&(target===36009&&(currentBoundFramebuffers[36160]=framebuffer),target===36160&&(currentBoundFramebuffers[36009]=framebuffer)),!0):!1}function drawBuffers(renderTarget,framebuffer){let drawBuffers2=defaultDrawbuffers,needsUpdate=!1;if(renderTarget)if(drawBuffers2=currentDrawbuffers.get(framebuffer),drawBuffers2===void 0&&(drawBuffers2=[],currentDrawbuffers.set(framebuffer,drawBuffers2)),renderTarget.isWebGLMultipleRenderTargets){let textures=renderTarget.texture;if(drawBuffers2.length!==textures.length||drawBuffers2[0]!==36064){for(let i=0,il=textures.length;i<il;i++)drawBuffers2[i]=36064+i;drawBuffers2.length=textures.length,needsUpdate=!0}}else drawBuffers2[0]!==36064&&(drawBuffers2[0]=36064,needsUpdate=!0);else drawBuffers2[0]!==1029&&(drawBuffers2[0]=1029,needsUpdate=!0);needsUpdate&&(capabilities.isWebGL2?gl.drawBuffers(drawBuffers2):extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers2))}function useProgram(program){return currentProgram!==program?(gl.useProgram(program),currentProgram=program,!0):!1}let equationToGL={[AddEquation]:32774,[SubtractEquation]:32778,[ReverseSubtractEquation]:32779};if(isWebGL2)equationToGL[MinEquation]=32775,equationToGL[MaxEquation]=32776;else{let extension=extensions.get("EXT_blend_minmax");extension!==null&&(equationToGL[MinEquation]=extension.MIN_EXT,equationToGL[MaxEquation]=extension.MAX_EXT)}let factorToGL={[ZeroFactor]:0,[OneFactor]:1,[SrcColorFactor]:768,[SrcAlphaFactor]:770,[SrcAlphaSaturateFactor]:776,[DstColorFactor]:774,[DstAlphaFactor]:772,[OneMinusSrcColorFactor]:769,[OneMinusSrcAlphaFactor]:771,[OneMinusDstColorFactor]:775,[OneMinusDstAlphaFactor]:773};function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){currentBlendingEnabled===!0&&(disable(3042),currentBlendingEnabled=!1);return}if(currentBlendingEnabled===!1&&(enable(3042),currentBlendingEnabled=!0),blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if((currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation)&&(gl.blendEquation(32774),currentBlendEquation=AddEquation,currentBlendEquationAlpha=AddEquation),premultipliedAlpha)switch(blending){case NormalBlending:gl.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:gl.blendFunc(1,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",blending);break}else switch(blending){case NormalBlending:gl.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:gl.blendFunc(770,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",blending);break}currentBlendSrc=null,currentBlendDst=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null,currentBlending=blending,currentPremultipledAlpha=premultipliedAlpha}return}blendEquationAlpha=blendEquationAlpha||blendEquation,blendSrcAlpha=blendSrcAlpha||blendSrc,blendDstAlpha=blendDstAlpha||blendDst,(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha)&&(gl.blendEquationSeparate(equationToGL[blendEquation],equationToGL[blendEquationAlpha]),currentBlendEquation=blendEquation,currentBlendEquationAlpha=blendEquationAlpha),(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha)&&(gl.blendFuncSeparate(factorToGL[blendSrc],factorToGL[blendDst],factorToGL[blendSrcAlpha],factorToGL[blendDstAlpha]),currentBlendSrc=blendSrc,currentBlendDst=blendDst,currentBlendSrcAlpha=blendSrcAlpha,currentBlendDstAlpha=blendDstAlpha),currentBlending=blending,currentPremultipledAlpha=!1}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(2884):enable(2884);let flipSided=material.side===BackSide;frontFaceCW&&(flipSided=!flipSided),setFlipSided(flipSided),material.blending===NormalBlending&&material.transparent===!1?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha),depthBuffer.setFunc(material.depthFunc),depthBuffer.setTest(material.depthTest),depthBuffer.setMask(material.depthWrite),colorBuffer.setMask(material.colorWrite);let stencilWrite=material.stencilWrite;stencilBuffer.setTest(stencilWrite),stencilWrite&&(stencilBuffer.setMask(material.stencilWriteMask),stencilBuffer.setFunc(material.stencilFunc,material.stencilRef,material.stencilFuncMask),stencilBuffer.setOp(material.stencilFail,material.stencilZFail,material.stencilZPass)),setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits),material.alphaToCoverage===!0?enable(32926):disable(32926)}function setFlipSided(flipSided){currentFlipSided!==flipSided&&(flipSided?gl.frontFace(2304):gl.frontFace(2305),currentFlipSided=flipSided)}function setCullFace(cullFace){cullFace!==CullFaceNone?(enable(2884),cullFace!==currentCullFace&&(cullFace===CullFaceBack?gl.cullFace(1029):cullFace===CullFaceFront?gl.cullFace(1028):gl.cullFace(1032))):disable(2884),currentCullFace=cullFace}function setLineWidth(width){width!==currentLineWidth&&(lineWidthAvailable&&gl.lineWidth(width),currentLineWidth=width)}function setPolygonOffset(polygonOffset,factor,units){polygonOffset?(enable(32823),(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units)&&(gl.polygonOffset(factor,units),currentPolygonOffsetFactor=factor,currentPolygonOffsetUnits=units)):disable(32823)}function setScissorTest(scissorTest){scissorTest?enable(3089):disable(3089)}function activeTexture(webglSlot){webglSlot===void 0&&(webglSlot=33984+maxTextures-1),currentTextureSlot!==webglSlot&&(gl.activeTexture(webglSlot),currentTextureSlot=webglSlot)}function bindTexture(webglType,webglTexture,webglSlot){webglSlot===void 0&&(currentTextureSlot===null?webglSlot=33984+maxTextures-1:webglSlot=currentTextureSlot);let boundTexture=currentBoundTextures[webglSlot];boundTexture===void 0&&(boundTexture={type:void 0,texture:void 0},currentBoundTextures[webglSlot]=boundTexture),(boundTexture.type!==webglType||boundTexture.texture!==webglTexture)&&(currentTextureSlot!==webglSlot&&(gl.activeTexture(webglSlot),currentTextureSlot=webglSlot),gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]),boundTexture.type=webglType,boundTexture.texture=webglTexture)}function unbindTexture(){let boundTexture=currentBoundTextures[currentTextureSlot];boundTexture!==void 0&&boundTexture.type!==void 0&&(gl.bindTexture(boundTexture.type,null),boundTexture.type=void 0,boundTexture.texture=void 0)}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function compressedTexImage3D(){try{gl.compressedTexImage3D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texSubImage2D(){try{gl.texSubImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texSubImage3D(){try{gl.texSubImage3D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function compressedTexSubImage2D(){try{gl.compressedTexSubImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function compressedTexSubImage3D(){try{gl.compressedTexSubImage3D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texStorage2D(){try{gl.texStorage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texStorage3D(){try{gl.texStorage3D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function scissor(scissor2){currentScissor.equals(scissor2)===!1&&(gl.scissor(scissor2.x,scissor2.y,scissor2.z,scissor2.w),currentScissor.copy(scissor2))}function viewport(viewport2){currentViewport.equals(viewport2)===!1&&(gl.viewport(viewport2.x,viewport2.y,viewport2.z,viewport2.w),currentViewport.copy(viewport2))}function updateUBOMapping(uniformsGroup,program){let mapping=uboProgamMap.get(program);mapping===void 0&&(mapping=new WeakMap,uboProgamMap.set(program,mapping));let blockIndex=mapping.get(uniformsGroup);blockIndex===void 0&&(blockIndex=gl.getUniformBlockIndex(program,uniformsGroup.name),mapping.set(uniformsGroup,blockIndex))}function uniformBlockBinding(uniformsGroup,program){let blockIndex=uboProgamMap.get(program).get(uniformsGroup);uboBindings.get(uniformsGroup)!==blockIndex&&(gl.uniformBlockBinding(program,blockIndex,uniformsGroup.__bindingPointIndex),uboBindings.set(uniformsGroup,blockIndex))}function reset(){gl.disable(3042),gl.disable(2884),gl.disable(2929),gl.disable(32823),gl.disable(3089),gl.disable(2960),gl.disable(32926),gl.blendEquation(32774),gl.blendFunc(1,0),gl.blendFuncSeparate(1,0,1,0),gl.colorMask(!0,!0,!0,!0),gl.clearColor(0,0,0,0),gl.depthMask(!0),gl.depthFunc(513),gl.clearDepth(1),gl.stencilMask(4294967295),gl.stencilFunc(519,0,4294967295),gl.stencilOp(7680,7680,7680),gl.clearStencil(0),gl.cullFace(1029),gl.frontFace(2305),gl.polygonOffset(0,0),gl.activeTexture(33984),gl.bindFramebuffer(36160,null),isWebGL2===!0&&(gl.bindFramebuffer(36009,null),gl.bindFramebuffer(36008,null)),gl.useProgram(null),gl.lineWidth(1),gl.scissor(0,0,gl.canvas.width,gl.canvas.height),gl.viewport(0,0,gl.canvas.width,gl.canvas.height),enabledCapabilities={},currentTextureSlot=null,currentBoundTextures={},currentBoundFramebuffers={},currentDrawbuffers=new WeakMap,defaultDrawbuffers=[],currentProgram=null,currentBlendingEnabled=!1,currentBlending=null,currentBlendEquation=null,currentBlendSrc=null,currentBlendDst=null,currentBlendEquationAlpha=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null,currentPremultipledAlpha=!1,currentFlipSided=null,currentCullFace=null,currentLineWidth=null,currentPolygonOffsetFactor=null,currentPolygonOffsetUnits=null,currentScissor.set(0,0,gl.canvas.width,gl.canvas.height),currentViewport.set(0,0,gl.canvas.width,gl.canvas.height),colorBuffer.reset(),depthBuffer.reset(),stencilBuffer.reset()}return{buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},enable,disable,bindFramebuffer,drawBuffers,useProgram,setBlending,setMaterial,setFlipSided,setCullFace,setLineWidth,setPolygonOffset,setScissorTest,activeTexture,bindTexture,unbindTexture,compressedTexImage2D,compressedTexImage3D,texImage2D,texImage3D,updateUBOMapping,uniformBlockBinding,texStorage2D,texStorage3D,texSubImage2D,texSubImage3D,compressedTexSubImage2D,compressedTexSubImage3D,scissor,viewport,reset}}function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){let isWebGL2=capabilities.isWebGL2,maxTextures=capabilities.maxTextures,maxCubemapSize=capabilities.maxCubemapSize,maxTextureSize=capabilities.maxTextureSize,maxSamples=capabilities.maxSamples,multisampledRTTExt=extensions.has("WEBGL_multisampled_render_to_texture")?extensions.get("WEBGL_multisampled_render_to_texture"):null,supportsInvalidateFramebuffer=typeof navigator=="undefined"?!1:/OculusBrowser/g.test(navigator.userAgent),_videoTextures=new WeakMap,_canvas2,_sources=new WeakMap,useOffscreenCanvas=!1;try{useOffscreenCanvas=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(err){}function createCanvas2(width,height){return useOffscreenCanvas?new OffscreenCanvas(width,height):createElementNS("canvas")}function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){let scale=1;if((image.width>maxSize||image.height>maxSize)&&(scale=maxSize/Math.max(image.width,image.height)),scale<1||needsPowerOfTwo===!0)if(typeof HTMLImageElement!="undefined"&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&image instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&image instanceof ImageBitmap){let floor=needsPowerOfTwo?floorPowerOfTwo:Math.floor,width=floor(scale*image.width),height=floor(scale*image.height);_canvas2===void 0&&(_canvas2=createCanvas2(width,height));let canvas=needsNewCanvas?createCanvas2(width,height):_canvas2;return canvas.width=width,canvas.height=height,canvas.getContext("2d").drawImage(image,0,0,width,height),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+image.width+"x"+image.height+") to ("+width+"x"+height+")."),canvas}else return"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+image.width+"x"+image.height+")."),image;return image}function isPowerOfTwo$1(image){return isPowerOfTwo(image.width)&&isPowerOfTwo(image.height)}function textureNeedsPowerOfTwo(texture){return isWebGL2?!1:texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter}function generateMipmap(target){_gl.generateMipmap(target)}function getInternalFormat(internalFormatName,glFormat,glType,encoding,forceLinearEncoding=!1){if(isWebGL2===!1)return glFormat;if(internalFormatName!==null){if(_gl[internalFormatName]!==void 0)return _gl[internalFormatName];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+internalFormatName+"'")}let internalFormat=glFormat;return glFormat===6403&&(glType===5126&&(internalFormat=33326),glType===5131&&(internalFormat=33325),glType===5121&&(internalFormat=33321)),glFormat===33319&&(glType===5126&&(internalFormat=33328),glType===5131&&(internalFormat=33327),glType===5121&&(internalFormat=33323)),glFormat===6408&&(glType===5126&&(internalFormat=34836),glType===5131&&(internalFormat=34842),glType===5121&&(internalFormat=encoding===sRGBEncoding&&forceLinearEncoding===!1?35907:32856),glType===32819&&(internalFormat=32854),glType===32820&&(internalFormat=32855)),(internalFormat===33325||internalFormat===33326||internalFormat===33327||internalFormat===33328||internalFormat===34842||internalFormat===34836)&&extensions.get("EXT_color_buffer_float"),internalFormat}function getMipLevels(texture,image,supportsMips){return textureNeedsGenerateMipmaps(texture,supportsMips)===!0||texture.isFramebufferTexture&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter?Math.log2(Math.max(image.width,image.height))+1:texture.mipmaps!==void 0&&texture.mipmaps.length>0?texture.mipmaps.length:texture.isCompressedTexture&&Array.isArray(texture.image)?image.mipmaps.length:1}function filterFallback(f){return f===NearestFilter||f===NearestMipmapNearestFilter||f===NearestMipmapLinearFilter?9728:9729}function onTextureDispose(event){let texture=event.target;texture.removeEventListener("dispose",onTextureDispose),deallocateTexture(texture),texture.isVideoTexture&&_videoTextures.delete(texture)}function onRenderTargetDispose(event){let renderTarget=event.target;renderTarget.removeEventListener("dispose",onRenderTargetDispose),deallocateRenderTarget(renderTarget)}function deallocateTexture(texture){let textureProperties=properties.get(texture);if(textureProperties.__webglInit===void 0)return;let source=texture.source,webglTextures=_sources.get(source);if(webglTextures){let webglTexture=webglTextures[textureProperties.__cacheKey];webglTexture.usedTimes--,webglTexture.usedTimes===0&&deleteTexture(texture),Object.keys(webglTextures).length===0&&_sources.delete(source)}properties.remove(texture)}function deleteTexture(texture){let textureProperties=properties.get(texture);_gl.deleteTexture(textureProperties.__webglTexture);let source=texture.source,webglTextures=_sources.get(source);delete webglTextures[textureProperties.__cacheKey],info.memory.textures--}function deallocateRenderTarget(renderTarget){let texture=renderTarget.texture,renderTargetProperties=properties.get(renderTarget),textureProperties=properties.get(texture);if(textureProperties.__webglTexture!==void 0&&(_gl.deleteTexture(textureProperties.__webglTexture),info.memory.textures--),renderTarget.depthTexture&&renderTarget.depthTexture.dispose(),renderTarget.isWebGLCubeRenderTarget)for(let i=0;i<6;i++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);else{if(_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer),renderTargetProperties.__webglMultisampledFramebuffer&&_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer),renderTargetProperties.__webglColorRenderbuffer)for(let i=0;i<renderTargetProperties.__webglColorRenderbuffer.length;i++)renderTargetProperties.__webglColorRenderbuffer[i]&&_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);renderTargetProperties.__webglDepthRenderbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer)}if(renderTarget.isWebGLMultipleRenderTargets)for(let i=0,il=texture.length;i<il;i++){let attachmentProperties=properties.get(texture[i]);attachmentProperties.__webglTexture&&(_gl.deleteTexture(attachmentProperties.__webglTexture),info.memory.textures--),properties.remove(texture[i])}properties.remove(texture),properties.remove(renderTarget)}let textureUnits=0;function resetTextureUnits(){textureUnits=0}function allocateTextureUnit(){let textureUnit=textureUnits;return textureUnit>=maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+textureUnit+" texture units while this GPU supports only "+maxTextures),textureUnits+=1,textureUnit}function getTextureCacheKey(texture){let array=[];return array.push(texture.wrapS),array.push(texture.wrapT),array.push(texture.wrapR||0),array.push(texture.magFilter),array.push(texture.minFilter),array.push(texture.anisotropy),array.push(texture.internalFormat),array.push(texture.format),array.push(texture.type),array.push(texture.generateMipmaps),array.push(texture.premultiplyAlpha),array.push(texture.flipY),array.push(texture.unpackAlignment),array.push(texture.encoding),array.join()}function setTexture2D(texture,slot){let textureProperties=properties.get(texture);if(texture.isVideoTexture&&updateVideoTexture(texture),texture.isRenderTargetTexture===!1&&texture.version>0&&textureProperties.__version!==texture.version){let image=texture.image;if(image===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(image.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{uploadTexture(textureProperties,texture,slot);return}}state.bindTexture(3553,textureProperties.__webglTexture,33984+slot)}function setTexture2DArray(texture,slot){let textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return}state.bindTexture(35866,textureProperties.__webglTexture,33984+slot)}function setTexture3D(texture,slot){let textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return}state.bindTexture(32879,textureProperties.__webglTexture,33984+slot)}function setTextureCube(texture,slot){let textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadCubeTexture(textureProperties,texture,slot);return}state.bindTexture(34067,textureProperties.__webglTexture,33984+slot)}let wrappingToGL={[RepeatWrapping]:10497,[ClampToEdgeWrapping]:33071,[MirroredRepeatWrapping]:33648},filterToGL={[NearestFilter]:9728,[NearestMipmapNearestFilter]:9984,[NearestMipmapLinearFilter]:9986,[LinearFilter]:9729,[LinearMipmapNearestFilter]:9985,[LinearMipmapLinearFilter]:9987};function setTextureParameters(textureType,texture,supportsMips){if(supportsMips?(_gl.texParameteri(textureType,10242,wrappingToGL[texture.wrapS]),_gl.texParameteri(textureType,10243,wrappingToGL[texture.wrapT]),(textureType===32879||textureType===35866)&&_gl.texParameteri(textureType,32882,wrappingToGL[texture.wrapR]),_gl.texParameteri(textureType,10240,filterToGL[texture.magFilter]),_gl.texParameteri(textureType,10241,filterToGL[texture.minFilter])):(_gl.texParameteri(textureType,10242,33071),_gl.texParameteri(textureType,10243,33071),(textureType===32879||textureType===35866)&&_gl.texParameteri(textureType,32882,33071),(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),_gl.texParameteri(textureType,10240,filterFallback(texture.magFilter)),_gl.texParameteri(textureType,10241,filterFallback(texture.minFilter)),texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),extensions.has("EXT_texture_filter_anisotropic")===!0){let extension=extensions.get("EXT_texture_filter_anisotropic");if(texture.type===FloatType&&extensions.has("OES_texture_float_linear")===!1||isWebGL2===!1&&texture.type===HalfFloatType&&extensions.has("OES_texture_half_float_linear")===!1)return;(texture.anisotropy>1||properties.get(texture).__currentAnisotropy)&&(_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy())),properties.get(texture).__currentAnisotropy=texture.anisotropy)}}function initTexture(textureProperties,texture){let forceUpload=!1;textureProperties.__webglInit===void 0&&(textureProperties.__webglInit=!0,texture.addEventListener("dispose",onTextureDispose));let source=texture.source,webglTextures=_sources.get(source);webglTextures===void 0&&(webglTextures={},_sources.set(source,webglTextures));let textureCacheKey=getTextureCacheKey(texture);if(textureCacheKey!==textureProperties.__cacheKey){webglTextures[textureCacheKey]===void 0&&(webglTextures[textureCacheKey]={texture:_gl.createTexture(),usedTimes:0},info.memory.textures++,forceUpload=!0),webglTextures[textureCacheKey].usedTimes++;let webglTexture=webglTextures[textureProperties.__cacheKey];webglTexture!==void 0&&(webglTextures[textureProperties.__cacheKey].usedTimes--,webglTexture.usedTimes===0&&deleteTexture(texture)),textureProperties.__cacheKey=textureCacheKey,textureProperties.__webglTexture=webglTextures[textureCacheKey].texture}return forceUpload}function uploadTexture(textureProperties,texture,slot){let textureType=3553;(texture.isDataArrayTexture||texture.isCompressedArrayTexture)&&(textureType=35866),texture.isData3DTexture&&(textureType=32879);let forceUpload=initTexture(textureProperties,texture),source=texture.source;state.bindTexture(textureType,textureProperties.__webglTexture,33984+slot);let sourceProperties=properties.get(source);if(source.version!==sourceProperties.__version||forceUpload===!0){state.activeTexture(33984+slot),_gl.pixelStorei(37440,texture.flipY),_gl.pixelStorei(37441,texture.premultiplyAlpha),_gl.pixelStorei(3317,texture.unpackAlignment),_gl.pixelStorei(37443,0);let needsPowerOfTwo=textureNeedsPowerOfTwo(texture)&&isPowerOfTwo$1(texture.image)===!1,image=resizeImage(texture.image,needsPowerOfTwo,!1,maxTextureSize);image=verifyColorSpace(texture,image);let supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding,texture.isVideoTexture);setTextureParameters(textureType,texture,supportsMips);let mipmap,mipmaps=texture.mipmaps,useTexStorage=isWebGL2&&texture.isVideoTexture!==!0,allocateMemory=sourceProperties.__version===void 0||forceUpload===!0,levels=getMipLevels(texture,image,supportsMips);if(texture.isDepthTexture)glInternalFormat=6402,isWebGL2?texture.type===FloatType?glInternalFormat=36012:texture.type===UnsignedIntType?glInternalFormat=33190:texture.type===UnsignedInt248Type?glInternalFormat=35056:glInternalFormat=33189:texture.type===FloatType&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),texture.format===DepthFormat&&glInternalFormat===6402&&texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),texture.type=UnsignedIntType,glType=utils.convert(texture.type)),texture.format===DepthStencilFormat&&glInternalFormat===6402&&(glInternalFormat=34041,texture.type!==UnsignedInt248Type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),texture.type=UnsignedInt248Type,glType=utils.convert(texture.type))),allocateMemory&&(useTexStorage?state.texStorage2D(3553,1,glInternalFormat,image.width,image.height):state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null));else if(texture.isDataTexture)if(mipmaps.length>0&&supportsMips){useTexStorage&&allocateMemory&&state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)mipmap=mipmaps[i],useTexStorage?state.texSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data):state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);texture.generateMipmaps=!1}else useTexStorage?(allocateMemory&&state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height),state.texSubImage2D(3553,0,0,0,image.width,image.height,glFormat,glType,image.data)):state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);else if(texture.isCompressedTexture)if(texture.isCompressedArrayTexture){useTexStorage&&allocateMemory&&state.texStorage3D(35866,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height,image.depth);for(let i=0,il=mipmaps.length;i<il;i++)mipmap=mipmaps[i],texture.format!==RGBAFormat?glFormat!==null?useTexStorage?state.compressedTexSubImage3D(35866,i,0,0,0,mipmap.width,mipmap.height,image.depth,glFormat,mipmap.data,0,0):state.compressedTexImage3D(35866,i,glInternalFormat,mipmap.width,mipmap.height,image.depth,0,mipmap.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):useTexStorage?state.texSubImage3D(35866,i,0,0,0,mipmap.width,mipmap.height,image.depth,glFormat,glType,mipmap.data):state.texImage3D(35866,i,glInternalFormat,mipmap.width,mipmap.height,image.depth,0,glFormat,glType,mipmap.data)}else{useTexStorage&&allocateMemory&&state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)mipmap=mipmaps[i],texture.format!==RGBAFormat?glFormat!==null?useTexStorage?state.compressedTexSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data):state.compressedTexImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):useTexStorage?state.texSubImage2D(3553,i,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data):state.texImage2D(3553,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data)}else if(texture.isDataArrayTexture)useTexStorage?(allocateMemory&&state.texStorage3D(35866,levels,glInternalFormat,image.width,image.height,image.depth),state.texSubImage3D(35866,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(35866,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isData3DTexture)useTexStorage?(allocateMemory&&state.texStorage3D(32879,levels,glInternalFormat,image.width,image.height,image.depth),state.texSubImage3D(32879,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data)):state.texImage3D(32879,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);else if(texture.isFramebufferTexture){if(allocateMemory)if(useTexStorage)state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);else{let width=image.width,height=image.height;for(let i=0;i<levels;i++)state.texImage2D(3553,i,glInternalFormat,width,height,0,glFormat,glType,null),width>>=1,height>>=1}}else if(mipmaps.length>0&&supportsMips){useTexStorage&&allocateMemory&&state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);for(let i=0,il=mipmaps.length;i<il;i++)mipmap=mipmaps[i],useTexStorage?state.texSubImage2D(3553,i,0,0,glFormat,glType,mipmap):state.texImage2D(3553,i,glInternalFormat,glFormat,glType,mipmap);texture.generateMipmaps=!1}else useTexStorage?(allocateMemory&&state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height),state.texSubImage2D(3553,0,0,0,glFormat,glType,image)):state.texImage2D(3553,0,glInternalFormat,glFormat,glType,image);textureNeedsGenerateMipmaps(texture,supportsMips)&&generateMipmap(textureType),sourceProperties.__version=source.version,texture.onUpdate&&texture.onUpdate(texture)}textureProperties.__version=texture.version}function uploadCubeTexture(textureProperties,texture,slot){if(texture.image.length!==6)return;let forceUpload=initTexture(textureProperties,texture),source=texture.source;state.bindTexture(34067,textureProperties.__webglTexture,33984+slot);let sourceProperties=properties.get(source);if(source.version!==sourceProperties.__version||forceUpload===!0){state.activeTexture(33984+slot),_gl.pixelStorei(37440,texture.flipY),_gl.pixelStorei(37441,texture.premultiplyAlpha),_gl.pixelStorei(3317,texture.unpackAlignment),_gl.pixelStorei(37443,0);let isCompressed=texture.isCompressedTexture||texture.image[0].isCompressedTexture,isDataTexture=texture.image[0]&&texture.image[0].isDataTexture,cubeImage=[];for(let i=0;i<6;i++)!isCompressed&&!isDataTexture?cubeImage[i]=resizeImage(texture.image[i],!1,!0,maxCubemapSize):cubeImage[i]=isDataTexture?texture.image[i].image:texture.image[i],cubeImage[i]=verifyColorSpace(texture,cubeImage[i]);let image=cubeImage[0],supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding),useTexStorage=isWebGL2&&texture.isVideoTexture!==!0,allocateMemory=sourceProperties.__version===void 0||forceUpload===!0,levels=getMipLevels(texture,image,supportsMips);setTextureParameters(34067,texture,supportsMips);let mipmaps;if(isCompressed){useTexStorage&&allocateMemory&&state.texStorage2D(34067,levels,glInternalFormat,image.width,image.height);for(let i=0;i<6;i++){mipmaps=cubeImage[i].mipmaps;for(let j=0;j<mipmaps.length;j++){let mipmap=mipmaps[j];texture.format!==RGBAFormat?glFormat!==null?useTexStorage?state.compressedTexSubImage2D(34069+i,j,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data):state.compressedTexImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):useTexStorage?state.texSubImage2D(34069+i,j,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data):state.texImage2D(34069+i,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data)}}}else{mipmaps=texture.mipmaps,useTexStorage&&allocateMemory&&(mipmaps.length>0&&levels++,state.texStorage2D(34067,levels,glInternalFormat,cubeImage[0].width,cubeImage[0].height));for(let i=0;i<6;i++)if(isDataTexture){useTexStorage?state.texSubImage2D(34069+i,0,0,0,cubeImage[i].width,cubeImage[i].height,glFormat,glType,cubeImage[i].data):state.texImage2D(34069+i,0,glInternalFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data);for(let j=0;j<mipmaps.length;j++){let mipmapImage=mipmaps[j].image[i].image;useTexStorage?state.texSubImage2D(34069+i,j+1,0,0,mipmapImage.width,mipmapImage.height,glFormat,glType,mipmapImage.data):state.texImage2D(34069+i,j+1,glInternalFormat,mipmapImage.width,mipmapImage.height,0,glFormat,glType,mipmapImage.data)}}else{useTexStorage?state.texSubImage2D(34069+i,0,0,0,glFormat,glType,cubeImage[i]):state.texImage2D(34069+i,0,glInternalFormat,glFormat,glType,cubeImage[i]);for(let j=0;j<mipmaps.length;j++){let mipmap=mipmaps[j];useTexStorage?state.texSubImage2D(34069+i,j+1,0,0,glFormat,glType,mipmap.image[i]):state.texImage2D(34069+i,j+1,glInternalFormat,glFormat,glType,mipmap.image[i])}}}textureNeedsGenerateMipmaps(texture,supportsMips)&&generateMipmap(34067),sourceProperties.__version=source.version,texture.onUpdate&&texture.onUpdate(texture)}textureProperties.__version=texture.version}function setupFrameBufferTexture(framebuffer,renderTarget,texture,attachment,textureTarget){let glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);properties.get(renderTarget).__hasExternalTextures||(textureTarget===32879||textureTarget===35866?state.texImage3D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,renderTarget.depth,0,glFormat,glType,null):state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null)),state.bindFramebuffer(36160,framebuffer),useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0,getRenderTargetSamples(renderTarget)):(textureTarget===3553||textureTarget>=34069&&textureTarget<=34074)&&_gl.framebufferTexture2D(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0),state.bindFramebuffer(36160,null)}function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){if(_gl.bindRenderbuffer(36161,renderbuffer),renderTarget.depthBuffer&&!renderTarget.stencilBuffer){let glInternalFormat=33189;if(isMultisample||useMultisampledRTT(renderTarget)){let depthTexture=renderTarget.depthTexture;depthTexture&&depthTexture.isDepthTexture&&(depthTexture.type===FloatType?glInternalFormat=36012:depthTexture.type===UnsignedIntType&&(glInternalFormat=33190));let samples=getRenderTargetSamples(renderTarget);useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height):_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height)}else _gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer)}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){let samples=getRenderTargetSamples(renderTarget);isMultisample&&useMultisampledRTT(renderTarget)===!1?_gl.renderbufferStorageMultisample(36161,samples,35056,renderTarget.width,renderTarget.height):useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,35056,renderTarget.width,renderTarget.height):_gl.renderbufferStorage(36161,34041,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer)}else{let textures=renderTarget.isWebGLMultipleRenderTargets===!0?renderTarget.texture:[renderTarget.texture];for(let i=0;i<textures.length;i++){let texture=textures[i],glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding),samples=getRenderTargetSamples(renderTarget);isMultisample&&useMultisampledRTT(renderTarget)===!1?_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height):useMultisampledRTT(renderTarget)?multisampledRTTExt.renderbufferStorageMultisampleEXT(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height):_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height)}}_gl.bindRenderbuffer(36161,null)}function setupDepthTexture(framebuffer,renderTarget){if(renderTarget&&renderTarget.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(state.bindFramebuffer(36160,framebuffer),!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height)&&(renderTarget.depthTexture.image.width=renderTarget.width,renderTarget.depthTexture.image.height=renderTarget.height,renderTarget.depthTexture.needsUpdate=!0),setTexture2D(renderTarget.depthTexture,0);let webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture,samples=getRenderTargetSamples(renderTarget);if(renderTarget.depthTexture.format===DepthFormat)useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,36096,3553,webglDepthTexture,0,samples):_gl.framebufferTexture2D(36160,36096,3553,webglDepthTexture,0);else if(renderTarget.depthTexture.format===DepthStencilFormat)useMultisampledRTT(renderTarget)?multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160,33306,3553,webglDepthTexture,0,samples):_gl.framebufferTexture2D(36160,33306,3553,webglDepthTexture,0);else throw new Error("Unknown depthTexture format")}function setupDepthRenderbuffer(renderTarget){let renderTargetProperties=properties.get(renderTarget),isCube=renderTarget.isWebGLCubeRenderTarget===!0;if(renderTarget.depthTexture&&!renderTargetProperties.__autoAllocateDepthBuffer){if(isCube)throw new Error("target.depthTexture not supported in Cube render targets");setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget)}else if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(let i=0;i<6;i++)state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer[i]),renderTargetProperties.__webglDepthbuffer[i]=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i],renderTarget,!1)}else state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget,!1);state.bindFramebuffer(36160,null)}function rebindTextures(renderTarget,colorTexture,depthTexture){let renderTargetProperties=properties.get(renderTarget);colorTexture!==void 0&&setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,renderTarget.texture,36064,3553),depthTexture!==void 0&&setupDepthRenderbuffer(renderTarget)}function setupRenderTarget(renderTarget){let texture=renderTarget.texture,renderTargetProperties=properties.get(renderTarget),textureProperties=properties.get(texture);renderTarget.addEventListener("dispose",onRenderTargetDispose),renderTarget.isWebGLMultipleRenderTargets!==!0&&(textureProperties.__webglTexture===void 0&&(textureProperties.__webglTexture=_gl.createTexture()),textureProperties.__version=texture.version,info.memory.textures++);let isCube=renderTarget.isWebGLCubeRenderTarget===!0,isMultipleRenderTargets=renderTarget.isWebGLMultipleRenderTargets===!0,supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2;if(isCube){renderTargetProperties.__webglFramebuffer=[];for(let i=0;i<6;i++)renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer()}else{if(renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer(),isMultipleRenderTargets)if(capabilities.drawBuffers){let textures=renderTarget.texture;for(let i=0,il=textures.length;i<il;i++){let attachmentProperties=properties.get(textures[i]);attachmentProperties.__webglTexture===void 0&&(attachmentProperties.__webglTexture=_gl.createTexture(),info.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(isWebGL2&&renderTarget.samples>0&&useMultisampledRTT(renderTarget)===!1){let textures=isMultipleRenderTargets?texture:[texture];renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer(),renderTargetProperties.__webglColorRenderbuffer=[],state.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);for(let i=0;i<textures.length;i++){let texture2=textures[i];renderTargetProperties.__webglColorRenderbuffer[i]=_gl.createRenderbuffer(),_gl.bindRenderbuffer(36161,renderTargetProperties.__webglColorRenderbuffer[i]);let glFormat=utils.convert(texture2.format,texture2.encoding),glType=utils.convert(texture2.type),glInternalFormat=getInternalFormat(texture2.internalFormat,glFormat,glType,texture2.encoding,renderTarget.isXRRenderTarget===!0),samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(36160,36064+i,36161,renderTargetProperties.__webglColorRenderbuffer[i])}_gl.bindRenderbuffer(36161,null),renderTarget.depthBuffer&&(renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,!0)),state.bindFramebuffer(36160,null)}}if(isCube){state.bindTexture(34067,textureProperties.__webglTexture),setTextureParameters(34067,texture,supportsMips);for(let i=0;i<6;i++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,texture,36064,34069+i);textureNeedsGenerateMipmaps(texture,supportsMips)&&generateMipmap(34067),state.unbindTexture()}else if(isMultipleRenderTargets){let textures=renderTarget.texture;for(let i=0,il=textures.length;i<il;i++){let attachment=textures[i],attachmentProperties=properties.get(attachment);state.bindTexture(3553,attachmentProperties.__webglTexture),setTextureParameters(3553,attachment,supportsMips),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,attachment,36064+i,3553),textureNeedsGenerateMipmaps(attachment,supportsMips)&&generateMipmap(3553)}state.unbindTexture()}else{let glTextureType=3553;(renderTarget.isWebGL3DRenderTarget||renderTarget.isWebGLArrayRenderTarget)&&(isWebGL2?glTextureType=renderTarget.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),state.bindTexture(glTextureType,textureProperties.__webglTexture),setTextureParameters(glTextureType,texture,supportsMips),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,texture,36064,glTextureType),textureNeedsGenerateMipmaps(texture,supportsMips)&&generateMipmap(glTextureType),state.unbindTexture()}renderTarget.depthBuffer&&setupDepthRenderbuffer(renderTarget)}function updateRenderTargetMipmap(renderTarget){let supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2,textures=renderTarget.isWebGLMultipleRenderTargets===!0?renderTarget.texture:[renderTarget.texture];for(let i=0,il=textures.length;i<il;i++){let texture=textures[i];if(textureNeedsGenerateMipmaps(texture,supportsMips)){let target=renderTarget.isWebGLCubeRenderTarget?34067:3553,webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture),generateMipmap(target),state.unbindTexture()}}}function updateMultisampleRenderTarget(renderTarget){if(isWebGL2&&renderTarget.samples>0&&useMultisampledRTT(renderTarget)===!1){let textures=renderTarget.isWebGLMultipleRenderTargets?renderTarget.texture:[renderTarget.texture],width=renderTarget.width,height=renderTarget.height,mask=16384,invalidationArray=[],depthStyle=renderTarget.stencilBuffer?33306:36096,renderTargetProperties=properties.get(renderTarget),isMultipleRenderTargets=renderTarget.isWebGLMultipleRenderTargets===!0;if(isMultipleRenderTargets)for(let i=0;i<textures.length;i++)state.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer),_gl.framebufferRenderbuffer(36160,36064+i,36161,null),state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer),_gl.framebufferTexture2D(36009,36064+i,3553,null,0);state.bindFramebuffer(36008,renderTargetProperties.__webglMultisampledFramebuffer),state.bindFramebuffer(36009,renderTargetProperties.__webglFramebuffer);for(let i=0;i<textures.length;i++){invalidationArray.push(36064+i),renderTarget.depthBuffer&&invalidationArray.push(depthStyle);let ignoreDepthValues=renderTargetProperties.__ignoreDepthValues!==void 0?renderTargetProperties.__ignoreDepthValues:!1;if(ignoreDepthValues===!1&&(renderTarget.depthBuffer&&(mask|=256),renderTarget.stencilBuffer&&(mask|=1024)),isMultipleRenderTargets&&_gl.framebufferRenderbuffer(36008,36064,36161,renderTargetProperties.__webglColorRenderbuffer[i]),ignoreDepthValues===!0&&(_gl.invalidateFramebuffer(36008,[depthStyle]),_gl.invalidateFramebuffer(36009,[depthStyle])),isMultipleRenderTargets){let webglTexture=properties.get(textures[i]).__webglTexture;_gl.framebufferTexture2D(36009,36064,3553,webglTexture,0)}_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,9728),supportsInvalidateFramebuffer&&_gl.invalidateFramebuffer(36008,invalidationArray)}if(state.bindFramebuffer(36008,null),state.bindFramebuffer(36009,null),isMultipleRenderTargets)for(let i=0;i<textures.length;i++){state.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer),_gl.framebufferRenderbuffer(36160,36064+i,36161,renderTargetProperties.__webglColorRenderbuffer[i]);let webglTexture=properties.get(textures[i]).__webglTexture;state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer),_gl.framebufferTexture2D(36009,36064+i,3553,webglTexture,0)}state.bindFramebuffer(36009,renderTargetProperties.__webglMultisampledFramebuffer)}}function getRenderTargetSamples(renderTarget){return Math.min(maxSamples,renderTarget.samples)}function useMultisampledRTT(renderTarget){let renderTargetProperties=properties.get(renderTarget);return isWebGL2&&renderTarget.samples>0&&extensions.has("WEBGL_multisampled_render_to_texture")===!0&&renderTargetProperties.__useRenderToTexture!==!1}function updateVideoTexture(texture){let frame=info.render.frame;_videoTextures.get(texture)!==frame&&(_videoTextures.set(texture,frame),texture.update())}function verifyColorSpace(texture,image){let encoding=texture.encoding,format=texture.format,type=texture.type;return texture.isCompressedTexture===!0||texture.isVideoTexture===!0||texture.format===_SRGBAFormat||encoding!==LinearEncoding&&(encoding===sRGBEncoding?isWebGL2===!1?extensions.has("EXT_sRGB")===!0&&format===RGBAFormat?(texture.format=_SRGBAFormat,texture.minFilter=LinearFilter,texture.generateMipmaps=!1):image=ImageUtils.sRGBToLinear(image):(format!==RGBAFormat||type!==UnsignedByteType)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",encoding)),image}this.allocateTextureUnit=allocateTextureUnit,this.resetTextureUnits=resetTextureUnits,this.setTexture2D=setTexture2D,this.setTexture2DArray=setTexture2DArray,this.setTexture3D=setTexture3D,this.setTextureCube=setTextureCube,this.rebindTextures=rebindTextures,this.setupRenderTarget=setupRenderTarget,this.updateRenderTargetMipmap=updateRenderTargetMipmap,this.updateMultisampleRenderTarget=updateMultisampleRenderTarget,this.setupDepthRenderbuffer=setupDepthRenderbuffer,this.setupFrameBufferTexture=setupFrameBufferTexture,this.useMultisampledRTT=useMultisampledRTT}function WebGLUtils(gl,extensions,capabilities){let isWebGL2=capabilities.isWebGL2;function convert(p,encoding=null){let extension;if(p===UnsignedByteType)return 5121;if(p===UnsignedShort4444Type)return 32819;if(p===UnsignedShort5551Type)return 32820;if(p===ByteType)return 5120;if(p===ShortType)return 5122;if(p===UnsignedShortType)return 5123;if(p===IntType)return 5124;if(p===UnsignedIntType)return 5125;if(p===FloatType)return 5126;if(p===HalfFloatType)return isWebGL2?5131:(extension=extensions.get("OES_texture_half_float"),extension!==null?extension.HALF_FLOAT_OES:null);if(p===AlphaFormat)return 6406;if(p===RGBAFormat)return 6408;if(p===LuminanceFormat)return 6409;if(p===LuminanceAlphaFormat)return 6410;if(p===DepthFormat)return 6402;if(p===DepthStencilFormat)return 34041;if(p===RGBFormat)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(p===_SRGBAFormat)return extension=extensions.get("EXT_sRGB"),extension!==null?extension.SRGB_ALPHA_EXT:null;if(p===RedFormat)return 6403;if(p===RedIntegerFormat)return 36244;if(p===RGFormat)return 33319;if(p===RGIntegerFormat)return 33320;if(p===RGBAIntegerFormat)return 36249;if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format)if(encoding===sRGBEncoding)if(extension=extensions.get("WEBGL_compressed_texture_s3tc_srgb"),extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(extension=extensions.get("WEBGL_compressed_texture_s3tc"),extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format)if(extension=extensions.get("WEBGL_compressed_texture_pvrtc"),extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(p===RGB_ETC1_Format)return extension=extensions.get("WEBGL_compressed_texture_etc1"),extension!==null?extension.COMPRESSED_RGB_ETC1_WEBGL:null;if(p===RGB_ETC2_Format||p===RGBA_ETC2_EAC_Format)if(extension=extensions.get("WEBGL_compressed_texture_etc"),extension!==null){if(p===RGB_ETC2_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ETC2:extension.COMPRESSED_RGB8_ETC2;if(p===RGBA_ETC2_EAC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:extension.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format)if(extension=extensions.get("WEBGL_compressed_texture_astc"),extension!==null){if(p===RGBA_ASTC_4x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:extension.COMPRESSED_RGBA_ASTC_4x4_KHR;if(p===RGBA_ASTC_5x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:extension.COMPRESSED_RGBA_ASTC_5x4_KHR;if(p===RGBA_ASTC_5x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:extension.COMPRESSED_RGBA_ASTC_5x5_KHR;if(p===RGBA_ASTC_6x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:extension.COMPRESSED_RGBA_ASTC_6x5_KHR;if(p===RGBA_ASTC_6x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:extension.COMPRESSED_RGBA_ASTC_6x6_KHR;if(p===RGBA_ASTC_8x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:extension.COMPRESSED_RGBA_ASTC_8x5_KHR;if(p===RGBA_ASTC_8x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:extension.COMPRESSED_RGBA_ASTC_8x6_KHR;if(p===RGBA_ASTC_8x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:extension.COMPRESSED_RGBA_ASTC_8x8_KHR;if(p===RGBA_ASTC_10x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:extension.COMPRESSED_RGBA_ASTC_10x5_KHR;if(p===RGBA_ASTC_10x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:extension.COMPRESSED_RGBA_ASTC_10x6_KHR;if(p===RGBA_ASTC_10x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:extension.COMPRESSED_RGBA_ASTC_10x8_KHR;if(p===RGBA_ASTC_10x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:extension.COMPRESSED_RGBA_ASTC_10x10_KHR;if(p===RGBA_ASTC_12x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:extension.COMPRESSED_RGBA_ASTC_12x10_KHR;if(p===RGBA_ASTC_12x12_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:extension.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(p===RGBA_BPTC_Format)if(extension=extensions.get("EXT_texture_compression_bptc"),extension!==null){if(p===RGBA_BPTC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:extension.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;return p===UnsignedInt248Type?isWebGL2?34042:(extension=extensions.get("WEBGL_depth_texture"),extension!==null?extension.UNSIGNED_INT_24_8_WEBGL:null):gl[p]!==void 0?gl[p]:null}return{convert}}var ArrayCamera=class extends PerspectiveCamera{constructor(array=[]){super(),this.isArrayCamera=!0,this.cameras=array}},Group=class extends Object3D{constructor(){super(),this.isGroup=!0,this.type="Group"}},_moveEvent={type:"move"},WebXRController=class{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Group,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Group,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Vector3,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Vector3),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Group,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Vector3,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Vector3),this._grip}dispatchEvent(event){return this._targetRay!==null&&this._targetRay.dispatchEvent(event),this._grip!==null&&this._grip.dispatchEvent(event),this._hand!==null&&this._hand.dispatchEvent(event),this}connect(inputSource){if(inputSource&&inputSource.hand){let hand=this._hand;if(hand)for(let inputjoint of inputSource.hand.values())this._getHandJoint(hand,inputjoint)}return this.dispatchEvent({type:"connected",data:inputSource}),this}disconnect(inputSource){return this.dispatchEvent({type:"disconnected",data:inputSource}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(inputSource,frame,referenceSpace){let inputPose=null,gripPose=null,handPose=null,targetRay=this._targetRay,grip=this._grip,hand=this._hand;if(inputSource&&frame.session.visibilityState!=="visible-blurred"){if(hand&&inputSource.hand){handPose=!0;for(let inputjoint of inputSource.hand.values()){let jointPose=frame.getJointPose(inputjoint,referenceSpace),joint=this._getHandJoint(hand,inputjoint);jointPose!==null&&(joint.matrix.fromArray(jointPose.transform.matrix),joint.matrix.decompose(joint.position,joint.rotation,joint.scale),joint.jointRadius=jointPose.radius),joint.visible=jointPose!==null}let indexTip=hand.joints["index-finger-tip"],thumbTip=hand.joints["thumb-tip"],distance=indexTip.position.distanceTo(thumbTip.position),distanceToPinch=.02,threshold=.005;hand.inputState.pinching&&distance>distanceToPinch+threshold?(hand.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:inputSource.handedness,target:this})):!hand.inputState.pinching&&distance<=distanceToPinch-threshold&&(hand.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:inputSource.handedness,target:this}))}else grip!==null&&inputSource.gripSpace&&(gripPose=frame.getPose(inputSource.gripSpace,referenceSpace),gripPose!==null&&(grip.matrix.fromArray(gripPose.transform.matrix),grip.matrix.decompose(grip.position,grip.rotation,grip.scale),gripPose.linearVelocity?(grip.hasLinearVelocity=!0,grip.linearVelocity.copy(gripPose.linearVelocity)):grip.hasLinearVelocity=!1,gripPose.angularVelocity?(grip.hasAngularVelocity=!0,grip.angularVelocity.copy(gripPose.angularVelocity)):grip.hasAngularVelocity=!1));targetRay!==null&&(inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace),inputPose===null&&gripPose!==null&&(inputPose=gripPose),inputPose!==null&&(targetRay.matrix.fromArray(inputPose.transform.matrix),targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale),inputPose.linearVelocity?(targetRay.hasLinearVelocity=!0,targetRay.linearVelocity.copy(inputPose.linearVelocity)):targetRay.hasLinearVelocity=!1,inputPose.angularVelocity?(targetRay.hasAngularVelocity=!0,targetRay.angularVelocity.copy(inputPose.angularVelocity)):targetRay.hasAngularVelocity=!1,this.dispatchEvent(_moveEvent)))}return targetRay!==null&&(targetRay.visible=inputPose!==null),grip!==null&&(grip.visible=gripPose!==null),hand!==null&&(hand.visible=handPose!==null),this}_getHandJoint(hand,inputjoint){if(hand.joints[inputjoint.jointName]===void 0){let joint=new Group;joint.matrixAutoUpdate=!1,joint.visible=!1,hand.joints[inputjoint.jointName]=joint,hand.add(joint)}return hand.joints[inputjoint.jointName]}},DepthTexture=class extends Texture{constructor(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){if(format=format!==void 0?format:DepthFormat,format!==DepthFormat&&format!==DepthStencilFormat)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");type===void 0&&format===DepthFormat&&(type=UnsignedIntType),type===void 0&&format===DepthStencilFormat&&(type=UnsignedInt248Type),super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),this.isDepthTexture=!0,this.image={width,height},this.magFilter=magFilter!==void 0?magFilter:NearestFilter,this.minFilter=minFilter!==void 0?minFilter:NearestFilter,this.flipY=!1,this.generateMipmaps=!1}},WebXRManager=class extends EventDispatcher{constructor(renderer,gl){super();let scope=this,session=null,framebufferScaleFactor=1,referenceSpace=null,referenceSpaceType="local-floor",customReferenceSpace=null,pose=null,glBinding=null,glProjLayer=null,glBaseLayer=null,xrFrame=null,attributes=gl.getContextAttributes(),initialRenderTarget=null,newRenderTarget=null,controllers=[],controllerInputSources=[],planes=new Set,planesLastChangedTimes=new Map,cameraL=new PerspectiveCamera;cameraL.layers.enable(1),cameraL.viewport=new Vector4;let cameraR=new PerspectiveCamera;cameraR.layers.enable(2),cameraR.viewport=new Vector4;let cameras=[cameraL,cameraR],cameraVR=new ArrayCamera;cameraVR.layers.enable(1),cameraVR.layers.enable(2);let _currentDepthNear=null,_currentDepthFar=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(index){let controller=controllers[index];return controller===void 0&&(controller=new WebXRController,controllers[index]=controller),controller.getTargetRaySpace()},this.getControllerGrip=function(index){let controller=controllers[index];return controller===void 0&&(controller=new WebXRController,controllers[index]=controller),controller.getGripSpace()},this.getHand=function(index){let controller=controllers[index];return controller===void 0&&(controller=new WebXRController,controllers[index]=controller),controller.getHandSpace()};function onSessionEvent(event){let controllerIndex=controllerInputSources.indexOf(event.inputSource);if(controllerIndex===-1)return;let controller=controllers[controllerIndex];controller!==void 0&&controller.dispatchEvent({type:event.type,data:event.inputSource})}function onSessionEnd(){session.removeEventListener("select",onSessionEvent),session.removeEventListener("selectstart",onSessionEvent),session.removeEventListener("selectend",onSessionEvent),session.removeEventListener("squeeze",onSessionEvent),session.removeEventListener("squeezestart",onSessionEvent),session.removeEventListener("squeezeend",onSessionEvent),session.removeEventListener("end",onSessionEnd),session.removeEventListener("inputsourceschange",onInputSourcesChange);for(let i=0;i<controllers.length;i++){let inputSource=controllerInputSources[i];inputSource!==null&&(controllerInputSources[i]=null,controllers[i].disconnect(inputSource))}_currentDepthNear=null,_currentDepthFar=null,renderer.setRenderTarget(initialRenderTarget),glBaseLayer=null,glProjLayer=null,glBinding=null,session=null,newRenderTarget=null,animation.stop(),scope.isPresenting=!1,scope.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(value){framebufferScaleFactor=value,scope.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(value){referenceSpaceType=value,scope.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return customReferenceSpace||referenceSpace},this.setReferenceSpace=function(space){customReferenceSpace=space},this.getBaseLayer=function(){return glProjLayer!==null?glProjLayer:glBaseLayer},this.getBinding=function(){return glBinding},this.getFrame=function(){return xrFrame},this.getSession=function(){return session},this.setSession=function(value){return __async(this,null,function*(){if(session=value,session!==null){if(initialRenderTarget=renderer.getRenderTarget(),session.addEventListener("select",onSessionEvent),session.addEventListener("selectstart",onSessionEvent),session.addEventListener("selectend",onSessionEvent),session.addEventListener("squeeze",onSessionEvent),session.addEventListener("squeezestart",onSessionEvent),session.addEventListener("squeezeend",onSessionEvent),session.addEventListener("end",onSessionEnd),session.addEventListener("inputsourceschange",onInputSourcesChange),attributes.xrCompatible!==!0&&(yield gl.makeXRCompatible()),session.renderState.layers===void 0||renderer.capabilities.isWebGL2===!1){let layerInit={antialias:session.renderState.layers===void 0?attributes.antialias:!0,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil,framebufferScaleFactor};glBaseLayer=new XRWebGLLayer(session,gl,layerInit),session.updateRenderState({baseLayer:glBaseLayer}),newRenderTarget=new WebGLRenderTarget(glBaseLayer.framebufferWidth,glBaseLayer.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,encoding:renderer.outputEncoding,stencilBuffer:attributes.stencil})}else{let depthFormat=null,depthType=null,glDepthFormat=null;attributes.depth&&(glDepthFormat=attributes.stencil?35056:33190,depthFormat=attributes.stencil?DepthStencilFormat:DepthFormat,depthType=attributes.stencil?UnsignedInt248Type:UnsignedIntType);let projectionlayerInit={colorFormat:32856,depthFormat:glDepthFormat,scaleFactor:framebufferScaleFactor};glBinding=new XRWebGLBinding(session,gl),glProjLayer=glBinding.createProjectionLayer(projectionlayerInit),session.updateRenderState({layers:[glProjLayer]}),newRenderTarget=new WebGLRenderTarget(glProjLayer.textureWidth,glProjLayer.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(glProjLayer.textureWidth,glProjLayer.textureHeight,depthType,void 0,void 0,void 0,void 0,void 0,void 0,depthFormat),stencilBuffer:attributes.stencil,encoding:renderer.outputEncoding,samples:attributes.antialias?4:0});let renderTargetProperties=renderer.properties.get(newRenderTarget);renderTargetProperties.__ignoreDepthValues=glProjLayer.ignoreDepthValues}newRenderTarget.isXRRenderTarget=!0,this.setFoveation(1),customReferenceSpace=null,referenceSpace=yield session.requestReferenceSpace(referenceSpaceType),animation.setContext(session),animation.start(),scope.isPresenting=!0,scope.dispatchEvent({type:"sessionstart"})}})};function onInputSourcesChange(event){for(let i=0;i<event.removed.length;i++){let inputSource=event.removed[i],index=controllerInputSources.indexOf(inputSource);index>=0&&(controllerInputSources[index]=null,controllers[index].disconnect(inputSource))}for(let i=0;i<event.added.length;i++){let inputSource=event.added[i],controllerIndex=controllerInputSources.indexOf(inputSource);if(controllerIndex===-1){for(let i2=0;i2<controllers.length;i2++)if(i2>=controllerInputSources.length){controllerInputSources.push(inputSource),controllerIndex=i2;break}else if(controllerInputSources[i2]===null){controllerInputSources[i2]=inputSource,controllerIndex=i2;break}if(controllerIndex===-1)break}let controller=controllers[controllerIndex];controller&&controller.connect(inputSource)}}let cameraLPos=new Vector3,cameraRPos=new Vector3;function setProjectionFromUnion(camera,cameraL2,cameraR2){cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld),cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);let ipd=cameraLPos.distanceTo(cameraRPos),projL=cameraL2.projectionMatrix.elements,projR=cameraR2.projectionMatrix.elements,near=projL[14]/(projL[10]-1),far=projL[14]/(projL[10]+1),topFov=(projL[9]+1)/projL[5],bottomFov=(projL[9]-1)/projL[5],leftFov=(projL[8]-1)/projL[0],rightFov=(projR[8]+1)/projR[0],left=near*leftFov,right=near*rightFov,zOffset=ipd/(-leftFov+rightFov),xOffset=zOffset*-leftFov;cameraL2.matrixWorld.decompose(camera.position,camera.quaternion,camera.scale),camera.translateX(xOffset),camera.translateZ(zOffset),camera.matrixWorld.compose(camera.position,camera.quaternion,camera.scale),camera.matrixWorldInverse.copy(camera.matrixWorld).invert();let near2=near+zOffset,far2=far+zOffset,left2=left-xOffset,right2=right+(ipd-xOffset),top2=topFov*far/far2*near2,bottom2=bottomFov*far/far2*near2;camera.projectionMatrix.makePerspective(left2,right2,top2,bottom2,near2,far2)}function updateCamera(camera,parent){parent===null?camera.matrixWorld.copy(camera.matrix):camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix),camera.matrixWorldInverse.copy(camera.matrixWorld).invert()}this.updateCamera=function(camera){if(session===null)return;cameraVR.near=cameraR.near=cameraL.near=camera.near,cameraVR.far=cameraR.far=cameraL.far=camera.far,(_currentDepthNear!==cameraVR.near||_currentDepthFar!==cameraVR.far)&&(session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far}),_currentDepthNear=cameraVR.near,_currentDepthFar=cameraVR.far);let parent=camera.parent,cameras2=cameraVR.cameras;updateCamera(cameraVR,parent);for(let i=0;i<cameras2.length;i++)updateCamera(cameras2[i],parent);cameraVR.matrixWorld.decompose(cameraVR.position,cameraVR.quaternion,cameraVR.scale),camera.matrix.copy(cameraVR.matrix),camera.matrix.decompose(camera.position,camera.quaternion,camera.scale);let children=camera.children;for(let i=0,l=children.length;i<l;i++)children[i].updateMatrixWorld(!0);cameras2.length===2?setProjectionFromUnion(cameraVR,cameraL,cameraR):cameraVR.projectionMatrix.copy(cameraL.projectionMatrix)},this.getCamera=function(){return cameraVR},this.getFoveation=function(){if(glProjLayer!==null)return glProjLayer.fixedFoveation;if(glBaseLayer!==null)return glBaseLayer.fixedFoveation},this.setFoveation=function(foveation){glProjLayer!==null&&(glProjLayer.fixedFoveation=foveation),glBaseLayer!==null&&glBaseLayer.fixedFoveation!==void 0&&(glBaseLayer.fixedFoveation=foveation)},this.getPlanes=function(){return planes};let onAnimationFrameCallback=null;function onAnimationFrame(time,frame){if(pose=frame.getViewerPose(customReferenceSpace||referenceSpace),xrFrame=frame,pose!==null){let views=pose.views;glBaseLayer!==null&&(renderer.setRenderTargetFramebuffer(newRenderTarget,glBaseLayer.framebuffer),renderer.setRenderTarget(newRenderTarget));let cameraVRNeedsUpdate=!1;views.length!==cameraVR.cameras.length&&(cameraVR.cameras.length=0,cameraVRNeedsUpdate=!0);for(let i=0;i<views.length;i++){let view=views[i],viewport=null;if(glBaseLayer!==null)viewport=glBaseLayer.getViewport(view);else{let glSubImage=glBinding.getViewSubImage(glProjLayer,view);viewport=glSubImage.viewport,i===0&&(renderer.setRenderTargetTextures(newRenderTarget,glSubImage.colorTexture,glProjLayer.ignoreDepthValues?void 0:glSubImage.depthStencilTexture),renderer.setRenderTarget(newRenderTarget))}let camera=cameras[i];camera===void 0&&(camera=new PerspectiveCamera,camera.layers.enable(i),camera.viewport=new Vector4,cameras[i]=camera),camera.matrix.fromArray(view.transform.matrix),camera.projectionMatrix.fromArray(view.projectionMatrix),camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height),i===0&&cameraVR.matrix.copy(camera.matrix),cameraVRNeedsUpdate===!0&&cameraVR.cameras.push(camera)}}for(let i=0;i<controllers.length;i++){let inputSource=controllerInputSources[i],controller=controllers[i];inputSource!==null&&controller!==void 0&&controller.update(inputSource,frame,customReferenceSpace||referenceSpace)}if(onAnimationFrameCallback&&onAnimationFrameCallback(time,frame),frame.detectedPlanes){scope.dispatchEvent({type:"planesdetected",data:frame.detectedPlanes});let planesToRemove=null;for(let plane of planes)frame.detectedPlanes.has(plane)||(planesToRemove===null&&(planesToRemove=[]),planesToRemove.push(plane));if(planesToRemove!==null)for(let plane of planesToRemove)planes.delete(plane),planesLastChangedTimes.delete(plane),scope.dispatchEvent({type:"planeremoved",data:plane});for(let plane of frame.detectedPlanes)if(!planes.has(plane))planes.add(plane),planesLastChangedTimes.set(plane,frame.lastChangedTime),scope.dispatchEvent({type:"planeadded",data:plane});else{let lastKnownTime=planesLastChangedTimes.get(plane);plane.lastChangedTime>lastKnownTime&&(planesLastChangedTimes.set(plane,plane.lastChangedTime),scope.dispatchEvent({type:"planechanged",data:plane}))}}xrFrame=null}let animation=new WebGLAnimation;animation.setAnimationLoop(onAnimationFrame),this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback},this.dispose=function(){}}};function WebGLMaterials(renderer,properties){function refreshFogUniforms(uniforms,fog){fog.color.getRGB(uniforms.fogColor.value,getUnlitUniformColorSpace(renderer)),fog.isFog?(uniforms.fogNear.value=fog.near,uniforms.fogFar.value=fog.far):fog.isFogExp2&&(uniforms.fogDensity.value=fog.density)}function refreshMaterialUniforms(uniforms,material,pixelRatio,height,transmissionRenderTarget){material.isMeshBasicMaterial||material.isMeshLambertMaterial?refreshUniformsCommon(uniforms,material):material.isMeshToonMaterial?(refreshUniformsCommon(uniforms,material),refreshUniformsToon(uniforms,material)):material.isMeshPhongMaterial?(refreshUniformsCommon(uniforms,material),refreshUniformsPhong(uniforms,material)):material.isMeshStandardMaterial?(refreshUniformsCommon(uniforms,material),refreshUniformsStandard(uniforms,material),material.isMeshPhysicalMaterial&&refreshUniformsPhysical(uniforms,material,transmissionRenderTarget)):material.isMeshMatcapMaterial?(refreshUniformsCommon(uniforms,material),refreshUniformsMatcap(uniforms,material)):material.isMeshDepthMaterial?refreshUniformsCommon(uniforms,material):material.isMeshDistanceMaterial?(refreshUniformsCommon(uniforms,material),refreshUniformsDistance(uniforms,material)):material.isMeshNormalMaterial?refreshUniformsCommon(uniforms,material):material.isLineBasicMaterial?(refreshUniformsLine(uniforms,material),material.isLineDashedMaterial&&refreshUniformsDash(uniforms,material)):material.isPointsMaterial?refreshUniformsPoints(uniforms,material,pixelRatio,height):material.isSpriteMaterial?refreshUniformsSprites(uniforms,material):material.isShadowMaterial?(uniforms.color.value.copy(material.color),uniforms.opacity.value=material.opacity):material.isShaderMaterial&&(material.uniformsNeedUpdate=!1)}function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity,material.color&&uniforms.diffuse.value.copy(material.color),material.emissive&&uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity),material.map&&(uniforms.map.value=material.map),material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale,material.side===BackSide&&(uniforms.bumpScale.value*=-1)),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale),material.side===BackSide&&uniforms.normalScale.value.negate()),material.specularMap&&(uniforms.specularMap.value=material.specularMap),material.alphaTest>0&&(uniforms.alphaTest.value=material.alphaTest);let envMap=properties.get(material).envMap;if(envMap&&(uniforms.envMap.value=envMap,uniforms.flipEnvMap.value=envMap.isCubeTexture&&envMap.isRenderTargetTexture===!1?-1:1,uniforms.reflectivity.value=material.reflectivity,uniforms.ior.value=material.ior,uniforms.refractionRatio.value=material.refractionRatio),material.lightMap){uniforms.lightMap.value=material.lightMap;let scaleFactor=renderer.physicallyCorrectLights!==!0?Math.PI:1;uniforms.lightMapIntensity.value=material.lightMapIntensity*scaleFactor}material.aoMap&&(uniforms.aoMap.value=material.aoMap,uniforms.aoMapIntensity.value=material.aoMapIntensity);let uvScaleMap;material.map?uvScaleMap=material.map:material.specularMap?uvScaleMap=material.specularMap:material.displacementMap?uvScaleMap=material.displacementMap:material.normalMap?uvScaleMap=material.normalMap:material.bumpMap?uvScaleMap=material.bumpMap:material.roughnessMap?uvScaleMap=material.roughnessMap:material.metalnessMap?uvScaleMap=material.metalnessMap:material.alphaMap?uvScaleMap=material.alphaMap:material.emissiveMap?uvScaleMap=material.emissiveMap:material.clearcoatMap?uvScaleMap=material.clearcoatMap:material.clearcoatNormalMap?uvScaleMap=material.clearcoatNormalMap:material.clearcoatRoughnessMap?uvScaleMap=material.clearcoatRoughnessMap:material.iridescenceMap?uvScaleMap=material.iridescenceMap:material.iridescenceThicknessMap?uvScaleMap=material.iridescenceThicknessMap:material.specularIntensityMap?uvScaleMap=material.specularIntensityMap:material.specularColorMap?uvScaleMap=material.specularColorMap:material.transmissionMap?uvScaleMap=material.transmissionMap:material.thicknessMap?uvScaleMap=material.thicknessMap:material.sheenColorMap?uvScaleMap=material.sheenColorMap:material.sheenRoughnessMap&&(uvScaleMap=material.sheenRoughnessMap),uvScaleMap!==void 0&&(uvScaleMap.isWebGLRenderTarget&&(uvScaleMap=uvScaleMap.texture),uvScaleMap.matrixAutoUpdate===!0&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix));let uv2ScaleMap;material.aoMap?uv2ScaleMap=material.aoMap:material.lightMap&&(uv2ScaleMap=material.lightMap),uv2ScaleMap!==void 0&&(uv2ScaleMap.isWebGLRenderTarget&&(uv2ScaleMap=uv2ScaleMap.texture),uv2ScaleMap.matrixAutoUpdate===!0&&uv2ScaleMap.updateMatrix(),uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix))}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value.copy(material.color),uniforms.opacity.value=material.opacity}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize,uniforms.totalSize.value=material.dashSize+material.gapSize,uniforms.scale.value=material.scale}function refreshUniformsPoints(uniforms,material,pixelRatio,height){uniforms.diffuse.value.copy(material.color),uniforms.opacity.value=material.opacity,uniforms.size.value=material.size*pixelRatio,uniforms.scale.value=height*.5,material.map&&(uniforms.map.value=material.map),material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap),material.alphaTest>0&&(uniforms.alphaTest.value=material.alphaTest);let uvScaleMap;material.map?uvScaleMap=material.map:material.alphaMap&&(uvScaleMap=material.alphaMap),uvScaleMap!==void 0&&(uvScaleMap.matrixAutoUpdate===!0&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix))}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value.copy(material.color),uniforms.opacity.value=material.opacity,uniforms.rotation.value=material.rotation,material.map&&(uniforms.map.value=material.map),material.alphaMap&&(uniforms.alphaMap.value=material.alphaMap),material.alphaTest>0&&(uniforms.alphaTest.value=material.alphaTest);let uvScaleMap;material.map?uvScaleMap=material.map:material.alphaMap&&(uvScaleMap=material.alphaMap),uvScaleMap!==void 0&&(uvScaleMap.matrixAutoUpdate===!0&&uvScaleMap.updateMatrix(),uniforms.uvTransform.value.copy(uvScaleMap.matrix))}function refreshUniformsPhong(uniforms,material){uniforms.specular.value.copy(material.specular),uniforms.shininess.value=Math.max(material.shininess,1e-4)}function refreshUniformsToon(uniforms,material){material.gradientMap&&(uniforms.gradientMap.value=material.gradientMap)}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness,uniforms.metalness.value=material.metalness,material.roughnessMap&&(uniforms.roughnessMap.value=material.roughnessMap),material.metalnessMap&&(uniforms.metalnessMap.value=material.metalnessMap),properties.get(material).envMap&&(uniforms.envMapIntensity.value=material.envMapIntensity)}function refreshUniformsPhysical(uniforms,material,transmissionRenderTarget){uniforms.ior.value=material.ior,material.sheen>0&&(uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen),uniforms.sheenRoughness.value=material.sheenRoughness,material.sheenColorMap&&(uniforms.sheenColorMap.value=material.sheenColorMap),material.sheenRoughnessMap&&(uniforms.sheenRoughnessMap.value=material.sheenRoughnessMap)),material.clearcoat>0&&(uniforms.clearcoat.value=material.clearcoat,uniforms.clearcoatRoughness.value=material.clearcoatRoughness,material.clearcoatMap&&(uniforms.clearcoatMap.value=material.clearcoatMap),material.clearcoatRoughnessMap&&(uniforms.clearcoatRoughnessMap.value=material.clearcoatRoughnessMap),material.clearcoatNormalMap&&(uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale),uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap,material.side===BackSide&&uniforms.clearcoatNormalScale.value.negate())),material.iridescence>0&&(uniforms.iridescence.value=material.iridescence,uniforms.iridescenceIOR.value=material.iridescenceIOR,uniforms.iridescenceThicknessMinimum.value=material.iridescenceThicknessRange[0],uniforms.iridescenceThicknessMaximum.value=material.iridescenceThicknessRange[1],material.iridescenceMap&&(uniforms.iridescenceMap.value=material.iridescenceMap),material.iridescenceThicknessMap&&(uniforms.iridescenceThicknessMap.value=material.iridescenceThicknessMap)),material.transmission>0&&(uniforms.transmission.value=material.transmission,uniforms.transmissionSamplerMap.value=transmissionRenderTarget.texture,uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width,transmissionRenderTarget.height),material.transmissionMap&&(uniforms.transmissionMap.value=material.transmissionMap),uniforms.thickness.value=material.thickness,material.thicknessMap&&(uniforms.thicknessMap.value=material.thicknessMap),uniforms.attenuationDistance.value=material.attenuationDistance,uniforms.attenuationColor.value.copy(material.attenuationColor)),uniforms.specularIntensity.value=material.specularIntensity,uniforms.specularColor.value.copy(material.specularColor),material.specularIntensityMap&&(uniforms.specularIntensityMap.value=material.specularIntensityMap),material.specularColorMap&&(uniforms.specularColorMap.value=material.specularColorMap)}function refreshUniformsMatcap(uniforms,material){material.matcap&&(uniforms.matcap.value=material.matcap)}function refreshUniformsDistance(uniforms,material){uniforms.referencePosition.value.copy(material.referencePosition),uniforms.nearDistance.value=material.nearDistance,uniforms.farDistance.value=material.farDistance}return{refreshFogUniforms,refreshMaterialUniforms}}function WebGLUniformsGroups(gl,info,capabilities,state){let buffers={},updateList={},allocatedBindingPoints=[],maxBindingPoints=capabilities.isWebGL2?gl.getParameter(35375):0;function bind(uniformsGroup,program){let webglProgram=program.program;state.uniformBlockBinding(uniformsGroup,webglProgram)}function update(uniformsGroup,program){let buffer=buffers[uniformsGroup.id];buffer===void 0&&(prepareUniformsGroup(uniformsGroup),buffer=createBuffer(uniformsGroup),buffers[uniformsGroup.id]=buffer,uniformsGroup.addEventListener("dispose",onUniformsGroupsDispose));let webglProgram=program.program;state.updateUBOMapping(uniformsGroup,webglProgram);let frame=info.render.frame;updateList[uniformsGroup.id]!==frame&&(updateBufferData(uniformsGroup),updateList[uniformsGroup.id]=frame)}function createBuffer(uniformsGroup){let bindingPointIndex=allocateBindingPointIndex();uniformsGroup.__bindingPointIndex=bindingPointIndex;let buffer=gl.createBuffer(),size=uniformsGroup.__size,usage=uniformsGroup.usage;return gl.bindBuffer(35345,buffer),gl.bufferData(35345,size,usage),gl.bindBuffer(35345,null),gl.bindBufferBase(35345,bindingPointIndex,buffer),buffer}function allocateBindingPointIndex(){for(let i=0;i<maxBindingPoints;i++)if(allocatedBindingPoints.indexOf(i)===-1)return allocatedBindingPoints.push(i),i;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function updateBufferData(uniformsGroup){let buffer=buffers[uniformsGroup.id],uniforms=uniformsGroup.uniforms,cache=uniformsGroup.__cache;gl.bindBuffer(35345,buffer);for(let i=0,il=uniforms.length;i<il;i++){let uniform=uniforms[i];if(hasUniformChanged(uniform,i,cache)===!0){let value=uniform.value,offset=uniform.__offset;typeof value=="number"?(uniform.__data[0]=value,gl.bufferSubData(35345,offset,uniform.__data)):(uniform.value.isMatrix3?(uniform.__data[0]=uniform.value.elements[0],uniform.__data[1]=uniform.value.elements[1],uniform.__data[2]=uniform.value.elements[2],uniform.__data[3]=uniform.value.elements[0],uniform.__data[4]=uniform.value.elements[3],uniform.__data[5]=uniform.value.elements[4],uniform.__data[6]=uniform.value.elements[5],uniform.__data[7]=uniform.value.elements[0],uniform.__data[8]=uniform.value.elements[6],uniform.__data[9]=uniform.value.elements[7],uniform.__data[10]=uniform.value.elements[8],uniform.__data[11]=uniform.value.elements[0]):value.toArray(uniform.__data),gl.bufferSubData(35345,offset,uniform.__data))}}gl.bindBuffer(35345,null)}function hasUniformChanged(uniform,index,cache){let value=uniform.value;if(cache[index]===void 0)return typeof value=="number"?cache[index]=value:cache[index]=value.clone(),!0;if(typeof value=="number"){if(cache[index]!==value)return cache[index]=value,!0}else{let cachedObject=cache[index];if(cachedObject.equals(value)===!1)return cachedObject.copy(value),!0}return!1}function prepareUniformsGroup(uniformsGroup){let uniforms=uniformsGroup.uniforms,offset=0,chunkSize=16,chunkOffset=0;for(let i=0,l=uniforms.length;i<l;i++){let uniform=uniforms[i],info2=getUniformSize(uniform);if(uniform.__data=new Float32Array(info2.storage/Float32Array.BYTES_PER_ELEMENT),uniform.__offset=offset,i>0){chunkOffset=offset%chunkSize;let remainingSizeInChunk=chunkSize-chunkOffset;chunkOffset!==0&&remainingSizeInChunk-info2.boundary<0&&(offset+=chunkSize-chunkOffset,uniform.__offset=offset)}offset+=info2.storage}return chunkOffset=offset%chunkSize,chunkOffset>0&&(offset+=chunkSize-chunkOffset),uniformsGroup.__size=offset,uniformsGroup.__cache={},this}function getUniformSize(uniform){let value=uniform.value,info2={boundary:0,storage:0};return typeof value=="number"?(info2.boundary=4,info2.storage=4):value.isVector2?(info2.boundary=8,info2.storage=8):value.isVector3||value.isColor?(info2.boundary=16,info2.storage=12):value.isVector4?(info2.boundary=16,info2.storage=16):value.isMatrix3?(info2.boundary=48,info2.storage=48):value.isMatrix4?(info2.boundary=64,info2.storage=64):value.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",value),info2}function onUniformsGroupsDispose(event){let uniformsGroup=event.target;uniformsGroup.removeEventListener("dispose",onUniformsGroupsDispose);let index=allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);allocatedBindingPoints.splice(index,1),gl.deleteBuffer(buffers[uniformsGroup.id]),delete buffers[uniformsGroup.id],delete updateList[uniformsGroup.id]}function dispose(){for(let id2 in buffers)gl.deleteBuffer(buffers[id2]);allocatedBindingPoints=[],buffers={},updateList={}}return{bind,update,dispose}}function createCanvasElement(){let canvas=createElementNS("canvas");return canvas.style.display="block",canvas}function WebGLRenderer(parameters={}){this.isWebGLRenderer=!0;let _canvas2=parameters.canvas!==void 0?parameters.canvas:createCanvasElement(),_context2=parameters.context!==void 0?parameters.context:null,_depth=parameters.depth!==void 0?parameters.depth:!0,_stencil=parameters.stencil!==void 0?parameters.stencil:!0,_antialias=parameters.antialias!==void 0?parameters.antialias:!1,_premultipliedAlpha=parameters.premultipliedAlpha!==void 0?parameters.premultipliedAlpha:!0,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==void 0?parameters.preserveDrawingBuffer:!1,_powerPreference=parameters.powerPreference!==void 0?parameters.powerPreference:"default",_failIfMajorPerformanceCaveat=parameters.failIfMajorPerformanceCaveat!==void 0?parameters.failIfMajorPerformanceCaveat:!1,_alpha;_context2!==null?_alpha=_context2.getContextAttributes().alpha:_alpha=parameters.alpha!==void 0?parameters.alpha:!1;let currentRenderList=null,currentRenderState=null,renderListStack=[],renderStateStack=[];this.domElement=_canvas2,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=LinearEncoding,this.physicallyCorrectLights=!1,this.toneMapping=NoToneMapping,this.toneMappingExposure=1;let _this=this,_isContextLost=!1,_currentActiveCubeFace=0,_currentActiveMipmapLevel=0,_currentRenderTarget=null,_currentMaterialId=-1,_currentCamera=null,_currentViewport=new Vector4,_currentScissor=new Vector4,_currentScissorTest=null,_width=_canvas2.width,_height=_canvas2.height,_pixelRatio=1,_opaqueSort=null,_transparentSort=null,_viewport=new Vector4(0,0,_width,_height),_scissor=new Vector4(0,0,_width,_height),_scissorTest=!1,_frustum=new Frustum,_clippingEnabled=!1,_localClippingEnabled=!1,_transmissionRenderTarget=null,_projScreenMatrix2=new Matrix4,_vector22=new Vector2,_vector3=new Vector3,_emptyScene={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1}let _gl=_context2;function getContext(contextNames,contextAttributes){for(let i=0;i<contextNames.length;i++){let contextName=contextNames[i],context=_canvas2.getContext(contextName,contextAttributes);if(context!==null)return context}return null}try{let contextAttributes={alpha:!0,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat};if("setAttribute"in _canvas2&&_canvas2.setAttribute("data-engine",`three.js r${REVISION}`),_canvas2.addEventListener("webglcontextlost",onContextLost,!1),_canvas2.addEventListener("webglcontextrestored",onContextRestore,!1),_canvas2.addEventListener("webglcontextcreationerror",onContextCreationError,!1),_gl===null){let contextNames=["webgl2","webgl","experimental-webgl"];if(_this.isWebGL1Renderer===!0&&contextNames.shift(),_gl=getContext(contextNames,contextAttributes),_gl===null)throw getContext(contextNames)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}_gl.getShaderPrecisionFormat===void 0&&(_gl.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(error){throw console.error("THREE.WebGLRenderer: "+error.message),error}let extensions,capabilities,state,info,properties,textures,cubemaps,cubeuvmaps,attributes,geometries,objects,programCache,materials2,renderLists,renderStates,clipping,shadowMap,background,morphtargets,bufferRenderer,indexedBufferRenderer,utils,bindingStates,uniformsGroups;function initGLContext(){extensions=new WebGLExtensions(_gl),capabilities=new WebGLCapabilities(_gl,extensions,parameters),extensions.init(capabilities),utils=new WebGLUtils(_gl,extensions,capabilities),state=new WebGLState(_gl,extensions,capabilities),info=new WebGLInfo,properties=new WebGLProperties,textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info),cubemaps=new WebGLCubeMaps(_this),cubeuvmaps=new WebGLCubeUVMaps(_this),attributes=new WebGLAttributes(_gl,capabilities),bindingStates=new WebGLBindingStates(_gl,extensions,attributes,capabilities),geometries=new WebGLGeometries(_gl,attributes,info,bindingStates),objects=new WebGLObjects(_gl,geometries,attributes,info),morphtargets=new WebGLMorphtargets(_gl,capabilities,textures),clipping=new WebGLClipping(properties),programCache=new WebGLPrograms(_this,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping),materials2=new WebGLMaterials(_this,properties),renderLists=new WebGLRenderLists,renderStates=new WebGLRenderStates(extensions,capabilities),background=new WebGLBackground(_this,cubemaps,cubeuvmaps,state,objects,_alpha,_premultipliedAlpha),shadowMap=new WebGLShadowMap(_this,objects,capabilities),uniformsGroups=new WebGLUniformsGroups(_gl,info,capabilities,state),bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities),indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities),info.programs=programCache.programs,_this.capabilities=capabilities,_this.extensions=extensions,_this.properties=properties,_this.renderLists=renderLists,_this.shadowMap=shadowMap,_this.state=state,_this.info=info}initGLContext();let xr=new WebXRManager(_this,_gl);this.xr=xr,this.getContext=function(){return _gl},this.getContextAttributes=function(){return _gl.getContextAttributes()},this.forceContextLoss=function(){let extension=extensions.get("WEBGL_lose_context");extension&&extension.loseContext()},this.forceContextRestore=function(){let extension=extensions.get("WEBGL_lose_context");extension&&extension.restoreContext()},this.getPixelRatio=function(){return _pixelRatio},this.setPixelRatio=function(value){value!==void 0&&(_pixelRatio=value,this.setSize(_width,_height,!1))},this.getSize=function(target){return target.set(_width,_height)},this.setSize=function(width,height,updateStyle){if(xr.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}_width=width,_height=height,_canvas2.width=Math.floor(width*_pixelRatio),_canvas2.height=Math.floor(height*_pixelRatio),updateStyle!==!1&&(_canvas2.style.width=width+"px",_canvas2.style.height=height+"px"),this.setViewport(0,0,width,height)},this.getDrawingBufferSize=function(target){return target.set(_width*_pixelRatio,_height*_pixelRatio).floor()},this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width,_height=height,_pixelRatio=pixelRatio,_canvas2.width=Math.floor(width*pixelRatio),_canvas2.height=Math.floor(height*pixelRatio),this.setViewport(0,0,width,height)},this.getCurrentViewport=function(target){return target.copy(_currentViewport)},this.getViewport=function(target){return target.copy(_viewport)},this.setViewport=function(x,y,width,height){x.isVector4?_viewport.set(x.x,x.y,x.z,x.w):_viewport.set(x,y,width,height),state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor())},this.getScissor=function(target){return target.copy(_scissor)},this.setScissor=function(x,y,width,height){x.isVector4?_scissor.set(x.x,x.y,x.z,x.w):_scissor.set(x,y,width,height),state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor())},this.getScissorTest=function(){return _scissorTest},this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean)},this.setOpaqueSort=function(method){_opaqueSort=method},this.setTransparentSort=function(method){_transparentSort=method},this.getClearColor=function(target){return target.copy(background.getClearColor())},this.setClearColor=function(){background.setClearColor.apply(background,arguments)},this.getClearAlpha=function(){return background.getClearAlpha()},this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments)},this.clear=function(color=!0,depth=!0,stencil=!0){let bits=0;color&&(bits|=16384),depth&&(bits|=256),stencil&&(bits|=1024),_gl.clear(bits)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){_canvas2.removeEventListener("webglcontextlost",onContextLost,!1),_canvas2.removeEventListener("webglcontextrestored",onContextRestore,!1),_canvas2.removeEventListener("webglcontextcreationerror",onContextCreationError,!1),renderLists.dispose(),renderStates.dispose(),properties.dispose(),cubemaps.dispose(),cubeuvmaps.dispose(),objects.dispose(),bindingStates.dispose(),uniformsGroups.dispose(),programCache.dispose(),xr.dispose(),xr.removeEventListener("sessionstart",onXRSessionStart),xr.removeEventListener("sessionend",onXRSessionEnd),_transmissionRenderTarget&&(_transmissionRenderTarget.dispose(),_transmissionRenderTarget=null),animation.stop()};function onContextLost(event){event.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),_isContextLost=!0}function onContextRestore(){console.log("THREE.WebGLRenderer: Context Restored."),_isContextLost=!1;let infoAutoReset=info.autoReset,shadowMapEnabled=shadowMap.enabled,shadowMapAutoUpdate=shadowMap.autoUpdate,shadowMapNeedsUpdate=shadowMap.needsUpdate,shadowMapType=shadowMap.type;initGLContext(),info.autoReset=infoAutoReset,shadowMap.enabled=shadowMapEnabled,shadowMap.autoUpdate=shadowMapAutoUpdate,shadowMap.needsUpdate=shadowMapNeedsUpdate,shadowMap.type=shadowMapType}function onContextCreationError(event){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",event.statusMessage)}function onMaterialDispose(event){let material=event.target;material.removeEventListener("dispose",onMaterialDispose),deallocateMaterial(material)}function deallocateMaterial(material){releaseMaterialProgramReferences(material),properties.remove(material)}function releaseMaterialProgramReferences(material){let programs=properties.get(material).programs;programs!==void 0&&(programs.forEach(function(program){programCache.releaseProgram(program)}),material.isShaderMaterial&&programCache.releaseShaderCache(material))}this.renderBufferDirect=function(camera,scene,geometry,material,object,group){scene===null&&(scene=_emptyScene);let frontFaceCW=object.isMesh&&object.matrixWorld.determinant()<0,program=setProgram(camera,scene,geometry,material,object);state.setMaterial(material,frontFaceCW);let index=geometry.index,rangeFactor=1;material.wireframe===!0&&(index=geometries.getWireframeAttribute(geometry),rangeFactor=2);let drawRange=geometry.drawRange,position=geometry.attributes.position,drawStart=drawRange.start*rangeFactor,drawEnd=(drawRange.start+drawRange.count)*rangeFactor;group!==null&&(drawStart=Math.max(drawStart,group.start*rangeFactor),drawEnd=Math.min(drawEnd,(group.start+group.count)*rangeFactor)),index!==null?(drawStart=Math.max(drawStart,0),drawEnd=Math.min(drawEnd,index.count)):position!=null&&(drawStart=Math.max(drawStart,0),drawEnd=Math.min(drawEnd,position.count));let drawCount=drawEnd-drawStart;if(drawCount<0||drawCount===1/0)return;bindingStates.setup(object,material,program,geometry,index);let attribute,renderer=bufferRenderer;if(index!==null&&(attribute=attributes.get(index),renderer=indexedBufferRenderer,renderer.setIndex(attribute)),object.isMesh)material.wireframe===!0?(state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio()),renderer.setMode(1)):renderer.setMode(4);else if(object.isLine){let lineWidth=material.linewidth;lineWidth===void 0&&(lineWidth=1),state.setLineWidth(lineWidth*getTargetPixelRatio()),object.isLineSegments?renderer.setMode(1):object.isLineLoop?renderer.setMode(2):renderer.setMode(3)}else object.isPoints?renderer.setMode(0):object.isSprite&&renderer.setMode(4);if(object.isInstancedMesh)renderer.renderInstances(drawStart,drawCount,object.count);else if(geometry.isInstancedBufferGeometry){let maxInstanceCount=geometry._maxInstanceCount!==void 0?geometry._maxInstanceCount:1/0,instanceCount=Math.min(geometry.instanceCount,maxInstanceCount);renderer.renderInstances(drawStart,drawCount,instanceCount)}else renderer.render(drawStart,drawCount)},this.compile=function(scene,camera){function prepare(material,scene2,object){material.transparent===!0&&material.side===DoubleSide?(material.side=BackSide,material.needsUpdate=!0,getProgram(material,scene2,object),material.side=FrontSide,material.needsUpdate=!0,getProgram(material,scene2,object),material.side=DoubleSide):getProgram(material,scene2,object)}currentRenderState=renderStates.get(scene),currentRenderState.init(),renderStateStack.push(currentRenderState),scene.traverseVisible(function(object){object.isLight&&object.layers.test(camera.layers)&&(currentRenderState.pushLight(object),object.castShadow&&currentRenderState.pushShadow(object))}),currentRenderState.setupLights(_this.physicallyCorrectLights),scene.traverse(function(object){let material=object.material;if(material)if(Array.isArray(material))for(let i=0;i<material.length;i++){let material2=material[i];prepare(material2,scene,object)}else prepare(material,scene,object)}),renderStateStack.pop(),currentRenderState=null};let onAnimationFrameCallback=null;function onAnimationFrame(time){onAnimationFrameCallback&&onAnimationFrameCallback(time)}function onXRSessionStart(){animation.stop()}function onXRSessionEnd(){animation.start()}let animation=new WebGLAnimation;animation.setAnimationLoop(onAnimationFrame),typeof self!="undefined"&&animation.setContext(self),this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback,xr.setAnimationLoop(callback),callback===null?animation.stop():animation.start()},xr.addEventListener("sessionstart",onXRSessionStart),xr.addEventListener("sessionend",onXRSessionEnd),this.render=function(scene,camera){if(camera!==void 0&&camera.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(_isContextLost===!0)return;scene.matrixWorldAutoUpdate===!0&&scene.updateMatrixWorld(),camera.parent===null&&camera.matrixWorldAutoUpdate===!0&&camera.updateMatrixWorld(),xr.enabled===!0&&xr.isPresenting===!0&&(xr.cameraAutoUpdate===!0&&xr.updateCamera(camera),camera=xr.getCamera()),scene.isScene===!0&&scene.onBeforeRender(_this,scene,camera,_currentRenderTarget),currentRenderState=renderStates.get(scene,renderStateStack.length),currentRenderState.init(),renderStateStack.push(currentRenderState),_projScreenMatrix2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse),_frustum.setFromProjectionMatrix(_projScreenMatrix2),_localClippingEnabled=this.localClippingEnabled,_clippingEnabled=clipping.init(this.clippingPlanes,_localClippingEnabled,camera),currentRenderList=renderLists.get(scene,renderListStack.length),currentRenderList.init(),renderListStack.push(currentRenderList),projectObject(scene,camera,0,_this.sortObjects),currentRenderList.finish(),_this.sortObjects===!0&&currentRenderList.sort(_opaqueSort,_transparentSort),_clippingEnabled===!0&&clipping.beginShadows();let shadowsArray=currentRenderState.state.shadowsArray;if(shadowMap.render(shadowsArray,scene,camera),_clippingEnabled===!0&&clipping.endShadows(),this.info.autoReset===!0&&this.info.reset(),background.render(currentRenderList,scene),currentRenderState.setupLights(_this.physicallyCorrectLights),camera.isArrayCamera){let cameras=camera.cameras;for(let i=0,l=cameras.length;i<l;i++){let camera2=cameras[i];renderScene(currentRenderList,scene,camera2,camera2.viewport)}}else renderScene(currentRenderList,scene,camera);_currentRenderTarget!==null&&(textures.updateMultisampleRenderTarget(_currentRenderTarget),textures.updateRenderTargetMipmap(_currentRenderTarget)),scene.isScene===!0&&scene.onAfterRender(_this,scene,camera),bindingStates.resetDefaultState(),_currentMaterialId=-1,_currentCamera=null,renderStateStack.pop(),renderStateStack.length>0?currentRenderState=renderStateStack[renderStateStack.length-1]:currentRenderState=null,renderListStack.pop(),renderListStack.length>0?currentRenderList=renderListStack[renderListStack.length-1]:currentRenderList=null};function projectObject(object,camera,groupOrder,sortObjects){if(object.visible===!1)return;if(object.layers.test(camera.layers)){if(object.isGroup)groupOrder=object.renderOrder;else if(object.isLOD)object.autoUpdate===!0&&object.update(camera);else if(object.isLight)currentRenderState.pushLight(object),object.castShadow&&currentRenderState.pushShadow(object);else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);let geometry=objects.update(object),material=object.material;material.visible&&currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null)}}else if((object.isMesh||object.isLine||object.isPoints)&&(object.isSkinnedMesh&&object.skeleton.frame!==info.render.frame&&(object.skeleton.update(),object.skeleton.frame=info.render.frame),!object.frustumCulled||_frustum.intersectsObject(object))){sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);let geometry=objects.update(object),material=object.material;if(Array.isArray(material)){let groups=geometry.groups;for(let i=0,l=groups.length;i<l;i++){let group=groups[i],groupMaterial=material[group.materialIndex];groupMaterial&&groupMaterial.visible&&currentRenderList.push(object,geometry,groupMaterial,groupOrder,_vector3.z,group)}}else material.visible&&currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null)}}let children=object.children;for(let i=0,l=children.length;i<l;i++)projectObject(children[i],camera,groupOrder,sortObjects)}function renderScene(currentRenderList2,scene,camera,viewport){let opaqueObjects=currentRenderList2.opaque,transmissiveObjects=currentRenderList2.transmissive,transparentObjects=currentRenderList2.transparent;currentRenderState.setupLightsView(camera),transmissiveObjects.length>0&&renderTransmissionPass(opaqueObjects,scene,camera),viewport&&state.viewport(_currentViewport.copy(viewport)),opaqueObjects.length>0&&renderObjects(opaqueObjects,scene,camera),transmissiveObjects.length>0&&renderObjects(transmissiveObjects,scene,camera),transparentObjects.length>0&&renderObjects(transparentObjects,scene,camera),state.buffers.depth.setTest(!0),state.buffers.depth.setMask(!0),state.buffers.color.setMask(!0),state.setPolygonOffset(!1)}function renderTransmissionPass(opaqueObjects,scene,camera){let isWebGL2=capabilities.isWebGL2;_transmissionRenderTarget===null&&(_transmissionRenderTarget=new WebGLRenderTarget(1,1,{generateMipmaps:!0,type:extensions.has("EXT_color_buffer_half_float")?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,samples:isWebGL2&&_antialias===!0?4:0})),_this.getDrawingBufferSize(_vector22),isWebGL2?_transmissionRenderTarget.setSize(_vector22.x,_vector22.y):_transmissionRenderTarget.setSize(floorPowerOfTwo(_vector22.x),floorPowerOfTwo(_vector22.y));let currentRenderTarget=_this.getRenderTarget();_this.setRenderTarget(_transmissionRenderTarget),_this.clear();let currentToneMapping=_this.toneMapping;_this.toneMapping=NoToneMapping,renderObjects(opaqueObjects,scene,camera),_this.toneMapping=currentToneMapping,textures.updateMultisampleRenderTarget(_transmissionRenderTarget),textures.updateRenderTargetMipmap(_transmissionRenderTarget),_this.setRenderTarget(currentRenderTarget)}function renderObjects(renderList,scene,camera){let overrideMaterial=scene.isScene===!0?scene.overrideMaterial:null;for(let i=0,l=renderList.length;i<l;i++){let renderItem=renderList[i],object=renderItem.object,geometry=renderItem.geometry,material=overrideMaterial===null?renderItem.material:overrideMaterial,group=renderItem.group;object.layers.test(camera.layers)&&renderObject(object,scene,camera,geometry,material,group)}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group),object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld),object.normalMatrix.getNormalMatrix(object.modelViewMatrix),material.onBeforeRender(_this,scene,camera,geometry,object,group),material.transparent===!0&&material.side===DoubleSide?(material.side=BackSide,material.needsUpdate=!0,_this.renderBufferDirect(camera,scene,geometry,material,object,group),material.side=FrontSide,material.needsUpdate=!0,_this.renderBufferDirect(camera,scene,geometry,material,object,group),material.side=DoubleSide):_this.renderBufferDirect(camera,scene,geometry,material,object,group),object.onAfterRender(_this,scene,camera,geometry,material,group)}function getProgram(material,scene,object){scene.isScene!==!0&&(scene=_emptyScene);let materialProperties=properties.get(material),lights=currentRenderState.state.lights,shadowsArray=currentRenderState.state.shadowsArray,lightsStateVersion=lights.state.version,parameters2=programCache.getParameters(material,lights.state,shadowsArray,scene,object),programCacheKey=programCache.getProgramCacheKey(parameters2),programs=materialProperties.programs;materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null,materialProperties.fog=scene.fog,materialProperties.envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||materialProperties.environment),programs===void 0&&(material.addEventListener("dispose",onMaterialDispose),programs=new Map,materialProperties.programs=programs);let program=programs.get(programCacheKey);if(program!==void 0){if(materialProperties.currentProgram===program&&materialProperties.lightsStateVersion===lightsStateVersion)return updateCommonMaterialProperties(material,parameters2),program}else parameters2.uniforms=programCache.getUniforms(material),material.onBuild(object,parameters2,_this),material.onBeforeCompile(parameters2,_this),program=programCache.acquireProgram(parameters2,programCacheKey),programs.set(programCacheKey,program),materialProperties.uniforms=parameters2.uniforms;let uniforms=materialProperties.uniforms;(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===!0)&&(uniforms.clippingPlanes=clipping.uniform),updateCommonMaterialProperties(material,parameters2),materialProperties.needsLights=materialNeedsLights(material),materialProperties.lightsStateVersion=lightsStateVersion,materialProperties.needsLights&&(uniforms.ambientLightColor.value=lights.state.ambient,uniforms.lightProbe.value=lights.state.probe,uniforms.directionalLights.value=lights.state.directional,uniforms.directionalLightShadows.value=lights.state.directionalShadow,uniforms.spotLights.value=lights.state.spot,uniforms.spotLightShadows.value=lights.state.spotShadow,uniforms.rectAreaLights.value=lights.state.rectArea,uniforms.ltc_1.value=lights.state.rectAreaLTC1,uniforms.ltc_2.value=lights.state.rectAreaLTC2,uniforms.pointLights.value=lights.state.point,uniforms.pointLightShadows.value=lights.state.pointShadow,uniforms.hemisphereLights.value=lights.state.hemi,uniforms.directionalShadowMap.value=lights.state.directionalShadowMap,uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix,uniforms.spotShadowMap.value=lights.state.spotShadowMap,uniforms.spotLightMatrix.value=lights.state.spotLightMatrix,uniforms.spotLightMap.value=lights.state.spotLightMap,uniforms.pointShadowMap.value=lights.state.pointShadowMap,uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix);let progUniforms=program.getUniforms(),uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);return materialProperties.currentProgram=program,materialProperties.uniformsList=uniformsList,program}function updateCommonMaterialProperties(material,parameters2){let materialProperties=properties.get(material);materialProperties.outputEncoding=parameters2.outputEncoding,materialProperties.instancing=parameters2.instancing,materialProperties.skinning=parameters2.skinning,materialProperties.morphTargets=parameters2.morphTargets,materialProperties.morphNormals=parameters2.morphNormals,materialProperties.morphColors=parameters2.morphColors,materialProperties.morphTargetsCount=parameters2.morphTargetsCount,materialProperties.numClippingPlanes=parameters2.numClippingPlanes,materialProperties.numIntersection=parameters2.numClipIntersection,materialProperties.vertexAlphas=parameters2.vertexAlphas,materialProperties.vertexTangents=parameters2.vertexTangents,materialProperties.toneMapping=parameters2.toneMapping}function setProgram(camera,scene,geometry,material,object){scene.isScene!==!0&&(scene=_emptyScene),textures.resetTextureUnits();let fog=scene.fog,environment=material.isMeshStandardMaterial?scene.environment:null,encoding=_currentRenderTarget===null?_this.outputEncoding:_currentRenderTarget.isXRRenderTarget===!0?_currentRenderTarget.texture.encoding:LinearEncoding,envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment),vertexAlphas=material.vertexColors===!0&&!!geometry.attributes.color&&geometry.attributes.color.itemSize===4,vertexTangents=!!material.normalMap&&!!geometry.attributes.tangent,morphTargets=!!geometry.morphAttributes.position,morphNormals=!!geometry.morphAttributes.normal,morphColors=!!geometry.morphAttributes.color,toneMapping=material.toneMapped?_this.toneMapping:NoToneMapping,morphAttribute=geometry.morphAttributes.position||geometry.morphAttributes.normal||geometry.morphAttributes.color,morphTargetsCount=morphAttribute!==void 0?morphAttribute.length:0,materialProperties=properties.get(material),lights=currentRenderState.state.lights;if(_clippingEnabled===!0&&(_localClippingEnabled===!0||camera!==_currentCamera)){let useCache=camera===_currentCamera&&material.id===_currentMaterialId;clipping.setState(material,camera,useCache)}let needsProgramChange=!1;material.version===materialProperties.__version?(materialProperties.needsLights&&materialProperties.lightsStateVersion!==lights.state.version||materialProperties.outputEncoding!==encoding||object.isInstancedMesh&&materialProperties.instancing===!1||!object.isInstancedMesh&&materialProperties.instancing===!0||object.isSkinnedMesh&&materialProperties.skinning===!1||!object.isSkinnedMesh&&materialProperties.skinning===!0||materialProperties.envMap!==envMap||material.fog===!0&&materialProperties.fog!==fog||materialProperties.numClippingPlanes!==void 0&&(materialProperties.numClippingPlanes!==clipping.numPlanes||materialProperties.numIntersection!==clipping.numIntersection)||materialProperties.vertexAlphas!==vertexAlphas||materialProperties.vertexTangents!==vertexTangents||materialProperties.morphTargets!==morphTargets||materialProperties.morphNormals!==morphNormals||materialProperties.morphColors!==morphColors||materialProperties.toneMapping!==toneMapping||capabilities.isWebGL2===!0&&materialProperties.morphTargetsCount!==morphTargetsCount)&&(needsProgramChange=!0):(needsProgramChange=!0,materialProperties.__version=material.version);let program=materialProperties.currentProgram;needsProgramChange===!0&&(program=getProgram(material,scene,object));let refreshProgram=!1,refreshMaterial=!1,refreshLights=!1,p_uniforms=program.getUniforms(),m_uniforms=materialProperties.uniforms;if(state.useProgram(program.program)&&(refreshProgram=!0,refreshMaterial=!0,refreshLights=!0),material.id!==_currentMaterialId&&(_currentMaterialId=material.id,refreshMaterial=!0),refreshProgram||_currentCamera!==camera){if(p_uniforms.setValue(_gl,"projectionMatrix",camera.projectionMatrix),capabilities.logarithmicDepthBuffer&&p_uniforms.setValue(_gl,"logDepthBufFC",2/(Math.log(camera.far+1)/Math.LN2)),_currentCamera!==camera&&(_currentCamera=camera,refreshMaterial=!0,refreshLights=!0),material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap){let uCamPos=p_uniforms.map.cameraPosition;uCamPos!==void 0&&uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld))}(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial)&&p_uniforms.setValue(_gl,"isOrthographic",camera.isOrthographicCamera===!0),(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.isShadowMaterial||object.isSkinnedMesh)&&p_uniforms.setValue(_gl,"viewMatrix",camera.matrixWorldInverse)}if(object.isSkinnedMesh){p_uniforms.setOptional(_gl,object,"bindMatrix"),p_uniforms.setOptional(_gl,object,"bindMatrixInverse");let skeleton=object.skeleton;skeleton&&(capabilities.floatVertexTextures?(skeleton.boneTexture===null&&skeleton.computeBoneTexture(),p_uniforms.setValue(_gl,"boneTexture",skeleton.boneTexture,textures),p_uniforms.setValue(_gl,"boneTextureSize",skeleton.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}let morphAttributes=geometry.morphAttributes;if((morphAttributes.position!==void 0||morphAttributes.normal!==void 0||morphAttributes.color!==void 0&&capabilities.isWebGL2===!0)&&morphtargets.update(object,geometry,material,program),(refreshMaterial||materialProperties.receiveShadow!==object.receiveShadow)&&(materialProperties.receiveShadow=object.receiveShadow,p_uniforms.setValue(_gl,"receiveShadow",object.receiveShadow)),material.isMeshGouraudMaterial&&material.envMap!==null&&(m_uniforms.envMap.value=envMap,m_uniforms.flipEnvMap.value=envMap.isCubeTexture&&envMap.isRenderTargetTexture===!1?-1:1),refreshMaterial&&(p_uniforms.setValue(_gl,"toneMappingExposure",_this.toneMappingExposure),materialProperties.needsLights&&markUniformsLightsNeedsUpdate(m_uniforms,refreshLights),fog&&material.fog===!0&&materials2.refreshFogUniforms(m_uniforms,fog),materials2.refreshMaterialUniforms(m_uniforms,material,_pixelRatio,_height,_transmissionRenderTarget),WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures)),material.isShaderMaterial&&material.uniformsNeedUpdate===!0&&(WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures),material.uniformsNeedUpdate=!1),material.isSpriteMaterial&&p_uniforms.setValue(_gl,"center",object.center),p_uniforms.setValue(_gl,"modelViewMatrix",object.modelViewMatrix),p_uniforms.setValue(_gl,"normalMatrix",object.normalMatrix),p_uniforms.setValue(_gl,"modelMatrix",object.matrixWorld),material.isShaderMaterial||material.isRawShaderMaterial){let groups=material.uniformsGroups;for(let i=0,l=groups.length;i<l;i++)if(capabilities.isWebGL2){let group=groups[i];uniformsGroups.update(group,program),uniformsGroups.bind(group,program)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return program}function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value,uniforms.lightProbe.needsUpdate=value,uniforms.directionalLights.needsUpdate=value,uniforms.directionalLightShadows.needsUpdate=value,uniforms.pointLights.needsUpdate=value,uniforms.pointLightShadows.needsUpdate=value,uniforms.spotLights.needsUpdate=value,uniforms.spotLightShadows.needsUpdate=value,uniforms.rectAreaLights.needsUpdate=value,uniforms.hemisphereLights.needsUpdate=value}function materialNeedsLights(material){return material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&material.lights===!0}this.getActiveCubeFace=function(){return _currentActiveCubeFace},this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel},this.getRenderTarget=function(){return _currentRenderTarget},this.setRenderTargetTextures=function(renderTarget,colorTexture,depthTexture){properties.get(renderTarget.texture).__webglTexture=colorTexture,properties.get(renderTarget.depthTexture).__webglTexture=depthTexture;let renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__hasExternalTextures=!0,renderTargetProperties.__hasExternalTextures&&(renderTargetProperties.__autoAllocateDepthBuffer=depthTexture===void 0,renderTargetProperties.__autoAllocateDepthBuffer||extensions.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),renderTargetProperties.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(renderTarget,defaultFramebuffer){let renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__webglFramebuffer=defaultFramebuffer,renderTargetProperties.__useDefaultFramebuffer=defaultFramebuffer===void 0},this.setRenderTarget=function(renderTarget,activeCubeFace=0,activeMipmapLevel=0){_currentRenderTarget=renderTarget,_currentActiveCubeFace=activeCubeFace,_currentActiveMipmapLevel=activeMipmapLevel;let useDefaultFramebuffer=!0,framebuffer=null,isCube=!1,isRenderTarget3D=!1;if(renderTarget){let renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__useDefaultFramebuffer!==void 0?(state.bindFramebuffer(36160,null),useDefaultFramebuffer=!1):renderTargetProperties.__webglFramebuffer===void 0?textures.setupRenderTarget(renderTarget):renderTargetProperties.__hasExternalTextures&&textures.rebindTextures(renderTarget,properties.get(renderTarget.texture).__webglTexture,properties.get(renderTarget.depthTexture).__webglTexture);let texture=renderTarget.texture;(texture.isData3DTexture||texture.isDataArrayTexture||texture.isCompressedArrayTexture)&&(isRenderTarget3D=!0);let __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;renderTarget.isWebGLCubeRenderTarget?(framebuffer=__webglFramebuffer[activeCubeFace],isCube=!0):capabilities.isWebGL2&&renderTarget.samples>0&&textures.useMultisampledRTT(renderTarget)===!1?framebuffer=properties.get(renderTarget).__webglMultisampledFramebuffer:framebuffer=__webglFramebuffer,_currentViewport.copy(renderTarget.viewport),_currentScissor.copy(renderTarget.scissor),_currentScissorTest=renderTarget.scissorTest}else _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor(),_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor(),_currentScissorTest=_scissorTest;if(state.bindFramebuffer(36160,framebuffer)&&capabilities.drawBuffers&&useDefaultFramebuffer&&state.drawBuffers(renderTarget,framebuffer),state.viewport(_currentViewport),state.scissor(_currentScissor),state.setScissorTest(_currentScissorTest),isCube){let textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(36160,36064,34069+activeCubeFace,textureProperties.__webglTexture,activeMipmapLevel)}else if(isRenderTarget3D){let textureProperties=properties.get(renderTarget.texture),layer=activeCubeFace||0;_gl.framebufferTextureLayer(36160,36064,textureProperties.__webglTexture,activeMipmapLevel||0,layer)}_currentMaterialId=-1},this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let framebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget&&activeCubeFaceIndex!==void 0&&(framebuffer=framebuffer[activeCubeFaceIndex]),framebuffer){state.bindFramebuffer(36160,framebuffer);try{let texture=renderTarget.texture,textureFormat=texture.format,textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}let halfFloatSupportedByExt=textureType===HalfFloatType&&(extensions.has("EXT_color_buffer_half_float")||capabilities.isWebGL2&&extensions.has("EXT_color_buffer_float"));if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(35738)&&!(textureType===FloatType&&(capabilities.isWebGL2||extensions.has("OES_texture_float")||extensions.has("WEBGL_color_buffer_float")))&&!halfFloatSupportedByExt){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height&&_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer)}finally{let framebuffer2=_currentRenderTarget!==null?properties.get(_currentRenderTarget).__webglFramebuffer:null;state.bindFramebuffer(36160,framebuffer2)}}},this.copyFramebufferToTexture=function(position,texture,level=0){let levelScale=Math.pow(2,-level),width=Math.floor(texture.image.width*levelScale),height=Math.floor(texture.image.height*levelScale);textures.setTexture2D(texture,0),_gl.copyTexSubImage2D(3553,level,0,0,position.x,position.y,width,height),state.unbindTexture()},this.copyTextureToTexture=function(position,srcTexture,dstTexture,level=0){let width=srcTexture.image.width,height=srcTexture.image.height,glFormat=utils.convert(dstTexture.format),glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0),_gl.pixelStorei(37440,dstTexture.flipY),_gl.pixelStorei(37441,dstTexture.premultiplyAlpha),_gl.pixelStorei(3317,dstTexture.unpackAlignment),srcTexture.isDataTexture?_gl.texSubImage2D(3553,level,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data):srcTexture.isCompressedTexture?_gl.compressedTexSubImage2D(3553,level,position.x,position.y,srcTexture.mipmaps[0].width,srcTexture.mipmaps[0].height,glFormat,srcTexture.mipmaps[0].data):_gl.texSubImage2D(3553,level,position.x,position.y,glFormat,glType,srcTexture.image),level===0&&dstTexture.generateMipmaps&&_gl.generateMipmap(3553),state.unbindTexture()},this.copyTextureToTexture3D=function(sourceBox,position,srcTexture,dstTexture,level=0){if(_this.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}let width=sourceBox.max.x-sourceBox.min.x+1,height=sourceBox.max.y-sourceBox.min.y+1,depth=sourceBox.max.z-sourceBox.min.z+1,glFormat=utils.convert(dstTexture.format),glType=utils.convert(dstTexture.type),glTarget;if(dstTexture.isData3DTexture)textures.setTexture3D(dstTexture,0),glTarget=32879;else if(dstTexture.isDataArrayTexture)textures.setTexture2DArray(dstTexture,0),glTarget=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}_gl.pixelStorei(37440,dstTexture.flipY),_gl.pixelStorei(37441,dstTexture.premultiplyAlpha),_gl.pixelStorei(3317,dstTexture.unpackAlignment);let unpackRowLen=_gl.getParameter(3314),unpackImageHeight=_gl.getParameter(32878),unpackSkipPixels=_gl.getParameter(3316),unpackSkipRows=_gl.getParameter(3315),unpackSkipImages=_gl.getParameter(32877),image=srcTexture.isCompressedTexture?srcTexture.mipmaps[0]:srcTexture.image;_gl.pixelStorei(3314,image.width),_gl.pixelStorei(32878,image.height),_gl.pixelStorei(3316,sourceBox.min.x),_gl.pixelStorei(3315,sourceBox.min.y),_gl.pixelStorei(32877,sourceBox.min.z),srcTexture.isDataTexture||srcTexture.isData3DTexture?_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image.data):srcTexture.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),_gl.compressedTexSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,image.data)):_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image),_gl.pixelStorei(3314,unpackRowLen),_gl.pixelStorei(32878,unpackImageHeight),_gl.pixelStorei(3316,unpackSkipPixels),_gl.pixelStorei(3315,unpackSkipRows),_gl.pixelStorei(32877,unpackSkipImages),level===0&&dstTexture.generateMipmaps&&_gl.generateMipmap(glTarget),state.unbindTexture()},this.initTexture=function(texture){texture.isCubeTexture?textures.setTextureCube(texture,0):texture.isData3DTexture?textures.setTexture3D(texture,0):texture.isDataArrayTexture||texture.isCompressedArrayTexture?textures.setTexture2DArray(texture,0):textures.setTexture2D(texture,0),state.unbindTexture()},this.resetState=function(){_currentActiveCubeFace=0,_currentActiveMipmapLevel=0,_currentRenderTarget=null,state.reset(),bindingStates.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}var WebGL1Renderer=class extends WebGLRenderer{};WebGL1Renderer.prototype.isWebGL1Renderer=!0;var FogExp2=class{constructor(color,density=25e-5){this.isFogExp2=!0,this.name="",this.color=new Color(color),this.density=density}clone(){return new FogExp2(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}},Fog=class{constructor(color,near=1,far=1e3){this.isFog=!0,this.name="",this.color=new Color(color),this.near=near,this.far=far}clone(){return new Fog(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}},Scene=class extends Object3D{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(source,recursive){return super.copy(source,recursive),source.background!==null&&(this.background=source.background.clone()),source.environment!==null&&(this.environment=source.environment.clone()),source.fog!==null&&(this.fog=source.fog.clone()),this.backgroundBlurriness=source.backgroundBlurriness,this.backgroundIntensity=source.backgroundIntensity,source.overrideMaterial!==null&&(this.overrideMaterial=source.overrideMaterial.clone()),this.matrixAutoUpdate=source.matrixAutoUpdate,this}toJSON(meta){let data=super.toJSON(meta);return this.fog!==null&&(data.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(data.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(data.backgroundIntensity=this.backgroundIntensity),data}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(value){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=value}},InterleavedBuffer=class{constructor(array,stride){this.isInterleavedBuffer=!0,this.array=array,this.stride=stride,this.count=array!==void 0?array.length/stride:0,this.usage=StaticDrawUsage,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=generateUUID()}onUploadCallback(){}set needsUpdate(value){value===!0&&this.version++}setUsage(value){return this.usage=value,this}copy(source){return this.array=new source.array.constructor(source.array),this.count=source.count,this.stride=source.stride,this.usage=source.usage,this}copyAt(index1,attribute,index2){index1*=this.stride,index2*=attribute.stride;for(let i=0,l=this.stride;i<l;i++)this.array[index1+i]=attribute.array[index2+i];return this}set(value,offset=0){return this.array.set(value,offset),this}clone(data){data.arrayBuffers===void 0&&(data.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=generateUUID()),data.arrayBuffers[this.array.buffer._uuid]===void 0&&(data.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);let array=new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]),ib=new this.constructor(array,this.stride);return ib.setUsage(this.usage),ib}onUpload(callback){return this.onUploadCallback=callback,this}toJSON(data){return data.arrayBuffers===void 0&&(data.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=generateUUID()),data.arrayBuffers[this.array.buffer._uuid]===void 0&&(data.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}},_vector$6=new Vector3,InterleavedBufferAttribute=class{constructor(interleavedBuffer,itemSize,offset,normalized=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=interleavedBuffer,this.itemSize=itemSize,this.offset=offset,this.normalized=normalized===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(value){this.data.needsUpdate=value}applyMatrix4(m){for(let i=0,l=this.data.count;i<l;i++)_vector$6.fromBufferAttribute(this,i),_vector$6.applyMatrix4(m),this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);return this}applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++)_vector$6.fromBufferAttribute(this,i),_vector$6.applyNormalMatrix(m),this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);return this}transformDirection(m){for(let i=0,l=this.count;i<l;i++)_vector$6.fromBufferAttribute(this,i),_vector$6.transformDirection(m),this.setXYZ(i,_vector$6.x,_vector$6.y,_vector$6.z);return this}setX(index,x){return this.normalized&&(x=normalize(x,this.array)),this.data.array[index*this.data.stride+this.offset]=x,this}setY(index,y){return this.normalized&&(y=normalize(y,this.array)),this.data.array[index*this.data.stride+this.offset+1]=y,this}setZ(index,z){return this.normalized&&(z=normalize(z,this.array)),this.data.array[index*this.data.stride+this.offset+2]=z,this}setW(index,w){return this.normalized&&(w=normalize(w,this.array)),this.data.array[index*this.data.stride+this.offset+3]=w,this}getX(index){let x=this.data.array[index*this.data.stride+this.offset];return this.normalized&&(x=denormalize(x,this.array)),x}getY(index){let y=this.data.array[index*this.data.stride+this.offset+1];return this.normalized&&(y=denormalize(y,this.array)),y}getZ(index){let z=this.data.array[index*this.data.stride+this.offset+2];return this.normalized&&(z=denormalize(z,this.array)),z}getW(index){let w=this.data.array[index*this.data.stride+this.offset+3];return this.normalized&&(w=denormalize(w,this.array)),w}setXY(index,x,y){return index=index*this.data.stride+this.offset,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array)),this.data.array[index+0]=x,this.data.array[index+1]=y,this}setXYZ(index,x,y,z){return index=index*this.data.stride+this.offset,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array),z=normalize(z,this.array)),this.data.array[index+0]=x,this.data.array[index+1]=y,this.data.array[index+2]=z,this}setXYZW(index,x,y,z,w){return index=index*this.data.stride+this.offset,this.normalized&&(x=normalize(x,this.array),y=normalize(y,this.array),z=normalize(z,this.array),w=normalize(w,this.array)),this.data.array[index+0]=x,this.data.array[index+1]=y,this.data.array[index+2]=z,this.data.array[index+3]=w,this}clone(data){if(data===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");let array=[];for(let i=0;i<this.count;i++){let index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++)array.push(this.data.array[index+j])}return new BufferAttribute(new this.array.constructor(array),this.itemSize,this.normalized)}else return data.interleavedBuffers===void 0&&(data.interleavedBuffers={}),data.interleavedBuffers[this.data.uuid]===void 0&&(data.interleavedBuffers[this.data.uuid]=this.data.clone(data)),new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(data){if(data===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");let array=[];for(let i=0;i<this.count;i++){let index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++)array.push(this.data.array[index+j])}return{itemSize:this.itemSize,type:this.array.constructor.name,array,normalized:this.normalized}}else return data.interleavedBuffers===void 0&&(data.interleavedBuffers={}),data.interleavedBuffers[this.data.uuid]===void 0&&(data.interleavedBuffers[this.data.uuid]=this.data.toJSON(data)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},SpriteMaterial=class extends Material{constructor(parameters){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Color(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.rotation=source.rotation,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}},_geometry,_intersectPoint=new Vector3,_worldScale=new Vector3,_mvPosition=new Vector3,_alignedPosition=new Vector2,_rotatedPosition=new Vector2,_viewWorldMatrix=new Matrix4,_vA=new Vector3,_vB=new Vector3,_vC=new Vector3,_uvA=new Vector2,_uvB=new Vector2,_uvC=new Vector2,Sprite=class extends Object3D{constructor(material){if(super(),this.isSprite=!0,this.type="Sprite",_geometry===void 0){_geometry=new BufferGeometry;let float32Array=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),interleavedBuffer=new InterleavedBuffer(float32Array,5);_geometry.setIndex([0,1,2,0,2,3]),_geometry.setAttribute("position",new InterleavedBufferAttribute(interleavedBuffer,3,0,!1)),_geometry.setAttribute("uv",new InterleavedBufferAttribute(interleavedBuffer,2,3,!1))}this.geometry=_geometry,this.material=material!==void 0?material:new SpriteMaterial,this.center=new Vector2(.5,.5)}raycast(raycaster,intersects2){raycaster.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),_worldScale.setFromMatrixScale(this.matrixWorld),_viewWorldMatrix.copy(raycaster.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse,this.matrixWorld),_mvPosition.setFromMatrixPosition(this.modelViewMatrix),raycaster.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&_worldScale.multiplyScalar(-_mvPosition.z);let rotation=this.material.rotation,sin,cos;rotation!==0&&(cos=Math.cos(rotation),sin=Math.sin(rotation));let center=this.center;transformVertex(_vA.set(-.5,-.5,0),_mvPosition,center,_worldScale,sin,cos),transformVertex(_vB.set(.5,-.5,0),_mvPosition,center,_worldScale,sin,cos),transformVertex(_vC.set(.5,.5,0),_mvPosition,center,_worldScale,sin,cos),_uvA.set(0,0),_uvB.set(1,0),_uvC.set(1,1);let intersect=raycaster.ray.intersectTriangle(_vA,_vB,_vC,!1,_intersectPoint);if(intersect===null&&(transformVertex(_vB.set(-.5,.5,0),_mvPosition,center,_worldScale,sin,cos),_uvB.set(0,1),intersect=raycaster.ray.intersectTriangle(_vA,_vC,_vB,!1,_intersectPoint),intersect===null))return;let distance=raycaster.ray.origin.distanceTo(_intersectPoint);distance<raycaster.near||distance>raycaster.far||intersects2.push({distance,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2),face:null,object:this})}copy(source,recursive){return super.copy(source,recursive),source.center!==void 0&&this.center.copy(source.center),this.material=source.material,this}};function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){_alignedPosition.subVectors(vertexPosition,center).addScalar(.5).multiply(scale),sin!==void 0?(_rotatedPosition.x=cos*_alignedPosition.x-sin*_alignedPosition.y,_rotatedPosition.y=sin*_alignedPosition.x+cos*_alignedPosition.y):_rotatedPosition.copy(_alignedPosition),vertexPosition.copy(mvPosition),vertexPosition.x+=_rotatedPosition.x,vertexPosition.y+=_rotatedPosition.y,vertexPosition.applyMatrix4(_viewWorldMatrix)}var _v1$2=new Vector3,_v2$1=new Vector3,LOD=class extends Object3D{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(source){super.copy(source,!1);let levels=source.levels;for(let i=0,l=levels.length;i<l;i++){let level=levels[i];this.addLevel(level.object.clone(),level.distance,level.hysteresis)}return this.autoUpdate=source.autoUpdate,this}addLevel(object,distance=0,hysteresis=0){distance=Math.abs(distance);let levels=this.levels,l;for(l=0;l<levels.length&&!(distance<levels[l].distance);l++);return levels.splice(l,0,{distance,hysteresis,object}),this.add(object),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(distance){let levels=this.levels;if(levels.length>0){let i,l;for(i=1,l=levels.length;i<l;i++){let levelDistance=levels[i].distance;if(levels[i].object.visible&&(levelDistance-=levelDistance*levels[i].hysteresis),distance<levelDistance)break}return levels[i-1].object}return null}raycast(raycaster,intersects2){if(this.levels.length>0){_v1$2.setFromMatrixPosition(this.matrixWorld);let distance=raycaster.ray.origin.distanceTo(_v1$2);this.getObjectForDistance(distance).raycast(raycaster,intersects2)}}update(camera){let levels=this.levels;if(levels.length>1){_v1$2.setFromMatrixPosition(camera.matrixWorld),_v2$1.setFromMatrixPosition(this.matrixWorld);let distance=_v1$2.distanceTo(_v2$1)/camera.zoom;levels[0].object.visible=!0;let i,l;for(i=1,l=levels.length;i<l;i++){let levelDistance=levels[i].distance;if(levels[i].object.visible&&(levelDistance-=levelDistance*levels[i].hysteresis),distance>=levelDistance)levels[i-1].object.visible=!1,levels[i].object.visible=!0;else break}for(this._currentLevel=i-1;i<l;i++)levels[i].object.visible=!1}}toJSON(meta){let data=super.toJSON(meta);this.autoUpdate===!1&&(data.object.autoUpdate=!1),data.object.levels=[];let levels=this.levels;for(let i=0,l=levels.length;i<l;i++){let level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance,hysteresis:level.hysteresis})}return data}},_basePosition=new Vector3,_skinIndex=new Vector4,_skinWeight=new Vector4,_vector$5=new Vector3,_matrix=new Matrix4,SkinnedMesh=class extends Mesh{constructor(geometry,material){super(geometry,material),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Matrix4,this.bindMatrixInverse=new Matrix4}copy(source,recursive){return super.copy(source,recursive),this.bindMode=source.bindMode,this.bindMatrix.copy(source.bindMatrix),this.bindMatrixInverse.copy(source.bindMatrixInverse),this.skeleton=source.skeleton,this}bind(skeleton,bindMatrix){this.skeleton=skeleton,bindMatrix===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),bindMatrix=this.matrixWorld),this.bindMatrix.copy(bindMatrix),this.bindMatrixInverse.copy(bindMatrix).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){let vector=new Vector4,skinWeight=this.geometry.attributes.skinWeight;for(let i=0,l=skinWeight.count;i<l;i++){vector.fromBufferAttribute(skinWeight,i);let scale=1/vector.manhattanLength();scale!==1/0?vector.multiplyScalar(scale):vector.set(1,0,0,0),skinWeight.setXYZW(i,vector.x,vector.y,vector.z,vector.w)}}updateMatrixWorld(force){super.updateMatrixWorld(force),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(index,target){let skeleton=this.skeleton,geometry=this.geometry;_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex,index),_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight,index),_basePosition.copy(target).applyMatrix4(this.bindMatrix),target.set(0,0,0);for(let i=0;i<4;i++){let weight=_skinWeight.getComponent(i);if(weight!==0){let boneIndex=_skinIndex.getComponent(i);_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld,skeleton.boneInverses[boneIndex]),target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix),weight)}}return target.applyMatrix4(this.bindMatrixInverse)}},Bone=class extends Object3D{constructor(){super(),this.isBone=!0,this.type="Bone"}},DataTexture=class extends Texture{constructor(data=null,width=1,height=1,format,type,mapping,wrapS,wrapT,magFilter=NearestFilter,minFilter=NearestFilter,anisotropy,encoding){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.isDataTexture=!0,this.image={data,width,height},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},_offsetMatrix=new Matrix4,_identityMatrix=new Matrix4,Skeleton=class{constructor(bones=[],boneInverses=[]){this.uuid=generateUUID(),this.bones=bones.slice(0),this.boneInverses=boneInverses,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){let bones=this.bones,boneInverses=this.boneInverses;if(this.boneMatrices=new Float32Array(bones.length*16),boneInverses.length===0)this.calculateInverses();else if(bones.length!==boneInverses.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let i=0,il=this.bones.length;i<il;i++)this.boneInverses.push(new Matrix4)}}calculateInverses(){this.boneInverses.length=0;for(let i=0,il=this.bones.length;i<il;i++){let inverse=new Matrix4;this.bones[i]&&inverse.copy(this.bones[i].matrixWorld).invert(),this.boneInverses.push(inverse)}}pose(){for(let i=0,il=this.bones.length;i<il;i++){let bone=this.bones[i];bone&&bone.matrixWorld.copy(this.boneInverses[i]).invert()}for(let i=0,il=this.bones.length;i<il;i++){let bone=this.bones[i];bone&&(bone.parent&&bone.parent.isBone?(bone.matrix.copy(bone.parent.matrixWorld).invert(),bone.matrix.multiply(bone.matrixWorld)):bone.matrix.copy(bone.matrixWorld),bone.matrix.decompose(bone.position,bone.quaternion,bone.scale))}}update(){let bones=this.bones,boneInverses=this.boneInverses,boneMatrices=this.boneMatrices,boneTexture=this.boneTexture;for(let i=0,il=bones.length;i<il;i++){let matrix=bones[i]?bones[i].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(matrix,boneInverses[i]),_offsetMatrix.toArray(boneMatrices,i*16)}boneTexture!==null&&(boneTexture.needsUpdate=!0)}clone(){return new Skeleton(this.bones,this.boneInverses)}computeBoneTexture(){let size=Math.sqrt(this.bones.length*4);size=ceilPowerOfTwo(size),size=Math.max(size,4);let boneMatrices=new Float32Array(size*size*4);boneMatrices.set(this.boneMatrices);let boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);return boneTexture.needsUpdate=!0,this.boneMatrices=boneMatrices,this.boneTexture=boneTexture,this.boneTextureSize=size,this}getBoneByName(name){for(let i=0,il=this.bones.length;i<il;i++){let bone=this.bones[i];if(bone.name===name)return bone}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(json,bones){this.uuid=json.uuid;for(let i=0,l=json.bones.length;i<l;i++){let uuid=json.bones[i],bone=bones[uuid];bone===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",uuid),bone=new Bone),this.bones.push(bone),this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]))}return this.init(),this}toJSON(){let data={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};data.uuid=this.uuid;let bones=this.bones,boneInverses=this.boneInverses;for(let i=0,l=bones.length;i<l;i++){let bone=bones[i];data.bones.push(bone.uuid);let boneInverse=boneInverses[i];data.boneInverses.push(boneInverse.toArray())}return data}},InstancedBufferAttribute=class extends BufferAttribute{constructor(array,itemSize,normalized,meshPerAttribute=1){super(array,itemSize,normalized),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=meshPerAttribute}copy(source){return super.copy(source),this.meshPerAttribute=source.meshPerAttribute,this}toJSON(){let data=super.toJSON();return data.meshPerAttribute=this.meshPerAttribute,data.isInstancedBufferAttribute=!0,data}},_instanceLocalMatrix=new Matrix4,_instanceWorldMatrix=new Matrix4,_instanceIntersects=[],_identity=new Matrix4,_mesh=new Mesh,InstancedMesh=class extends Mesh{constructor(geometry,material,count){super(geometry,material),this.isInstancedMesh=!0,this.instanceMatrix=new InstancedBufferAttribute(new Float32Array(count*16),16),this.instanceColor=null,this.count=count,this.frustumCulled=!1;for(let i=0;i<count;i++)this.setMatrixAt(i,_identity)}copy(source,recursive){return super.copy(source,recursive),this.instanceMatrix.copy(source.instanceMatrix),source.instanceColor!==null&&(this.instanceColor=source.instanceColor.clone()),this.count=source.count,this}getColorAt(index,color){color.fromArray(this.instanceColor.array,index*3)}getMatrixAt(index,matrix){matrix.fromArray(this.instanceMatrix.array,index*16)}raycast(raycaster,intersects2){let matrixWorld=this.matrixWorld,raycastTimes=this.count;if(_mesh.geometry=this.geometry,_mesh.material=this.material,_mesh.material!==void 0)for(let instanceId=0;instanceId<raycastTimes;instanceId++){this.getMatrixAt(instanceId,_instanceLocalMatrix),_instanceWorldMatrix.multiplyMatrices(matrixWorld,_instanceLocalMatrix),_mesh.matrixWorld=_instanceWorldMatrix,_mesh.raycast(raycaster,_instanceIntersects);for(let i=0,l=_instanceIntersects.length;i<l;i++){let intersect=_instanceIntersects[i];intersect.instanceId=instanceId,intersect.object=this,intersects2.push(intersect)}_instanceIntersects.length=0}}setColorAt(index,color){this.instanceColor===null&&(this.instanceColor=new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count*3),3)),color.toArray(this.instanceColor.array,index*3)}setMatrixAt(index,matrix){matrix.toArray(this.instanceMatrix.array,index*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}},LineBasicMaterial=class extends Material{constructor(parameters){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.linewidth=source.linewidth,this.linecap=source.linecap,this.linejoin=source.linejoin,this.fog=source.fog,this}},_start$1=new Vector3,_end$1=new Vector3,_inverseMatrix$1=new Matrix4,_ray$1=new Ray,_sphere$1=new Sphere,Line=class extends Object3D{constructor(geometry=new BufferGeometry,material=new LineBasicMaterial){super(),this.isLine=!0,this.type="Line",this.geometry=geometry,this.material=material,this.updateMorphTargets()}copy(source,recursive){return super.copy(source,recursive),this.material=source.material,this.geometry=source.geometry,this}computeLineDistances(){let geometry=this.geometry;if(geometry.index===null){let positionAttribute=geometry.attributes.position,lineDistances=[0];for(let i=1,l=positionAttribute.count;i<l;i++)_start$1.fromBufferAttribute(positionAttribute,i-1),_end$1.fromBufferAttribute(positionAttribute,i),lineDistances[i]=lineDistances[i-1],lineDistances[i]+=_start$1.distanceTo(_end$1);geometry.setAttribute("lineDistance",new Float32BufferAttribute(lineDistances,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(raycaster,intersects2){let geometry=this.geometry,matrixWorld=this.matrixWorld,threshold=raycaster.params.Line.threshold,drawRange=geometry.drawRange;if(geometry.boundingSphere===null&&geometry.computeBoundingSphere(),_sphere$1.copy(geometry.boundingSphere),_sphere$1.applyMatrix4(matrixWorld),_sphere$1.radius+=threshold,raycaster.ray.intersectsSphere(_sphere$1)===!1)return;_inverseMatrix$1.copy(matrixWorld).invert(),_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);let localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3),localThresholdSq=localThreshold*localThreshold,vStart=new Vector3,vEnd=new Vector3,interSegment=new Vector3,interRay=new Vector3,step=this.isLineSegments?2:1,index=geometry.index,positionAttribute=geometry.attributes.position;if(index!==null){let start=Math.max(0,drawRange.start),end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){let a=index.getX(i),b=index.getX(i+1);if(vStart.fromBufferAttribute(positionAttribute,a),vEnd.fromBufferAttribute(positionAttribute,b),_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment)>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);let distance=raycaster.ray.origin.distanceTo(interRay);distance<raycaster.near||distance>raycaster.far||intersects2.push({distance,point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}else{let start=Math.max(0,drawRange.start),end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){if(vStart.fromBufferAttribute(positionAttribute,i),vEnd.fromBufferAttribute(positionAttribute,i+1),_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment)>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);let distance=raycaster.ray.origin.distanceTo(interRay);distance<raycaster.near||distance>raycaster.far||intersects2.push({distance,point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){let morphAttributes=this.geometry.morphAttributes,keys=Object.keys(morphAttributes);if(keys.length>0){let morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){let name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0),this.morphTargetDictionary[name]=m}}}}},_start=new Vector3,_end=new Vector3,LineSegments=class extends Line{constructor(geometry,material){super(geometry,material),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){let geometry=this.geometry;if(geometry.index===null){let positionAttribute=geometry.attributes.position,lineDistances=[];for(let i=0,l=positionAttribute.count;i<l;i+=2)_start.fromBufferAttribute(positionAttribute,i),_end.fromBufferAttribute(positionAttribute,i+1),lineDistances[i]=i===0?0:lineDistances[i-1],lineDistances[i+1]=lineDistances[i]+_start.distanceTo(_end);geometry.setAttribute("lineDistance",new Float32BufferAttribute(lineDistances,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}},LineLoop=class extends Line{constructor(geometry,material){super(geometry,material),this.isLineLoop=!0,this.type="LineLoop"}},PointsMaterial=class extends Material{constructor(parameters){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Color(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.size=source.size,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}},_inverseMatrix=new Matrix4,_ray=new Ray,_sphere=new Sphere,_position$2=new Vector3,Points=class extends Object3D{constructor(geometry=new BufferGeometry,material=new PointsMaterial){super(),this.isPoints=!0,this.type="Points",this.geometry=geometry,this.material=material,this.updateMorphTargets()}copy(source,recursive){return super.copy(source,recursive),this.material=source.material,this.geometry=source.geometry,this}raycast(raycaster,intersects2){let geometry=this.geometry,matrixWorld=this.matrixWorld,threshold=raycaster.params.Points.threshold,drawRange=geometry.drawRange;if(geometry.boundingSphere===null&&geometry.computeBoundingSphere(),_sphere.copy(geometry.boundingSphere),_sphere.applyMatrix4(matrixWorld),_sphere.radius+=threshold,raycaster.ray.intersectsSphere(_sphere)===!1)return;_inverseMatrix.copy(matrixWorld).invert(),_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);let localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3),localThresholdSq=localThreshold*localThreshold,index=geometry.index,positionAttribute=geometry.attributes.position;if(index!==null){let start=Math.max(0,drawRange.start),end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i++){let a=index.getX(i);_position$2.fromBufferAttribute(positionAttribute,a),testPoint(_position$2,a,localThresholdSq,matrixWorld,raycaster,intersects2,this)}}else{let start=Math.max(0,drawRange.start),end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end;i<l;i++)_position$2.fromBufferAttribute(positionAttribute,i),testPoint(_position$2,i,localThresholdSq,matrixWorld,raycaster,intersects2,this)}}updateMorphTargets(){let morphAttributes=this.geometry.morphAttributes,keys=Object.keys(morphAttributes);if(keys.length>0){let morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){let name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0),this.morphTargetDictionary[name]=m}}}}};function testPoint(point2,index,localThresholdSq,matrixWorld,raycaster,intersects2,object){let rayPointDistanceSq=_ray.distanceSqToPoint(point2);if(rayPointDistanceSq<localThresholdSq){let intersectPoint=new Vector3;_ray.closestPointToPoint(point2,intersectPoint),intersectPoint.applyMatrix4(matrixWorld);let distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects2.push({distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint,index,face:null,object})}}var VideoTexture=class extends Texture{constructor(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),this.isVideoTexture=!0,this.minFilter=minFilter!==void 0?minFilter:LinearFilter,this.magFilter=magFilter!==void 0?magFilter:LinearFilter,this.generateMipmaps=!1;let scope=this;function updateVideo(){scope.needsUpdate=!0,video.requestVideoFrameCallback(updateVideo)}"requestVideoFrameCallback"in video&&video.requestVideoFrameCallback(updateVideo)}clone(){return new this.constructor(this.image).copy(this)}update(){let video=this.image;"requestVideoFrameCallback"in video===!1&&video.readyState>=video.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}},FramebufferTexture=class extends Texture{constructor(width,height,format){super({width,height}),this.isFramebufferTexture=!0,this.format=format,this.magFilter=NearestFilter,this.minFilter=NearestFilter,this.generateMipmaps=!1,this.needsUpdate=!0}},CompressedTexture=class extends Texture{constructor(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.isCompressedTexture=!0,this.image={width,height},this.mipmaps=mipmaps,this.flipY=!1,this.generateMipmaps=!1}},CompressedArrayTexture=class extends CompressedTexture{constructor(mipmaps,width,height,depth,format,type){super(mipmaps,width,height,format,type),this.isCompressedArrayTexture=!0,this.image.depth=depth,this.wrapR=ClampToEdgeWrapping}},CanvasTexture=class extends Texture{constructor(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),this.isCanvasTexture=!0,this.needsUpdate=!0}},Curve=class{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(u,optionalTarget){let t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget)}getPoints(divisions=5){let points=[];for(let d=0;d<=divisions;d++)points.push(this.getPoint(d/divisions));return points}getSpacedPoints(divisions=5){let points=[];for(let d=0;d<=divisions;d++)points.push(this.getPointAt(d/divisions));return points}getLength(){let lengths=this.getLengths();return lengths[lengths.length-1]}getLengths(divisions=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;let cache=[],current,last=this.getPoint(0),sum=0;cache.push(0);for(let p=1;p<=divisions;p++)current=this.getPoint(p/divisions),sum+=current.distanceTo(last),cache.push(sum),last=current;return this.cacheArcLengths=cache,cache}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(u,distance){let arcLengths=this.getLengths(),i=0,il=arcLengths.length,targetArcLength;distance?targetArcLength=distance:targetArcLength=u*arcLengths[il-1];let low=0,high=il-1,comparison;for(;low<=high;)if(i=Math.floor(low+(high-low)/2),comparison=arcLengths[i]-targetArcLength,comparison<0)low=i+1;else if(comparison>0)high=i-1;else{high=i;break}if(i=high,arcLengths[i]===targetArcLength)return i/(il-1);let lengthBefore=arcLengths[i],segmentLength=arcLengths[i+1]-lengthBefore,segmentFraction=(targetArcLength-lengthBefore)/segmentLength;return(i+segmentFraction)/(il-1)}getTangent(t,optionalTarget){let t1=t-1e-4,t2=t+1e-4;t1<0&&(t1=0),t2>1&&(t2=1);let pt1=this.getPoint(t1),pt2=this.getPoint(t2),tangent=optionalTarget||(pt1.isVector2?new Vector2:new Vector3);return tangent.copy(pt2).sub(pt1).normalize(),tangent}getTangentAt(u,optionalTarget){let t=this.getUtoTmapping(u);return this.getTangent(t,optionalTarget)}computeFrenetFrames(segments,closed){let normal=new Vector3,tangents=[],normals=[],binormals=[],vec=new Vector3,mat=new Matrix4;for(let i=0;i<=segments;i++){let u=i/segments;tangents[i]=this.getTangentAt(u,new Vector3)}normals[0]=new Vector3,binormals[0]=new Vector3;let min=Number.MAX_VALUE,tx=Math.abs(tangents[0].x),ty=Math.abs(tangents[0].y),tz=Math.abs(tangents[0].z);tx<=min&&(min=tx,normal.set(1,0,0)),ty<=min&&(min=ty,normal.set(0,1,0)),tz<=min&&normal.set(0,0,1),vec.crossVectors(tangents[0],normal).normalize(),normals[0].crossVectors(tangents[0],vec),binormals[0].crossVectors(tangents[0],normals[0]);for(let i=1;i<=segments;i++){if(normals[i]=normals[i-1].clone(),binormals[i]=binormals[i-1].clone(),vec.crossVectors(tangents[i-1],tangents[i]),vec.length()>Number.EPSILON){vec.normalize();let theta=Math.acos(clamp(tangents[i-1].dot(tangents[i]),-1,1));normals[i].applyMatrix4(mat.makeRotationAxis(vec,theta))}binormals[i].crossVectors(tangents[i],normals[i])}if(closed===!0){let theta=Math.acos(clamp(normals[0].dot(normals[segments]),-1,1));theta/=segments,tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0&&(theta=-theta);for(let i=1;i<=segments;i++)normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i)),binormals[i].crossVectors(tangents[i],normals[i])}return{tangents,normals,binormals}}clone(){return new this.constructor().copy(this)}copy(source){return this.arcLengthDivisions=source.arcLengthDivisions,this}toJSON(){let data={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return data.arcLengthDivisions=this.arcLengthDivisions,data.type=this.type,data}fromJSON(json){return this.arcLengthDivisions=json.arcLengthDivisions,this}},EllipseCurve=class extends Curve{constructor(aX=0,aY=0,xRadius=1,yRadius=1,aStartAngle=0,aEndAngle=Math.PI*2,aClockwise=!1,aRotation=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=aX,this.aY=aY,this.xRadius=xRadius,this.yRadius=yRadius,this.aStartAngle=aStartAngle,this.aEndAngle=aEndAngle,this.aClockwise=aClockwise,this.aRotation=aRotation}getPoint(t,optionalTarget){let point2=optionalTarget||new Vector2,twoPi2=Math.PI*2,deltaAngle=this.aEndAngle-this.aStartAngle,samePoints=Math.abs(deltaAngle)<Number.EPSILON;for(;deltaAngle<0;)deltaAngle+=twoPi2;for(;deltaAngle>twoPi2;)deltaAngle-=twoPi2;deltaAngle<Number.EPSILON&&(samePoints?deltaAngle=0:deltaAngle=twoPi2),this.aClockwise===!0&&!samePoints&&(deltaAngle===twoPi2?deltaAngle=-twoPi2:deltaAngle=deltaAngle-twoPi2);let angle2=this.aStartAngle+t*deltaAngle,x=this.aX+this.xRadius*Math.cos(angle2),y=this.aY+this.yRadius*Math.sin(angle2);if(this.aRotation!==0){let cos=Math.cos(this.aRotation),sin=Math.sin(this.aRotation),tx=x-this.aX,ty=y-this.aY;x=tx*cos-ty*sin+this.aX,y=tx*sin+ty*cos+this.aY}return point2.set(x,y)}copy(source){return super.copy(source),this.aX=source.aX,this.aY=source.aY,this.xRadius=source.xRadius,this.yRadius=source.yRadius,this.aStartAngle=source.aStartAngle,this.aEndAngle=source.aEndAngle,this.aClockwise=source.aClockwise,this.aRotation=source.aRotation,this}toJSON(){let data=super.toJSON();return data.aX=this.aX,data.aY=this.aY,data.xRadius=this.xRadius,data.yRadius=this.yRadius,data.aStartAngle=this.aStartAngle,data.aEndAngle=this.aEndAngle,data.aClockwise=this.aClockwise,data.aRotation=this.aRotation,data}fromJSON(json){return super.fromJSON(json),this.aX=json.aX,this.aY=json.aY,this.xRadius=json.xRadius,this.yRadius=json.yRadius,this.aStartAngle=json.aStartAngle,this.aEndAngle=json.aEndAngle,this.aClockwise=json.aClockwise,this.aRotation=json.aRotation,this}},ArcCurve=class extends EllipseCurve{constructor(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){super(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise),this.isArcCurve=!0,this.type="ArcCurve"}};function CubicPoly(){let c0=0,c1=0,c2=0,c3=0;function init(x0,x1,t0,t1){c0=x0,c1=t0,c2=-3*x0+3*x1-2*t0-t1,c3=2*x0-2*x1+t0+t1}return{initCatmullRom:function(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1))},initNonuniformCatmullRom:function(x0,x1,x2,x3,dt0,dt1,dt2){let t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1,t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;t1*=dt1,t2*=dt1,init(x1,x2,t1,t2)},calc:function(t){let t2=t*t,t3=t2*t;return c0+c1*t+c2*t2+c3*t3}}}var tmp=new Vector3,px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly,CatmullRomCurve3=class extends Curve{constructor(points=[],closed=!1,curveType="centripetal",tension=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=points,this.closed=closed,this.curveType=curveType,this.tension=tension}getPoint(t,optionalTarget=new Vector3){let point2=optionalTarget,points=this.points,l=points.length,p=(l-(this.closed?0:1))*t,intPoint=Math.floor(p),weight=p-intPoint;this.closed?intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l:weight===0&&intPoint===l-1&&(intPoint=l-2,weight=1);let p0,p3;this.closed||intPoint>0?p0=points[(intPoint-1)%l]:(tmp.subVectors(points[0],points[1]).add(points[0]),p0=tmp);let p1=points[intPoint%l],p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l?p3=points[(intPoint+2)%l]:(tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]),p3=tmp),this.curveType==="centripetal"||this.curveType==="chordal"){let pow=this.curveType==="chordal"?.5:.25,dt0=Math.pow(p0.distanceToSquared(p1),pow),dt1=Math.pow(p1.distanceToSquared(p2),pow),dt2=Math.pow(p2.distanceToSquared(p3),pow);dt1<1e-4&&(dt1=1),dt0<1e-4&&(dt0=dt1),dt2<1e-4&&(dt2=dt1),px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2),py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2),pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2)}else this.curveType==="catmullrom"&&(px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension),py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension),pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension));return point2.set(px.calc(weight),py.calc(weight),pz.calc(weight)),point2}copy(source){super.copy(source),this.points=[];for(let i=0,l=source.points.length;i<l;i++){let point2=source.points[i];this.points.push(point2.clone())}return this.closed=source.closed,this.curveType=source.curveType,this.tension=source.tension,this}toJSON(){let data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){let point2=this.points[i];data.points.push(point2.toArray())}return data.closed=this.closed,data.curveType=this.curveType,data.tension=this.tension,data}fromJSON(json){super.fromJSON(json),this.points=[];for(let i=0,l=json.points.length;i<l;i++){let point2=json.points[i];this.points.push(new Vector3().fromArray(point2))}return this.closed=json.closed,this.curveType=json.curveType,this.tension=json.tension,this}};function CatmullRom(t,p0,p1,p2,p3){let v0=(p2-p0)*.5,v1=(p3-p1)*.5,t2=t*t,t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1}function QuadraticBezierP0(t,p){let k=1-t;return k*k*p}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p}function QuadraticBezierP2(t,p){return t*t*p}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2)}function CubicBezierP0(t,p){let k=1-t;return k*k*k*p}function CubicBezierP1(t,p){let k=1-t;return 3*k*k*t*p}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p}function CubicBezierP3(t,p){return t*t*t*p}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3)}var CubicBezierCurve=class extends Curve{constructor(v0=new Vector2,v1=new Vector2,v2=new Vector2,v3=new Vector2){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=v0,this.v1=v1,this.v2=v2,this.v3=v3}getPoint(t,optionalTarget=new Vector2){let point2=optionalTarget,v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;return point2.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y)),point2}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this.v3.copy(source.v3),this}toJSON(){let data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data.v3=this.v3.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v0.fromArray(json.v0),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this.v3.fromArray(json.v3),this}},CubicBezierCurve3=class extends Curve{constructor(v0=new Vector3,v1=new Vector3,v2=new Vector3,v3=new Vector3){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=v0,this.v1=v1,this.v2=v2,this.v3=v3}getPoint(t,optionalTarget=new Vector3){let point2=optionalTarget,v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;return point2.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z)),point2}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this.v3.copy(source.v3),this}toJSON(){let data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data.v3=this.v3.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v0.fromArray(json.v0),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this.v3.fromArray(json.v3),this}},LineCurve=class extends Curve{constructor(v1=new Vector2,v2=new Vector2){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=v1,this.v2=v2}getPoint(t,optionalTarget=new Vector2){let point2=optionalTarget;return t===1?point2.copy(this.v2):(point2.copy(this.v2).sub(this.v1),point2.multiplyScalar(t).add(this.v1)),point2}getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget)}getTangent(t,optionalTarget){let tangent=optionalTarget||new Vector2;return tangent.copy(this.v2).sub(this.v1).normalize(),tangent}copy(source){return super.copy(source),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){let data=super.toJSON();return data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this}},LineCurve3=class extends Curve{constructor(v1=new Vector3,v2=new Vector3){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=v1,this.v2=v2}getPoint(t,optionalTarget=new Vector3){let point2=optionalTarget;return t===1?point2.copy(this.v2):(point2.copy(this.v2).sub(this.v1),point2.multiplyScalar(t).add(this.v1)),point2}getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget)}copy(source){return super.copy(source),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){let data=super.toJSON();return data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this}},QuadraticBezierCurve=class extends Curve{constructor(v0=new Vector2,v1=new Vector2,v2=new Vector2){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=v0,this.v1=v1,this.v2=v2}getPoint(t,optionalTarget=new Vector2){let point2=optionalTarget,v0=this.v0,v1=this.v1,v2=this.v2;return point2.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y)),point2}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){let data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v0.fromArray(json.v0),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this}},QuadraticBezierCurve3=class extends Curve{constructor(v0=new Vector3,v1=new Vector3,v2=new Vector3){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=v0,this.v1=v1,this.v2=v2}getPoint(t,optionalTarget=new Vector3){let point2=optionalTarget,v0=this.v0,v1=this.v1,v2=this.v2;return point2.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z)),point2}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){let data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(json){return super.fromJSON(json),this.v0.fromArray(json.v0),this.v1.fromArray(json.v1),this.v2.fromArray(json.v2),this}},SplineCurve=class extends Curve{constructor(points=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=points}getPoint(t,optionalTarget=new Vector2){let point2=optionalTarget,points=this.points,p=(points.length-1)*t,intPoint=Math.floor(p),weight=p-intPoint,p0=points[intPoint===0?intPoint:intPoint-1],p1=points[intPoint],p2=points[intPoint>points.length-2?points.length-1:intPoint+1],p3=points[intPoint>points.length-3?points.length-1:intPoint+2];return point2.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y)),point2}copy(source){super.copy(source),this.points=[];for(let i=0,l=source.points.length;i<l;i++){let point2=source.points[i];this.points.push(point2.clone())}return this}toJSON(){let data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){let point2=this.points[i];data.points.push(point2.toArray())}return data}fromJSON(json){super.fromJSON(json),this.points=[];for(let i=0,l=json.points.length;i<l;i++){let point2=json.points[i];this.points.push(new Vector2().fromArray(point2))}return this}},Curves=Object.freeze({__proto__:null,ArcCurve,CatmullRomCurve3,CubicBezierCurve,CubicBezierCurve3,EllipseCurve,LineCurve,LineCurve3,QuadraticBezierCurve,QuadraticBezierCurve3,SplineCurve}),CurvePath=class extends Curve{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(curve){this.curves.push(curve)}closePath(){let startPoint=this.curves[0].getPoint(0),endPoint=this.curves[this.curves.length-1].getPoint(1);startPoint.equals(endPoint)||this.curves.push(new LineCurve(endPoint,startPoint))}getPoint(t,optionalTarget){let d=t*this.getLength(),curveLengths=this.getCurveLengths(),i=0;for(;i<curveLengths.length;){if(curveLengths[i]>=d){let diff=curveLengths[i]-d,curve=this.curves[i],segmentLength=curve.getLength(),u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u,optionalTarget)}i++}return null}getLength(){let lens=this.getCurveLengths();return lens[lens.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;let lengths=[],sums=0;for(let i=0,l=this.curves.length;i<l;i++)sums+=this.curves[i].getLength(),lengths.push(sums);return this.cacheLengths=lengths,lengths}getSpacedPoints(divisions=40){let points=[];for(let i=0;i<=divisions;i++)points.push(this.getPoint(i/divisions));return this.autoClose&&points.push(points[0]),points}getPoints(divisions=12){let points=[],last;for(let i=0,curves=this.curves;i<curves.length;i++){let curve=curves[i],resolution=curve.isEllipseCurve?divisions*2:curve.isLineCurve||curve.isLineCurve3?1:curve.isSplineCurve?divisions*curve.points.length:divisions,pts=curve.getPoints(resolution);for(let j=0;j<pts.length;j++){let point2=pts[j];last&&last.equals(point2)||(points.push(point2),last=point2)}}return this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])&&points.push(points[0]),points}copy(source){super.copy(source),this.curves=[];for(let i=0,l=source.curves.length;i<l;i++){let curve=source.curves[i];this.curves.push(curve.clone())}return this.autoClose=source.autoClose,this}toJSON(){let data=super.toJSON();data.autoClose=this.autoClose,data.curves=[];for(let i=0,l=this.curves.length;i<l;i++){let curve=this.curves[i];data.curves.push(curve.toJSON())}return data}fromJSON(json){super.fromJSON(json),this.autoClose=json.autoClose,this.curves=[];for(let i=0,l=json.curves.length;i<l;i++){let curve=json.curves[i];this.curves.push(new Curves[curve.type]().fromJSON(curve))}return this}},Path=class extends CurvePath{constructor(points){super(),this.type="Path",this.currentPoint=new Vector2,points&&this.setFromPoints(points)}setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(let i=1,l=points.length;i<l;i++)this.lineTo(points[i].x,points[i].y);return this}moveTo(x,y){return this.currentPoint.set(x,y),this}lineTo(x,y){let curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));return this.curves.push(curve),this.currentPoint.set(x,y),this}quadraticCurveTo(aCPx,aCPy,aX,aY){let curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));return this.curves.push(curve),this.currentPoint.set(aX,aY),this}bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){let curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));return this.curves.push(curve),this.currentPoint.set(aX,aY),this}splineThru(pts){let npts=[this.currentPoint.clone()].concat(pts),curve=new SplineCurve(npts);return this.curves.push(curve),this.currentPoint.copy(pts[pts.length-1]),this}arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){let x0=this.currentPoint.x,y0=this.currentPoint.y;return this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise),this}absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){return this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise),this}ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){let x0=this.currentPoint.x,y0=this.currentPoint.y;return this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation),this}absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){let curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){let firstPoint=curve.getPoint(0);firstPoint.equals(this.currentPoint)||this.lineTo(firstPoint.x,firstPoint.y)}this.curves.push(curve);let lastPoint=curve.getPoint(1);return this.currentPoint.copy(lastPoint),this}copy(source){return super.copy(source),this.currentPoint.copy(source.currentPoint),this}toJSON(){let data=super.toJSON();return data.currentPoint=this.currentPoint.toArray(),data}fromJSON(json){return super.fromJSON(json),this.currentPoint.fromArray(json.currentPoint),this}},LatheGeometry=class extends BufferGeometry{constructor(points=[new Vector2(0,-.5),new Vector2(.5,0),new Vector2(0,.5)],segments=12,phiStart=0,phiLength=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points,segments,phiStart,phiLength},segments=Math.floor(segments),phiLength=clamp(phiLength,0,Math.PI*2);let indices=[],vertices=[],uvs=[],initNormals=[],normals=[],inverseSegments=1/segments,vertex2=new Vector3,uv=new Vector2,normal=new Vector3,curNormal=new Vector3,prevNormal=new Vector3,dx=0,dy=0;for(let j=0;j<=points.length-1;j++)switch(j){case 0:dx=points[j+1].x-points[j].x,dy=points[j+1].y-points[j].y,normal.x=dy*1,normal.y=-dx,normal.z=dy*0,prevNormal.copy(normal),normal.normalize(),initNormals.push(normal.x,normal.y,normal.z);break;case points.length-1:initNormals.push(prevNormal.x,prevNormal.y,prevNormal.z);break;default:dx=points[j+1].x-points[j].x,dy=points[j+1].y-points[j].y,normal.x=dy*1,normal.y=-dx,normal.z=dy*0,curNormal.copy(normal),normal.x+=prevNormal.x,normal.y+=prevNormal.y,normal.z+=prevNormal.z,normal.normalize(),initNormals.push(normal.x,normal.y,normal.z),prevNormal.copy(curNormal)}for(let i=0;i<=segments;i++){let phi=phiStart+i*inverseSegments*phiLength,sin=Math.sin(phi),cos=Math.cos(phi);for(let j=0;j<=points.length-1;j++){vertex2.x=points[j].x*sin,vertex2.y=points[j].y,vertex2.z=points[j].x*cos,vertices.push(vertex2.x,vertex2.y,vertex2.z),uv.x=i/segments,uv.y=j/(points.length-1),uvs.push(uv.x,uv.y);let x=initNormals[3*j+0]*sin,y=initNormals[3*j+1],z=initNormals[3*j+0]*cos;normals.push(x,y,z)}}for(let i=0;i<segments;i++)for(let j=0;j<points.length-1;j++){let base=j+i*points.length,a=base,b=base+points.length,c=base+points.length+1,d=base+1;indices.push(a,b,d),indices.push(c,d,b)}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2)),this.setAttribute("normal",new Float32BufferAttribute(normals,3))}static fromJSON(data){return new LatheGeometry(data.points,data.segments,data.phiStart,data.phiLength)}},CapsuleGeometry=class extends LatheGeometry{constructor(radius=1,length=1,capSegments=4,radialSegments=8){let path=new Path;path.absarc(0,-length/2,radius,Math.PI*1.5,0),path.absarc(0,length/2,radius,0,Math.PI*.5),super(path.getPoints(capSegments),radialSegments),this.type="CapsuleGeometry",this.parameters={radius,height:length,capSegments,radialSegments}}static fromJSON(data){return new CapsuleGeometry(data.radius,data.length,data.capSegments,data.radialSegments)}},CircleGeometry=class extends BufferGeometry{constructor(radius=1,segments=8,thetaStart=0,thetaLength=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius,segments,thetaStart,thetaLength},segments=Math.max(3,segments);let indices=[],vertices=[],normals=[],uvs=[],vertex2=new Vector3,uv=new Vector2;vertices.push(0,0,0),normals.push(0,0,1),uvs.push(.5,.5);for(let s=0,i=3;s<=segments;s++,i+=3){let segment=thetaStart+s/segments*thetaLength;vertex2.x=radius*Math.cos(segment),vertex2.y=radius*Math.sin(segment),vertices.push(vertex2.x,vertex2.y,vertex2.z),normals.push(0,0,1),uv.x=(vertices[i]/radius+1)/2,uv.y=(vertices[i+1]/radius+1)/2,uvs.push(uv.x,uv.y)}for(let i=1;i<=segments;i++)indices.push(i,i+1,0);this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2))}static fromJSON(data){return new CircleGeometry(data.radius,data.segments,data.thetaStart,data.thetaLength)}},CylinderGeometry=class extends BufferGeometry{constructor(radiusTop=1,radiusBottom=1,height=1,radialSegments=8,heightSegments=1,openEnded=!1,thetaStart=0,thetaLength=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength};let scope=this;radialSegments=Math.floor(radialSegments),heightSegments=Math.floor(heightSegments);let indices=[],vertices=[],normals=[],uvs=[],index=0,indexArray=[],halfHeight=height/2,groupStart=0;generateTorso(),openEnded===!1&&(radiusTop>0&&generateCap(!0),radiusBottom>0&&generateCap(!1)),this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2));function generateTorso(){let normal=new Vector3,vertex2=new Vector3,groupCount=0,slope=(radiusBottom-radiusTop)/height;for(let y=0;y<=heightSegments;y++){let indexRow=[],v=y/heightSegments,radius=v*(radiusBottom-radiusTop)+radiusTop;for(let x=0;x<=radialSegments;x++){let u=x/radialSegments,theta=u*thetaLength+thetaStart,sinTheta=Math.sin(theta),cosTheta=Math.cos(theta);vertex2.x=radius*sinTheta,vertex2.y=-v*height+halfHeight,vertex2.z=radius*cosTheta,vertices.push(vertex2.x,vertex2.y,vertex2.z),normal.set(sinTheta,slope,cosTheta).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(u,1-v),indexRow.push(index++)}indexArray.push(indexRow)}for(let x=0;x<radialSegments;x++)for(let y=0;y<heightSegments;y++){let a=indexArray[y][x],b=indexArray[y+1][x],c=indexArray[y+1][x+1],d=indexArray[y][x+1];indices.push(a,b,d),indices.push(b,c,d),groupCount+=6}scope.addGroup(groupStart,groupCount,0),groupStart+=groupCount}function generateCap(top){let centerIndexStart=index,uv=new Vector2,vertex2=new Vector3,groupCount=0,radius=top===!0?radiusTop:radiusBottom,sign2=top===!0?1:-1;for(let x=1;x<=radialSegments;x++)vertices.push(0,halfHeight*sign2,0),normals.push(0,sign2,0),uvs.push(.5,.5),index++;let centerIndexEnd=index;for(let x=0;x<=radialSegments;x++){let theta=x/radialSegments*thetaLength+thetaStart,cosTheta=Math.cos(theta),sinTheta=Math.sin(theta);vertex2.x=radius*sinTheta,vertex2.y=halfHeight*sign2,vertex2.z=radius*cosTheta,vertices.push(vertex2.x,vertex2.y,vertex2.z),normals.push(0,sign2,0),uv.x=cosTheta*.5+.5,uv.y=sinTheta*.5*sign2+.5,uvs.push(uv.x,uv.y),index++}for(let x=0;x<radialSegments;x++){let c=centerIndexStart+x,i=centerIndexEnd+x;top===!0?indices.push(i,i+1,c):indices.push(i+1,i,c),groupCount+=3}scope.addGroup(groupStart,groupCount,top===!0?1:2),groupStart+=groupCount}}static fromJSON(data){return new CylinderGeometry(data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength)}},ConeGeometry=class extends CylinderGeometry{constructor(radius=1,height=1,radialSegments=8,heightSegments=1,openEnded=!1,thetaStart=0,thetaLength=Math.PI*2){super(0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength),this.type="ConeGeometry",this.parameters={radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength}}static fromJSON(data){return new ConeGeometry(data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength)}},PolyhedronGeometry=class extends BufferGeometry{constructor(vertices=[],indices=[],radius=1,detail=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices,indices,radius,detail};let vertexBuffer=[],uvBuffer=[];subdivide2(detail),applyRadius(radius),generateUVs(),this.setAttribute("position",new Float32BufferAttribute(vertexBuffer,3)),this.setAttribute("normal",new Float32BufferAttribute(vertexBuffer.slice(),3)),this.setAttribute("uv",new Float32BufferAttribute(uvBuffer,2)),detail===0?this.computeVertexNormals():this.normalizeNormals();function subdivide2(detail2){let a=new Vector3,b=new Vector3,c=new Vector3;for(let i=0;i<indices.length;i+=3)getVertexByIndex(indices[i+0],a),getVertexByIndex(indices[i+1],b),getVertexByIndex(indices[i+2],c),subdivideFace(a,b,c,detail2)}function subdivideFace(a,b,c,detail2){let cols=detail2+1,v=[];for(let i=0;i<=cols;i++){v[i]=[];let aj=a.clone().lerp(c,i/cols),bj=b.clone().lerp(c,i/cols),rows=cols-i;for(let j=0;j<=rows;j++)j===0&&i===cols?v[i][j]=aj:v[i][j]=aj.clone().lerp(bj,j/rows)}for(let i=0;i<cols;i++)for(let j=0;j<2*(cols-i)-1;j++){let k=Math.floor(j/2);j%2===0?(pushVertex(v[i][k+1]),pushVertex(v[i+1][k]),pushVertex(v[i][k])):(pushVertex(v[i][k+1]),pushVertex(v[i+1][k+1]),pushVertex(v[i+1][k]))}}function applyRadius(radius2){let vertex2=new Vector3;for(let i=0;i<vertexBuffer.length;i+=3)vertex2.x=vertexBuffer[i+0],vertex2.y=vertexBuffer[i+1],vertex2.z=vertexBuffer[i+2],vertex2.normalize().multiplyScalar(radius2),vertexBuffer[i+0]=vertex2.x,vertexBuffer[i+1]=vertex2.y,vertexBuffer[i+2]=vertex2.z}function generateUVs(){let vertex2=new Vector3;for(let i=0;i<vertexBuffer.length;i+=3){vertex2.x=vertexBuffer[i+0],vertex2.y=vertexBuffer[i+1],vertex2.z=vertexBuffer[i+2];let u=azimuth(vertex2)/2/Math.PI+.5,v=inclination(vertex2)/Math.PI+.5;uvBuffer.push(u,1-v)}correctUVs(),correctSeam()}function correctSeam(){for(let i=0;i<uvBuffer.length;i+=6){let x0=uvBuffer[i+0],x1=uvBuffer[i+2],x2=uvBuffer[i+4],max=Math.max(x0,x1,x2),min=Math.min(x0,x1,x2);max>.9&&min<.1&&(x0<.2&&(uvBuffer[i+0]+=1),x1<.2&&(uvBuffer[i+2]+=1),x2<.2&&(uvBuffer[i+4]+=1))}}function pushVertex(vertex2){vertexBuffer.push(vertex2.x,vertex2.y,vertex2.z)}function getVertexByIndex(index,vertex2){let stride=index*3;vertex2.x=vertices[stride+0],vertex2.y=vertices[stride+1],vertex2.z=vertices[stride+2]}function correctUVs(){let a=new Vector3,b=new Vector3,c=new Vector3,centroid=new Vector3,uvA=new Vector2,uvB=new Vector2,uvC=new Vector2;for(let i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]),b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]),c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]),uvA.set(uvBuffer[j+0],uvBuffer[j+1]),uvB.set(uvBuffer[j+2],uvBuffer[j+3]),uvC.set(uvBuffer[j+4],uvBuffer[j+5]),centroid.copy(a).add(b).add(c).divideScalar(3);let azi=azimuth(centroid);correctUV(uvA,j+0,a,azi),correctUV(uvB,j+2,b,azi),correctUV(uvC,j+4,c,azi)}}function correctUV(uv,stride,vector,azimuth2){azimuth2<0&&uv.x===1&&(uvBuffer[stride]=uv.x-1),vector.x===0&&vector.z===0&&(uvBuffer[stride]=azimuth2/2/Math.PI+.5)}function azimuth(vector){return Math.atan2(vector.z,-vector.x)}function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z))}}static fromJSON(data){return new PolyhedronGeometry(data.vertices,data.indices,data.radius,data.details)}},DodecahedronGeometry=class extends PolyhedronGeometry{constructor(radius=1,detail=0){let t=(1+Math.sqrt(5))/2,r=1/t,vertices=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-t,0,-r,t,0,r,-t,0,r,t,-r,-t,0,-r,t,0,r,-t,0,r,t,0,-t,0,-r,t,0,-r,-t,0,r,t,0,r],indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(vertices,indices,radius,detail),this.type="DodecahedronGeometry",this.parameters={radius,detail}}static fromJSON(data){return new DodecahedronGeometry(data.radius,data.detail)}},_v0=new Vector3,_v1$1=new Vector3,_normal=new Vector3,_triangle=new Triangle,EdgesGeometry=class extends BufferGeometry{constructor(geometry=null,thresholdAngle=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry,thresholdAngle},geometry!==null){let precision=Math.pow(10,4),thresholdDot=Math.cos(DEG2RAD*thresholdAngle),indexAttr=geometry.getIndex(),positionAttr=geometry.getAttribute("position"),indexCount=indexAttr?indexAttr.count:positionAttr.count,indexArr=[0,0,0],vertKeys=["a","b","c"],hashes=new Array(3),edgeData={},vertices=[];for(let i=0;i<indexCount;i+=3){indexAttr?(indexArr[0]=indexAttr.getX(i),indexArr[1]=indexAttr.getX(i+1),indexArr[2]=indexAttr.getX(i+2)):(indexArr[0]=i,indexArr[1]=i+1,indexArr[2]=i+2);let{a,b,c}=_triangle;if(a.fromBufferAttribute(positionAttr,indexArr[0]),b.fromBufferAttribute(positionAttr,indexArr[1]),c.fromBufferAttribute(positionAttr,indexArr[2]),_triangle.getNormal(_normal),hashes[0]=`${Math.round(a.x*precision)},${Math.round(a.y*precision)},${Math.round(a.z*precision)}`,hashes[1]=`${Math.round(b.x*precision)},${Math.round(b.y*precision)},${Math.round(b.z*precision)}`,hashes[2]=`${Math.round(c.x*precision)},${Math.round(c.y*precision)},${Math.round(c.z*precision)}`,!(hashes[0]===hashes[1]||hashes[1]===hashes[2]||hashes[2]===hashes[0]))for(let j=0;j<3;j++){let jNext=(j+1)%3,vecHash0=hashes[j],vecHash1=hashes[jNext],v0=_triangle[vertKeys[j]],v1=_triangle[vertKeys[jNext]],hash=`${vecHash0}_${vecHash1}`,reverseHash=`${vecHash1}_${vecHash0}`;reverseHash in edgeData&&edgeData[reverseHash]?(_normal.dot(edgeData[reverseHash].normal)<=thresholdDot&&(vertices.push(v0.x,v0.y,v0.z),vertices.push(v1.x,v1.y,v1.z)),edgeData[reverseHash]=null):hash in edgeData||(edgeData[hash]={index0:indexArr[j],index1:indexArr[jNext],normal:_normal.clone()})}}for(let key in edgeData)if(edgeData[key]){let{index0,index1}=edgeData[key];_v0.fromBufferAttribute(positionAttr,index0),_v1$1.fromBufferAttribute(positionAttr,index1),vertices.push(_v0.x,_v0.y,_v0.z),vertices.push(_v1$1.x,_v1$1.y,_v1$1.z)}this.setAttribute("position",new Float32BufferAttribute(vertices,3))}}},Shape=class extends Path{constructor(points){super(points),this.uuid=generateUUID(),this.type="Shape",this.holes=[]}getPointsHoles(divisions){let holesPts=[];for(let i=0,l=this.holes.length;i<l;i++)holesPts[i]=this.holes[i].getPoints(divisions);return holesPts}extractPoints(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)}}copy(source){super.copy(source),this.holes=[];for(let i=0,l=source.holes.length;i<l;i++){let hole=source.holes[i];this.holes.push(hole.clone())}return this}toJSON(){let data=super.toJSON();data.uuid=this.uuid,data.holes=[];for(let i=0,l=this.holes.length;i<l;i++){let hole=this.holes[i];data.holes.push(hole.toJSON())}return data}fromJSON(json){super.fromJSON(json),this.uuid=json.uuid,this.holes=[];for(let i=0,l=json.holes.length;i<l;i++){let hole=json.holes[i];this.holes.push(new Path().fromJSON(hole))}return this}},Earcut={triangulate:function(data,holeIndices,dim=2){let hasHoles=holeIndices&&holeIndices.length,outerLen=hasHoles?holeIndices[0]*dim:data.length,outerNode=linkedList(data,0,outerLen,dim,!0),triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;let minX,minY,maxX,maxY,x,y,invSize;if(hasHoles&&(outerNode=eliminateHoles(data,holeIndices,outerNode,dim)),data.length>80*dim){minX=maxX=data[0],minY=maxY=data[1];for(let i=dim;i<outerLen;i+=dim)x=data[i],y=data[i+1],x<minX&&(minX=x),y<minY&&(minY=y),x>maxX&&(maxX=x),y>maxY&&(maxY=y);invSize=Math.max(maxX-minX,maxY-minY),invSize=invSize!==0?32767/invSize:0}return earcutLinked(outerNode,triangles,dim,minX,minY,invSize,0),triangles}};function linkedList(data,start,end,dim,clockwise){let i,last;if(clockwise===signedArea(data,start,end,dim)>0)for(i=start;i<end;i+=dim)last=insertNode(i,data[i],data[i+1],last);else for(i=end-dim;i>=start;i-=dim)last=insertNode(i,data[i],data[i+1],last);return last&&equals(last,last.next)&&(removeNode(last),last=last.next),last}function filterPoints(start,end){if(!start)return start;end||(end=start);let p=start,again;do if(again=!1,!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){if(removeNode(p),p=end=p.prev,p===p.next)break;again=!0}else p=p.next;while(again||p!==end);return end}function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;!pass&&invSize&&indexCurve(ear,minX,minY,invSize);let stop=ear,prev,next;for(;ear.prev!==ear.next;){if(prev=ear.prev,next=ear.next,invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){triangles.push(prev.i/dim|0),triangles.push(ear.i/dim|0),triangles.push(next.i/dim|0),removeNode(ear),ear=next.next,stop=next.next;continue}if(ear=next,ear===stop){pass?pass===1?(ear=cureLocalIntersections(filterPoints(ear),triangles,dim),earcutLinked(ear,triangles,dim,minX,minY,invSize,2)):pass===2&&splitEarcut(ear,triangles,dim,minX,minY,invSize):earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);break}}}function isEar(ear){let a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return!1;let ax=a.x,bx=b.x,cx=c.x,ay=a.y,by=b.y,cy=c.y,x0=ax<bx?ax<cx?ax:cx:bx<cx?bx:cx,y0=ay<by?ay<cy?ay:cy:by<cy?by:cy,x1=ax>bx?ax>cx?ax:cx:bx>cx?bx:cx,y1=ay>by?ay>cy?ay:cy:by>cy?by:cy,p=c.next;for(;p!==a;){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&pointInTriangle(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function isEarHashed(ear,minX,minY,invSize){let a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return!1;let ax=a.x,bx=b.x,cx=c.x,ay=a.y,by=b.y,cy=c.y,x0=ax<bx?ax<cx?ax:cx:bx<cx?bx:cx,y0=ay<by?ay<cy?ay:cy:by<cy?by:cy,x1=ax>bx?ax>cx?ax:cx:bx>cx?bx:cx,y1=ay>by?ay>cy?ay:cy:by>cy?by:cy,minZ=zOrder(x0,y0,minX,minY,invSize),maxZ=zOrder(x1,y1,minX,minY,invSize),p=ear.prevZ,n=ear.nextZ;for(;p&&p.z>=minZ&&n&&n.z<=maxZ;){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&p!==a&&p!==c&&pointInTriangle(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0||(p=p.prevZ,n.x>=x0&&n.x<=x1&&n.y>=y0&&n.y<=y1&&n!==a&&n!==c&&pointInTriangle(ax,ay,bx,by,cx,cy,n.x,n.y)&&area(n.prev,n,n.next)>=0))return!1;n=n.nextZ}for(;p&&p.z>=minZ;){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&p!==a&&p!==c&&pointInTriangle(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;n&&n.z<=maxZ;){if(n.x>=x0&&n.x<=x1&&n.y>=y0&&n.y<=y1&&n!==a&&n!==c&&pointInTriangle(ax,ay,bx,by,cx,cy,n.x,n.y)&&area(n.prev,n,n.next)>=0)return!1;n=n.nextZ}return!0}function cureLocalIntersections(start,triangles,dim){let p=start;do{let a=p.prev,b=p.next.next;!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)&&(triangles.push(a.i/dim|0),triangles.push(p.i/dim|0),triangles.push(b.i/dim|0),removeNode(p),removeNode(p.next),p=start=b),p=p.next}while(p!==start);return filterPoints(p)}function splitEarcut(start,triangles,dim,minX,minY,invSize){let a=start;do{let b=a.next.next;for(;b!==a.prev;){if(a.i!==b.i&&isValidDiagonal(a,b)){let c=splitPolygon(a,b);a=filterPoints(a,a.next),c=filterPoints(c,c.next),earcutLinked(a,triangles,dim,minX,minY,invSize,0),earcutLinked(c,triangles,dim,minX,minY,invSize,0);return}b=b.next}a=a.next}while(a!==start)}function eliminateHoles(data,holeIndices,outerNode,dim){let queue=[],i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++)start=holeIndices[i]*dim,end=i<len-1?holeIndices[i+1]*dim:data.length,list=linkedList(data,start,end,dim,!1),list===list.next&&(list.steiner=!0),queue.push(getLeftmost(list));for(queue.sort(compareX),i=0;i<queue.length;i++)outerNode=eliminateHole(queue[i],outerNode);return outerNode}function compareX(a,b){return a.x-b.x}function eliminateHole(hole,outerNode){let bridge=findHoleBridge(hole,outerNode);if(!bridge)return outerNode;let bridgeReverse=splitPolygon(bridge,hole);return filterPoints(bridgeReverse,bridgeReverse.next),filterPoints(bridge,bridge.next)}function findHoleBridge(hole,outerNode){let p=outerNode,qx=-1/0,m,hx=hole.x,hy=hole.y;do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){let x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx&&(qx=x,m=p.x<p.next.x?p:p.next,x===hx))return m}p=p.next}while(p!==outerNode);if(!m)return null;let stop=m,mx=m.x,my=m.y,tanMin=1/0,tan;p=m;do hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)&&(tan=Math.abs(hy-p.y)/(hx-p.x),locallyInside(p,hole)&&(tan<tanMin||tan===tanMin&&(p.x>m.x||p.x===m.x&&sectorContainsSector(m,p)))&&(m=p,tanMin=tan)),p=p.next;while(p!==stop);return m}function sectorContainsSector(m,p){return area(m.prev,m,p.prev)<0&&area(p.next,m,m.next)<0}function indexCurve(start,minX,minY,invSize){let p=start;do p.z===0&&(p.z=zOrder(p.x,p.y,minX,minY,invSize)),p.prevZ=p.prev,p.nextZ=p.next,p=p.next;while(p!==start);p.prevZ.nextZ=null,p.prevZ=null,sortLinked(p)}function sortLinked(list){let i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{for(p=list,list=null,tail=null,numMerges=0;p;){for(numMerges++,q=p,pSize=0,i=0;i<inSize&&(pSize++,q=q.nextZ,!!q);i++);for(qSize=inSize;pSize>0||qSize>0&&q;)pSize!==0&&(qSize===0||!q||p.z<=q.z)?(e=p,p=p.nextZ,pSize--):(e=q,q=q.nextZ,qSize--),tail?tail.nextZ=e:list=e,e.prevZ=tail,tail=e;p=q}tail.nextZ=null,inSize*=2}while(numMerges>1);return list}function zOrder(x,y,minX,minY,invSize){return x=(x-minX)*invSize|0,y=(y-minY)*invSize|0,x=(x|x<<8)&16711935,x=(x|x<<4)&252645135,x=(x|x<<2)&858993459,x=(x|x<<1)&1431655765,y=(y|y<<8)&16711935,y=(y|y<<4)&252645135,y=(y|y<<2)&858993459,y=(y|y<<1)&1431655765,x|y<<1}function getLeftmost(start){let p=start,leftmost=start;do(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)&&(leftmost=p),p=p.next;while(p!==start);return leftmost}function pointInTriangle(ax,ay,bx,by,cx,cy,px2,py2){return(cx-px2)*(ay-py2)>=(ax-px2)*(cy-py2)&&(ax-px2)*(by-py2)>=(bx-px2)*(ay-py2)&&(bx-px2)*(cy-py2)>=(cx-px2)*(by-py2)}function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&(locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b)&&(area(a.prev,a,b.prev)||area(a,b.prev,b))||equals(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0)}function area(p,q,r){return(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y)}function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y}function intersects(p1,q1,p2,q2){let o1=sign(area(p1,q1,p2)),o2=sign(area(p1,q1,q2)),o3=sign(area(p2,q2,p1)),o4=sign(area(p2,q2,q1));return!!(o1!==o2&&o3!==o4||o1===0&&onSegment(p1,p2,q1)||o2===0&&onSegment(p1,q2,q1)||o3===0&&onSegment(p2,p1,q2)||o4===0&&onSegment(p2,q1,q2))}function onSegment(p,q,r){return q.x<=Math.max(p.x,r.x)&&q.x>=Math.min(p.x,r.x)&&q.y<=Math.max(p.y,r.y)&&q.y>=Math.min(p.y,r.y)}function sign(num){return num>0?1:num<0?-1:0}function intersectsPolygon(a,b){let p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return!0;p=p.next}while(p!==a);return!1}function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0}function middleInside(a,b){let p=a,inside=!1,px2=(a.x+b.x)/2,py2=(a.y+b.y)/2;do p.y>py2!=p.next.y>py2&&p.next.y!==p.y&&px2<(p.next.x-p.x)*(py2-p.y)/(p.next.y-p.y)+p.x&&(inside=!inside),p=p.next;while(p!==a);return inside}function splitPolygon(a,b){let a2=new Node(a.i,a.x,a.y),b2=new Node(b.i,b.x,b.y),an=a.next,bp=b.prev;return a.next=b,b.prev=a,a2.next=an,an.prev=a2,b2.next=a2,a2.prev=b2,bp.next=b2,b2.prev=bp,b2}function insertNode(i,x,y,last){let p=new Node(i,x,y);return last?(p.next=last.next,p.prev=last,last.next.prev=p,last.next=p):(p.prev=p,p.next=p),p}function removeNode(p){p.next.prev=p.prev,p.prev.next=p.next,p.prevZ&&(p.prevZ.nextZ=p.nextZ),p.nextZ&&(p.nextZ.prevZ=p.prevZ)}function Node(i,x,y){this.i=i,this.x=x,this.y=y,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function signedArea(data,start,end,dim){let sum=0;for(let i=start,j=end-dim;i<end;i+=dim)sum+=(data[j]-data[i])*(data[i+1]+data[j+1]),j=i;return sum}var ShapeUtils=class{static area(contour){let n=contour.length,a=0;for(let p=n-1,q=0;q<n;p=q++)a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;return a*.5}static isClockWise(pts){return ShapeUtils.area(pts)<0}static triangulateShape(contour,holes){let vertices=[],holeIndices=[],faces=[];removeDupEndPts(contour),addContour(vertices,contour);let holeIndex=contour.length;holes.forEach(removeDupEndPts);for(let i=0;i<holes.length;i++)holeIndices.push(holeIndex),holeIndex+=holes[i].length,addContour(vertices,holes[i]);let triangles=Earcut.triangulate(vertices,holeIndices);for(let i=0;i<triangles.length;i+=3)faces.push(triangles.slice(i,i+3));return faces}};function removeDupEndPts(points){let l=points.length;l>2&&points[l-1].equals(points[0])&&points.pop()}function addContour(vertices,contour){for(let i=0;i<contour.length;i++)vertices.push(contour[i].x),vertices.push(contour[i].y)}var ExtrudeGeometry=class extends BufferGeometry{constructor(shapes=new Shape([new Vector2(.5,.5),new Vector2(-.5,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),options={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes,options},shapes=Array.isArray(shapes)?shapes:[shapes];let scope=this,verticesArray=[],uvArray=[];for(let i=0,l=shapes.length;i<l;i++){let shape=shapes[i];addShape(shape)}this.setAttribute("position",new Float32BufferAttribute(verticesArray,3)),this.setAttribute("uv",new Float32BufferAttribute(uvArray,2)),this.computeVertexNormals();function addShape(shape){let placeholder=[],curveSegments=options.curveSegments!==void 0?options.curveSegments:12,steps=options.steps!==void 0?options.steps:1,depth=options.depth!==void 0?options.depth:1,bevelEnabled=options.bevelEnabled!==void 0?options.bevelEnabled:!0,bevelThickness=options.bevelThickness!==void 0?options.bevelThickness:.2,bevelSize=options.bevelSize!==void 0?options.bevelSize:bevelThickness-.1,bevelOffset=options.bevelOffset!==void 0?options.bevelOffset:0,bevelSegments=options.bevelSegments!==void 0?options.bevelSegments:3,extrudePath=options.extrudePath,uvgen=options.UVGenerator!==void 0?options.UVGenerator:WorldUVGenerator,extrudePts,extrudeByPath=!1,splineTube,binormal,normal,position2;extrudePath&&(extrudePts=extrudePath.getSpacedPoints(steps),extrudeByPath=!0,bevelEnabled=!1,splineTube=extrudePath.computeFrenetFrames(steps,!1),binormal=new Vector3,normal=new Vector3,position2=new Vector3),bevelEnabled||(bevelSegments=0,bevelThickness=0,bevelSize=0,bevelOffset=0);let shapePoints=shape.extractPoints(curveSegments),vertices=shapePoints.shape,holes=shapePoints.holes;if(!ShapeUtils.isClockWise(vertices)){vertices=vertices.reverse();for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];ShapeUtils.isClockWise(ahole)&&(holes[h]=ahole.reverse())}}let faces=ShapeUtils.triangulateShape(vertices,holes),contour=vertices;for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];vertices=vertices.concat(ahole)}function scalePt2(pt,vec,size){return vec||console.error("THREE.ExtrudeGeometry: vec does not exist"),vec.clone().multiplyScalar(size).add(pt)}let vlen=vertices.length,flen=faces.length;function getBevelVec(inPt,inPrev,inNext){let v_trans_x,v_trans_y,shrink_by,v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y,v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y,v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y,collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){let v_prev_len=Math.sqrt(v_prev_lensq),v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y),ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len,ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len,ptNextShift_x=inNext.x-v_next_y/v_next_len,ptNextShift_y=inNext.y+v_next_x/v_next_len,sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x,v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;let v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2)return new Vector2(v_trans_x,v_trans_y);shrink_by=Math.sqrt(v_trans_lensq/2)}else{let direction_eq=!1;v_prev_x>Number.EPSILON?v_next_x>Number.EPSILON&&(direction_eq=!0):v_prev_x<-Number.EPSILON?v_next_x<-Number.EPSILON&&(direction_eq=!0):Math.sign(v_prev_y)===Math.sign(v_next_y)&&(direction_eq=!0),direction_eq?(v_trans_x=-v_prev_y,v_trans_y=v_prev_x,shrink_by=Math.sqrt(v_prev_lensq)):(v_trans_x=v_prev_x,v_trans_y=v_prev_y,shrink_by=Math.sqrt(v_prev_lensq/2))}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by)}let contourMovements=[];for(let i=0,il=contour.length,j=il-1,k=i+1;i<il;i++,j++,k++)j===il&&(j=0),k===il&&(k=0),contourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);let holesMovements=[],oneHoleMovements,verticesMovements=contourMovements.concat();for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];oneHoleMovements=[];for(let i=0,il=ahole.length,j=il-1,k=i+1;i<il;i++,j++,k++)j===il&&(j=0),k===il&&(k=0),oneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);holesMovements.push(oneHoleMovements),verticesMovements=verticesMovements.concat(oneHoleMovements)}for(let b=0;b<bevelSegments;b++){let t=b/bevelSegments,z=bevelThickness*Math.cos(t*Math.PI/2),bs2=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;for(let i=0,il=contour.length;i<il;i++){let vert=scalePt2(contour[i],contourMovements[i],bs2);v(vert.x,vert.y,-z)}for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];oneHoleMovements=holesMovements[h];for(let i=0,il=ahole.length;i<il;i++){let vert=scalePt2(ahole[i],oneHoleMovements[i],bs2);v(vert.x,vert.y,-z)}}}let bs=bevelSize+bevelOffset;for(let i=0;i<vlen;i++){let vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];extrudeByPath?(normal.copy(splineTube.normals[0]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y),position2.copy(extrudePts[0]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,0)}for(let s=1;s<=steps;s++)for(let i=0;i<vlen;i++){let vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];extrudeByPath?(normal.copy(splineTube.normals[s]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y),position2.copy(extrudePts[s]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,depth/steps*s)}for(let b=bevelSegments-1;b>=0;b--){let t=b/bevelSegments,z=bevelThickness*Math.cos(t*Math.PI/2),bs2=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;for(let i=0,il=contour.length;i<il;i++){let vert=scalePt2(contour[i],contourMovements[i],bs2);v(vert.x,vert.y,depth+z)}for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];oneHoleMovements=holesMovements[h];for(let i=0,il=ahole.length;i<il;i++){let vert=scalePt2(ahole[i],oneHoleMovements[i],bs2);extrudeByPath?v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z):v(vert.x,vert.y,depth+z)}}}buildLidFaces(),buildSideFaces();function buildLidFaces(){let start=verticesArray.length/3;if(bevelEnabled){let layer=0,offset=vlen*layer;for(let i=0;i<flen;i++){let face=faces[i];f3(face[2]+offset,face[1]+offset,face[0]+offset)}layer=steps+bevelSegments*2,offset=vlen*layer;for(let i=0;i<flen;i++){let face=faces[i];f3(face[0]+offset,face[1]+offset,face[2]+offset)}}else{for(let i=0;i<flen;i++){let face=faces[i];f3(face[2],face[1],face[0])}for(let i=0;i<flen;i++){let face=faces[i];f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps)}}scope.addGroup(start,verticesArray.length/3-start,0)}function buildSideFaces(){let start=verticesArray.length/3,layeroffset=0;sidewalls(contour,layeroffset),layeroffset+=contour.length;for(let h=0,hl=holes.length;h<hl;h++){let ahole=holes[h];sidewalls(ahole,layeroffset),layeroffset+=ahole.length}scope.addGroup(start,verticesArray.length/3-start,1)}function sidewalls(contour2,layeroffset){let i=contour2.length;for(;--i>=0;){let j=i,k=i-1;k<0&&(k=contour2.length-1);for(let s=0,sl=steps+bevelSegments*2;s<sl;s++){let slen1=vlen*s,slen2=vlen*(s+1),a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d)}}}function v(x,y,z){placeholder.push(x),placeholder.push(y),placeholder.push(z)}function f3(a,b,c){addVertex(a),addVertex(b),addVertex(c);let nextIndex=verticesArray.length/3,uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]),addUV(uvs[1]),addUV(uvs[2])}function f4(a,b,c,d){addVertex(a),addVertex(b),addVertex(d),addVertex(b),addVertex(c),addVertex(d);let nextIndex=verticesArray.length/3,uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]),addUV(uvs[1]),addUV(uvs[3]),addUV(uvs[1]),addUV(uvs[2]),addUV(uvs[3])}function addVertex(index){verticesArray.push(placeholder[index*3+0]),verticesArray.push(placeholder[index*3+1]),verticesArray.push(placeholder[index*3+2])}function addUV(vector2){uvArray.push(vector2.x),uvArray.push(vector2.y)}}}toJSON(){let data=super.toJSON(),shapes=this.parameters.shapes,options=this.parameters.options;return toJSON$1(shapes,options,data)}static fromJSON(data,shapes){let geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){let shape=shapes[data.shapes[j]];geometryShapes.push(shape)}let extrudePath=data.options.extrudePath;return extrudePath!==void 0&&(data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath)),new ExtrudeGeometry(geometryShapes,data.options)}},WorldUVGenerator={generateTopUV:function(geometry,vertices,indexA,indexB,indexC){let a_x=vertices[indexA*3],a_y=vertices[indexA*3+1],b_x=vertices[indexB*3],b_y=vertices[indexB*3+1],c_x=vertices[indexC*3],c_y=vertices[indexC*3+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)]},generateSideWallUV:function(geometry,vertices,indexA,indexB,indexC,indexD){let a_x=vertices[indexA*3],a_y=vertices[indexA*3+1],a_z=vertices[indexA*3+2],b_x=vertices[indexB*3],b_y=vertices[indexB*3+1],b_z=vertices[indexB*3+2],c_x=vertices[indexC*3],c_y=vertices[indexC*3+1],c_z=vertices[indexC*3+2],d_x=vertices[indexD*3],d_y=vertices[indexD*3+1],d_z=vertices[indexD*3+2];return Math.abs(a_y-b_y)<Math.abs(a_x-b_x)?[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)]:[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)]}};function toJSON$1(shapes,options,data){if(data.shapes=[],Array.isArray(shapes))for(let i=0,l=shapes.length;i<l;i++){let shape=shapes[i];data.shapes.push(shape.uuid)}else data.shapes.push(shapes.uuid);return data.options=Object.assign({},options),options.extrudePath!==void 0&&(data.options.extrudePath=options.extrudePath.toJSON()),data}var IcosahedronGeometry=class extends PolyhedronGeometry{constructor(radius=1,detail=0){let t=(1+Math.sqrt(5))/2,vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1],indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(vertices,indices,radius,detail),this.type="IcosahedronGeometry",this.parameters={radius,detail}}static fromJSON(data){return new IcosahedronGeometry(data.radius,data.detail)}},OctahedronGeometry=class extends PolyhedronGeometry{constructor(radius=1,detail=0){let vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(vertices,indices,radius,detail),this.type="OctahedronGeometry",this.parameters={radius,detail}}static fromJSON(data){return new OctahedronGeometry(data.radius,data.detail)}},RingGeometry=class extends BufferGeometry{constructor(innerRadius=.5,outerRadius=1,thetaSegments=8,phiSegments=1,thetaStart=0,thetaLength=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength},thetaSegments=Math.max(3,thetaSegments),phiSegments=Math.max(1,phiSegments);let indices=[],vertices=[],normals=[],uvs=[],radius=innerRadius,radiusStep=(outerRadius-innerRadius)/phiSegments,vertex2=new Vector3,uv=new Vector2;for(let j=0;j<=phiSegments;j++){for(let i=0;i<=thetaSegments;i++){let segment=thetaStart+i/thetaSegments*thetaLength;vertex2.x=radius*Math.cos(segment),vertex2.y=radius*Math.sin(segment),vertices.push(vertex2.x,vertex2.y,vertex2.z),normals.push(0,0,1),uv.x=(vertex2.x/outerRadius+1)/2,uv.y=(vertex2.y/outerRadius+1)/2,uvs.push(uv.x,uv.y)}radius+=radiusStep}for(let j=0;j<phiSegments;j++){let thetaSegmentLevel=j*(thetaSegments+1);for(let i=0;i<thetaSegments;i++){let segment=i+thetaSegmentLevel,a=segment,b=segment+thetaSegments+1,c=segment+thetaSegments+2,d=segment+1;indices.push(a,b,d),indices.push(b,c,d)}}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2))}static fromJSON(data){return new RingGeometry(data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength)}},ShapeGeometry=class extends BufferGeometry{constructor(shapes=new Shape([new Vector2(0,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),curveSegments=12){super(),this.type="ShapeGeometry",this.parameters={shapes,curveSegments};let indices=[],vertices=[],normals=[],uvs=[],groupStart=0,groupCount=0;if(Array.isArray(shapes)===!1)addShape(shapes);else for(let i=0;i<shapes.length;i++)addShape(shapes[i]),this.addGroup(groupStart,groupCount,i),groupStart+=groupCount,groupCount=0;this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2));function addShape(shape){let indexOffset=vertices.length/3,points=shape.extractPoints(curveSegments),shapeVertices=points.shape,shapeHoles=points.holes;ShapeUtils.isClockWise(shapeVertices)===!1&&(shapeVertices=shapeVertices.reverse());for(let i=0,l=shapeHoles.length;i<l;i++){let shapeHole=shapeHoles[i];ShapeUtils.isClockWise(shapeHole)===!0&&(shapeHoles[i]=shapeHole.reverse())}let faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);for(let i=0,l=shapeHoles.length;i<l;i++){let shapeHole=shapeHoles[i];shapeVertices=shapeVertices.concat(shapeHole)}for(let i=0,l=shapeVertices.length;i<l;i++){let vertex2=shapeVertices[i];vertices.push(vertex2.x,vertex2.y,0),normals.push(0,0,1),uvs.push(vertex2.x,vertex2.y)}for(let i=0,l=faces.length;i<l;i++){let face=faces[i],a=face[0]+indexOffset,b=face[1]+indexOffset,c=face[2]+indexOffset;indices.push(a,b,c),groupCount+=3}}}toJSON(){let data=super.toJSON(),shapes=this.parameters.shapes;return toJSON(shapes,data)}static fromJSON(data,shapes){let geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){let shape=shapes[data.shapes[j]];geometryShapes.push(shape)}return new ShapeGeometry(geometryShapes,data.curveSegments)}};function toJSON(shapes,data){if(data.shapes=[],Array.isArray(shapes))for(let i=0,l=shapes.length;i<l;i++){let shape=shapes[i];data.shapes.push(shape.uuid)}else data.shapes.push(shapes.uuid);return data}var SphereGeometry=class extends BufferGeometry{constructor(radius=1,widthSegments=32,heightSegments=16,phiStart=0,phiLength=Math.PI*2,thetaStart=0,thetaLength=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength},widthSegments=Math.max(3,Math.floor(widthSegments)),heightSegments=Math.max(2,Math.floor(heightSegments));let thetaEnd=Math.min(thetaStart+thetaLength,Math.PI),index=0,grid2=[],vertex2=new Vector3,normal=new Vector3,indices=[],vertices=[],normals=[],uvs=[];for(let iy=0;iy<=heightSegments;iy++){let verticesRow=[],v=iy/heightSegments,uOffset=0;iy==0&&thetaStart==0?uOffset=.5/widthSegments:iy==heightSegments&&thetaEnd==Math.PI&&(uOffset=-.5/widthSegments);for(let ix=0;ix<=widthSegments;ix++){let u=ix/widthSegments;vertex2.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength),vertex2.y=radius*Math.cos(thetaStart+v*thetaLength),vertex2.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength),vertices.push(vertex2.x,vertex2.y,vertex2.z),normal.copy(vertex2).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(u+uOffset,1-v),verticesRow.push(index++)}grid2.push(verticesRow)}for(let iy=0;iy<heightSegments;iy++)for(let ix=0;ix<widthSegments;ix++){let a=grid2[iy][ix+1],b=grid2[iy][ix],c=grid2[iy+1][ix],d=grid2[iy+1][ix+1];(iy!==0||thetaStart>0)&&indices.push(a,b,d),(iy!==heightSegments-1||thetaEnd<Math.PI)&&indices.push(b,c,d)}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2))}static fromJSON(data){return new SphereGeometry(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength)}},TetrahedronGeometry=class extends PolyhedronGeometry{constructor(radius=1,detail=0){let vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],indices=[2,1,0,0,3,2,1,3,0,2,3,1];super(vertices,indices,radius,detail),this.type="TetrahedronGeometry",this.parameters={radius,detail}}static fromJSON(data){return new TetrahedronGeometry(data.radius,data.detail)}},TorusGeometry=class extends BufferGeometry{constructor(radius=1,tube=.4,radialSegments=8,tubularSegments=6,arc2=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius,tube,radialSegments,tubularSegments,arc:arc2},radialSegments=Math.floor(radialSegments),tubularSegments=Math.floor(tubularSegments);let indices=[],vertices=[],normals=[],uvs=[],center=new Vector3,vertex2=new Vector3,normal=new Vector3;for(let j=0;j<=radialSegments;j++)for(let i=0;i<=tubularSegments;i++){let u=i/tubularSegments*arc2,v=j/radialSegments*Math.PI*2;vertex2.x=(radius+tube*Math.cos(v))*Math.cos(u),vertex2.y=(radius+tube*Math.cos(v))*Math.sin(u),vertex2.z=tube*Math.sin(v),vertices.push(vertex2.x,vertex2.y,vertex2.z),center.x=radius*Math.cos(u),center.y=radius*Math.sin(u),normal.subVectors(vertex2,center).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(i/tubularSegments),uvs.push(j/radialSegments)}for(let j=1;j<=radialSegments;j++)for(let i=1;i<=tubularSegments;i++){let a=(tubularSegments+1)*j+i-1,b=(tubularSegments+1)*(j-1)+i-1,c=(tubularSegments+1)*(j-1)+i,d=(tubularSegments+1)*j+i;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2))}static fromJSON(data){return new TorusGeometry(data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc)}},TorusKnotGeometry=class extends BufferGeometry{constructor(radius=1,tube=.4,tubularSegments=64,radialSegments=8,p=2,q=3){super(),this.type="TorusKnotGeometry",this.parameters={radius,tube,tubularSegments,radialSegments,p,q},tubularSegments=Math.floor(tubularSegments),radialSegments=Math.floor(radialSegments);let indices=[],vertices=[],normals=[],uvs=[],vertex2=new Vector3,normal=new Vector3,P1=new Vector3,P2=new Vector3,B=new Vector3,T=new Vector3,N=new Vector3;for(let i=0;i<=tubularSegments;++i){let u=i/tubularSegments*p*Math.PI*2;calculatePositionOnCurve(u,p,q,radius,P1),calculatePositionOnCurve(u+.01,p,q,radius,P2),T.subVectors(P2,P1),N.addVectors(P2,P1),B.crossVectors(T,N),N.crossVectors(B,T),B.normalize(),N.normalize();for(let j=0;j<=radialSegments;++j){let v=j/radialSegments*Math.PI*2,cx=-tube*Math.cos(v),cy=tube*Math.sin(v);vertex2.x=P1.x+(cx*N.x+cy*B.x),vertex2.y=P1.y+(cx*N.y+cy*B.y),vertex2.z=P1.z+(cx*N.z+cy*B.z),vertices.push(vertex2.x,vertex2.y,vertex2.z),normal.subVectors(vertex2,P1).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(i/tubularSegments),uvs.push(j/radialSegments)}}for(let j=1;j<=tubularSegments;j++)for(let i=1;i<=radialSegments;i++){let a=(radialSegments+1)*(j-1)+(i-1),b=(radialSegments+1)*j+(i-1),c=(radialSegments+1)*j+i,d=(radialSegments+1)*(j-1)+i;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2));function calculatePositionOnCurve(u,p2,q2,radius2,position){let cu=Math.cos(u),su=Math.sin(u),quOverP=q2/p2*u,cs=Math.cos(quOverP);position.x=radius2*(2+cs)*.5*cu,position.y=radius2*(2+cs)*su*.5,position.z=radius2*Math.sin(quOverP)*.5}}static fromJSON(data){return new TorusKnotGeometry(data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q)}},TubeGeometry=class extends BufferGeometry{constructor(path=new QuadraticBezierCurve3(new Vector3(-1,-1,0),new Vector3(-1,1,0),new Vector3(1,1,0)),tubularSegments=64,radius=1,radialSegments=8,closed=!1){super(),this.type="TubeGeometry",this.parameters={path,tubularSegments,radius,radialSegments,closed};let frames=path.computeFrenetFrames(tubularSegments,closed);this.tangents=frames.tangents,this.normals=frames.normals,this.binormals=frames.binormals;let vertex2=new Vector3,normal=new Vector3,uv=new Vector2,P=new Vector3,vertices=[],normals=[],uvs=[],indices=[];generateBufferData(),this.setIndex(indices),this.setAttribute("position",new Float32BufferAttribute(vertices,3)),this.setAttribute("normal",new Float32BufferAttribute(normals,3)),this.setAttribute("uv",new Float32BufferAttribute(uvs,2));function generateBufferData(){for(let i=0;i<tubularSegments;i++)generateSegment(i);generateSegment(closed===!1?tubularSegments:0),generateUVs(),generateIndices()}function generateSegment(i){P=path.getPointAt(i/tubularSegments,P);let N=frames.normals[i],B=frames.binormals[i];for(let j=0;j<=radialSegments;j++){let v=j/radialSegments*Math.PI*2,sin=Math.sin(v),cos=-Math.cos(v);normal.x=cos*N.x+sin*B.x,normal.y=cos*N.y+sin*B.y,normal.z=cos*N.z+sin*B.z,normal.normalize(),normals.push(normal.x,normal.y,normal.z),vertex2.x=P.x+radius*normal.x,vertex2.y=P.y+radius*normal.y,vertex2.z=P.z+radius*normal.z,vertices.push(vertex2.x,vertex2.y,vertex2.z)}}function generateIndices(){for(let j=1;j<=tubularSegments;j++)for(let i=1;i<=radialSegments;i++){let a=(radialSegments+1)*(j-1)+(i-1),b=(radialSegments+1)*j+(i-1),c=(radialSegments+1)*j+i,d=(radialSegments+1)*(j-1)+i;indices.push(a,b,d),indices.push(b,c,d)}}function generateUVs(){for(let i=0;i<=tubularSegments;i++)for(let j=0;j<=radialSegments;j++)uv.x=i/tubularSegments,uv.y=j/radialSegments,uvs.push(uv.x,uv.y)}}toJSON(){let data=super.toJSON();return data.path=this.parameters.path.toJSON(),data}static fromJSON(data){return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path),data.tubularSegments,data.radius,data.radialSegments,data.closed)}},WireframeGeometry=class extends BufferGeometry{constructor(geometry=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry},geometry!==null){let vertices=[],edges=new Set,start=new Vector3,end=new Vector3;if(geometry.index!==null){let position=geometry.attributes.position,indices=geometry.index,groups=geometry.groups;groups.length===0&&(groups=[{start:0,count:indices.count,materialIndex:0}]);for(let o=0,ol=groups.length;o<ol;++o){let group=groups[o],groupStart=group.start,groupCount=group.count;for(let i=groupStart,l=groupStart+groupCount;i<l;i+=3)for(let j=0;j<3;j++){let index1=indices.getX(i+j),index2=indices.getX(i+(j+1)%3);start.fromBufferAttribute(position,index1),end.fromBufferAttribute(position,index2),isUniqueEdge(start,end,edges)===!0&&(vertices.push(start.x,start.y,start.z),vertices.push(end.x,end.y,end.z))}}}else{let position=geometry.attributes.position;for(let i=0,l=position.count/3;i<l;i++)for(let j=0;j<3;j++){let index1=3*i+j,index2=3*i+(j+1)%3;start.fromBufferAttribute(position,index1),end.fromBufferAttribute(position,index2),isUniqueEdge(start,end,edges)===!0&&(vertices.push(start.x,start.y,start.z),vertices.push(end.x,end.y,end.z))}}this.setAttribute("position",new Float32BufferAttribute(vertices,3))}}};function isUniqueEdge(start,end,edges){let hash1=`${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`,hash2=`${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;return edges.has(hash1)===!0||edges.has(hash2)===!0?!1:(edges.add(hash1),edges.add(hash2),!0)}var Geometries=Object.freeze({__proto__:null,BoxGeometry,CapsuleGeometry,CircleGeometry,ConeGeometry,CylinderGeometry,DodecahedronGeometry,EdgesGeometry,ExtrudeGeometry,IcosahedronGeometry,LatheGeometry,OctahedronGeometry,PlaneGeometry,PolyhedronGeometry,RingGeometry,ShapeGeometry,SphereGeometry,TetrahedronGeometry,TorusGeometry,TorusKnotGeometry,TubeGeometry,WireframeGeometry}),ShadowMaterial=class extends Material{constructor(parameters){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Color(0),this.transparent=!0,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.fog=source.fog,this}},RawShaderMaterial=class extends ShaderMaterial{constructor(parameters){super(parameters),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}},MeshStandardMaterial=class extends Material{constructor(parameters){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Color(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.defines={STANDARD:""},this.color.copy(source.color),this.roughness=source.roughness,this.metalness=source.metalness,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.roughnessMap=source.roughnessMap,this.metalnessMap=source.metalnessMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapIntensity=source.envMapIntensity,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}},MeshPhysicalMaterial=class extends MeshStandardMaterial{constructor(parameters){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Vector2(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return clamp(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(reflectivity){this.ior=(1+.4*reflectivity)/(1-.4*reflectivity)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Color(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Color(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Color(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(parameters)}get sheen(){return this._sheen}set sheen(value){this._sheen>0!=value>0&&this.version++,this._sheen=value}get clearcoat(){return this._clearcoat}set clearcoat(value){this._clearcoat>0!=value>0&&this.version++,this._clearcoat=value}get iridescence(){return this._iridescence}set iridescence(value){this._iridescence>0!=value>0&&this.version++,this._iridescence=value}get transmission(){return this._transmission}set transmission(value){this._transmission>0!=value>0&&this.version++,this._transmission=value}copy(source){return super.copy(source),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=source.clearcoat,this.clearcoatMap=source.clearcoatMap,this.clearcoatRoughness=source.clearcoatRoughness,this.clearcoatRoughnessMap=source.clearcoatRoughnessMap,this.clearcoatNormalMap=source.clearcoatNormalMap,this.clearcoatNormalScale.copy(source.clearcoatNormalScale),this.ior=source.ior,this.iridescence=source.iridescence,this.iridescenceMap=source.iridescenceMap,this.iridescenceIOR=source.iridescenceIOR,this.iridescenceThicknessRange=[...source.iridescenceThicknessRange],this.iridescenceThicknessMap=source.iridescenceThicknessMap,this.sheen=source.sheen,this.sheenColor.copy(source.sheenColor),this.sheenColorMap=source.sheenColorMap,this.sheenRoughness=source.sheenRoughness,this.sheenRoughnessMap=source.sheenRoughnessMap,this.transmission=source.transmission,this.transmissionMap=source.transmissionMap,this.thickness=source.thickness,this.thicknessMap=source.thicknessMap,this.attenuationDistance=source.attenuationDistance,this.attenuationColor.copy(source.attenuationColor),this.specularIntensity=source.specularIntensity,this.specularIntensityMap=source.specularIntensityMap,this.specularColor.copy(source.specularColor),this.specularColorMap=source.specularColorMap,this}},MeshPhongMaterial=class extends Material{constructor(parameters){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Color(16777215),this.specular=new Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.specular.copy(source.specular),this.shininess=source.shininess,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}},MeshToonMaterial=class extends Material{constructor(parameters){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Color(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.gradientMap=source.gradientMap,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}},MeshNormalMaterial=class extends Material{constructor(parameters){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(parameters)}copy(source){return super.copy(source),this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.flatShading=source.flatShading,this}},MeshLambertMaterial=class extends Material{constructor(parameters){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}},MeshMatcapMaterial=class extends Material{constructor(parameters){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Color(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(parameters)}copy(source){return super.copy(source),this.defines={MATCAP:""},this.color.copy(source.color),this.matcap=source.matcap,this.map=source.map,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.flatShading=source.flatShading,this.fog=source.fog,this}},LineDashedMaterial=class extends LineBasicMaterial{constructor(parameters){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(parameters)}copy(source){return super.copy(source),this.scale=source.scale,this.dashSize=source.dashSize,this.gapSize=source.gapSize,this}};function arraySlice(array,from,to){return isTypedArray(array)?new array.constructor(array.subarray(from,to!==void 0?to:array.length)):array.slice(from,to)}function convertArray(array,type,forceClone){return!array||!forceClone&&array.constructor===type?array:typeof type.BYTES_PER_ELEMENT=="number"?new type(array):Array.prototype.slice.call(array)}function isTypedArray(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView)}function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j]}let n=times.length,result=new Array(n);for(let i=0;i!==n;++i)result[i]=i;return result.sort(compareTime),result}function sortedArray(values,stride,order){let nValues=values.length,result=new values.constructor(nValues);for(let i=0,dstOffset=0;dstOffset!==nValues;++i){let srcOffset=order[i]*stride;for(let j=0;j!==stride;++j)result[dstOffset++]=values[srcOffset+j]}return result}function flattenJSON(jsonKeys,times,values,valuePropertyName){let i=1,key=jsonKeys[0];for(;key!==void 0&&key[valuePropertyName]===void 0;)key=jsonKeys[i++];if(key===void 0)return;let value=key[valuePropertyName];if(value!==void 0)if(Array.isArray(value))do value=key[valuePropertyName],value!==void 0&&(times.push(key.time),values.push.apply(values,value)),key=jsonKeys[i++];while(key!==void 0);else if(value.toArray!==void 0)do value=key[valuePropertyName],value!==void 0&&(times.push(key.time),value.toArray(values,values.length)),key=jsonKeys[i++];while(key!==void 0);else do value=key[valuePropertyName],value!==void 0&&(times.push(key.time),values.push(value)),key=jsonKeys[i++];while(key!==void 0)}function subclip(sourceClip,name,startFrame,endFrame,fps=30){let clip=sourceClip.clone();clip.name=name;let tracks=[];for(let i=0;i<clip.tracks.length;++i){let track=clip.tracks[i],valueSize=track.getValueSize(),times=[],values=[];for(let j=0;j<track.times.length;++j){let frame=track.times[j]*fps;if(!(frame<startFrame||frame>=endFrame)){times.push(track.times[j]);for(let k=0;k<valueSize;++k)values.push(track.values[j*valueSize+k])}}times.length!==0&&(track.times=convertArray(times,track.times.constructor),track.values=convertArray(values,track.values.constructor),tracks.push(track))}clip.tracks=tracks;let minStartTime=1/0;for(let i=0;i<clip.tracks.length;++i)minStartTime>clip.tracks[i].times[0]&&(minStartTime=clip.tracks[i].times[0]);for(let i=0;i<clip.tracks.length;++i)clip.tracks[i].shift(-1*minStartTime);return clip.resetDuration(),clip}function makeClipAdditive(targetClip,referenceFrame=0,referenceClip=targetClip,fps=30){fps<=0&&(fps=30);let numTracks=referenceClip.tracks.length,referenceTime=referenceFrame/fps;for(let i=0;i<numTracks;++i){let referenceTrack=referenceClip.tracks[i],referenceTrackType=referenceTrack.ValueTypeName;if(referenceTrackType==="bool"||referenceTrackType==="string")continue;let targetTrack=targetClip.tracks.find(function(track){return track.name===referenceTrack.name&&track.ValueTypeName===referenceTrackType});if(targetTrack===void 0)continue;let referenceOffset=0,referenceValueSize=referenceTrack.getValueSize();referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(referenceOffset=referenceValueSize/3);let targetOffset=0,targetValueSize=targetTrack.getValueSize();targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(targetOffset=targetValueSize/3);let lastIndex=referenceTrack.times.length-1,referenceValue;if(referenceTime<=referenceTrack.times[0]){let startIndex=referenceOffset,endIndex=referenceValueSize-referenceOffset;referenceValue=arraySlice(referenceTrack.values,startIndex,endIndex)}else if(referenceTime>=referenceTrack.times[lastIndex]){let startIndex=lastIndex*referenceValueSize+referenceOffset,endIndex=startIndex+referenceValueSize-referenceOffset;referenceValue=arraySlice(referenceTrack.values,startIndex,endIndex)}else{let interpolant=referenceTrack.createInterpolant(),startIndex=referenceOffset,endIndex=referenceValueSize-referenceOffset;interpolant.evaluate(referenceTime),referenceValue=arraySlice(interpolant.resultBuffer,startIndex,endIndex)}referenceTrackType==="quaternion"&&new Quaternion().fromArray(referenceValue).normalize().conjugate().toArray(referenceValue);let numTimes=targetTrack.times.length;for(let j=0;j<numTimes;++j){let valueStart=j*targetValueSize+targetOffset;if(referenceTrackType==="quaternion")Quaternion.multiplyQuaternionsFlat(targetTrack.values,valueStart,referenceValue,0,targetTrack.values,valueStart);else{let valueEnd=targetValueSize-targetOffset*2;for(let k=0;k<valueEnd;++k)targetTrack.values[valueStart+k]-=referenceValue[k]}}}return targetClip.blendMode=AdditiveAnimationBlendMode,targetClip}var AnimationUtils=Object.freeze({__proto__:null,arraySlice,convertArray,isTypedArray,getKeyframeOrder,sortedArray,flattenJSON,subclip,makeClipAdditive}),Interpolant=class{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions,this._cachedIndex=0,this.resultBuffer=resultBuffer!==void 0?resultBuffer:new sampleValues.constructor(sampleSize),this.sampleValues=sampleValues,this.valueSize=sampleSize,this.settings=null,this.DefaultSettings_={}}evaluate(t){let pp=this.parameterPositions,i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{let right;linear_scan:{forward_scan:if(!(t<t1)){for(let giveUpAt=i1+2;;){if(t1===void 0){if(t<t0)break forward_scan;return i1=pp.length,this._cachedIndex=i1,this.copySampleValue_(i1-1)}if(i1===giveUpAt)break;if(t0=t1,t1=pp[++i1],t<t1)break seek}right=pp.length;break linear_scan}if(!(t>=t0)){let t1global=pp[1];t<t1global&&(i1=2,t0=t1global);for(let giveUpAt=i1-2;;){if(t0===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i1===giveUpAt)break;if(t1=t0,t0=pp[--i1-1],t>=t0)break seek}right=i1,i1=0;break linear_scan}break validate_interval}for(;i1<right;){let mid=i1+right>>>1;t<pp[mid]?right=mid:i1=mid+1}if(t1=pp[i1],t0=pp[i1-1],t0===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(t1===void 0)return i1=pp.length,this._cachedIndex=i1,this.copySampleValue_(i1-1)}this._cachedIndex=i1,this.intervalChanged_(i1,t0,t1)}return this.interpolate_(i1,t0,t,t1)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(index){let result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(let i=0;i!==stride;++i)result[i]=values[offset+i];return result}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}},CubicInterpolant=class extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding}}intervalChanged_(i1,t0,t1){let pp=this.parameterPositions,iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===void 0)switch(this.getSettings_().endingStart){case ZeroSlopeEnding:iPrev=i1,tPrev=2*t0-t1;break;case WrapAroundEnding:iPrev=pp.length-2,tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:iPrev=i1,tPrev=t1}if(tNext===void 0)switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:iNext=i1,tNext=2*t1-t0;break;case WrapAroundEnding:iNext=1,tNext=t1+pp[1]-pp[0];break;default:iNext=i1-1,tNext=t0}let halfDt=(t1-t0)*.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev),this._weightNext=halfDt/(tNext-t1),this._offsetPrev=iPrev*stride,this._offsetNext=iNext*stride}interpolate_(i1,t0,t,t1){let result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p,sP=-wP*ppp+2*wP*pp-wP*p,s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-.5+wP)*p+1,s1=(-1-wN)*ppp+(1.5+wN)*pp+.5*p,sN=wN*ppp-wN*pp;for(let i=0;i!==stride;++i)result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];return result}},LinearInterpolant=class extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer)}interpolate_(i1,t0,t,t1){let result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(let i=0;i!==stride;++i)result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;return result}},DiscreteInterpolant=class extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer)}interpolate_(i1){return this.copySampleValue_(i1-1)}},KeyframeTrack=class{constructor(name,times,values,interpolation){if(name===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(times===void 0||times.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+name);this.name=name,this.times=convertArray(times,this.TimeBufferType),this.values=convertArray(values,this.ValueBufferType),this.setInterpolation(interpolation||this.DefaultInterpolation)}static toJSON(track){let trackType=track.constructor,json;if(trackType.toJSON!==this.toJSON)json=trackType.toJSON(track);else{json={name:track.name,times:convertArray(track.times,Array),values:convertArray(track.values,Array)};let interpolation=track.getInterpolation();interpolation!==track.DefaultInterpolation&&(json.interpolation=interpolation)}return json.type=track.ValueTypeName,json}InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result)}InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result)}InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result)}setInterpolation(interpolation){let factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break}if(factoryMethod===void 0){let message="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(interpolation!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(message);return console.warn("THREE.KeyframeTrack:",message),this}return this.createInterpolant=factoryMethod,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}}getValueSize(){return this.values.length/this.times.length}shift(timeOffset){if(timeOffset!==0){let times=this.times;for(let i=0,n=times.length;i!==n;++i)times[i]+=timeOffset}return this}scale(timeScale){if(timeScale!==1){let times=this.times;for(let i=0,n=times.length;i!==n;++i)times[i]*=timeScale}return this}trim(startTime,endTime){let times=this.times,nKeys=times.length,from=0,to=nKeys-1;for(;from!==nKeys&&times[from]<startTime;)++from;for(;to!==-1&&times[to]>endTime;)--to;if(++to,from!==0||to!==nKeys){from>=to&&(to=Math.max(to,1),from=to-1);let stride=this.getValueSize();this.times=arraySlice(times,from,to),this.values=arraySlice(this.values,from*stride,to*stride)}return this}validate(){let valid=!0,valueSize=this.getValueSize();valueSize-Math.floor(valueSize)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),valid=!1);let times=this.times,values=this.values,nKeys=times.length;nKeys===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),valid=!1);let prevTime=null;for(let i=0;i!==nKeys;i++){let currTime=times[i];if(typeof currTime=="number"&&isNaN(currTime)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,i,currTime),valid=!1;break}if(prevTime!==null&&prevTime>currTime){console.error("THREE.KeyframeTrack: Out of order keys.",this,i,currTime,prevTime),valid=!1;break}prevTime=currTime}if(values!==void 0&&isTypedArray(values))for(let i=0,n=values.length;i!==n;++i){let value=values[i];if(isNaN(value)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,i,value),valid=!1;break}}return valid}optimize(){let times=arraySlice(this.times),values=arraySlice(this.values),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,lastIndex=times.length-1,writeIndex=1;for(let i=1;i<lastIndex;++i){let keep=!1,time=times[i],timeNext=times[i+1];if(time!==timeNext&&(i!==1||time!==times[0]))if(smoothInterpolation)keep=!0;else{let offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(let j=0;j!==stride;++j){let value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=!0;break}}}if(keep){if(i!==writeIndex){times[writeIndex]=times[i];let readOffset=i*stride,writeOffset=writeIndex*stride;for(let j=0;j!==stride;++j)values[writeOffset+j]=values[readOffset+j]}++writeIndex}}if(lastIndex>0){times[writeIndex]=times[lastIndex];for(let readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j)values[writeOffset+j]=values[readOffset+j];++writeIndex}return writeIndex!==times.length?(this.times=arraySlice(times,0,writeIndex),this.values=arraySlice(values,0,writeIndex*stride)):(this.times=times,this.values=values),this}clone(){let times=arraySlice(this.times,0),values=arraySlice(this.values,0),TypedKeyframeTrack=this.constructor,track=new TypedKeyframeTrack(this.name,times,values);return track.createInterpolant=this.createInterpolant,track}};KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;var BooleanKeyframeTrack=class extends KeyframeTrack{};BooleanKeyframeTrack.prototype.ValueTypeName="bool";BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=void 0;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=void 0;var ColorKeyframeTrack=class extends KeyframeTrack{};ColorKeyframeTrack.prototype.ValueTypeName="color";var NumberKeyframeTrack=class extends KeyframeTrack{};NumberKeyframeTrack.prototype.ValueTypeName="number";var QuaternionLinearInterpolant=class extends Interpolant{constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer)}interpolate_(i1,t0,t,t1){let result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,alpha=(t-t0)/(t1-t0),offset=i1*stride;for(let end=offset+stride;offset!==end;offset+=4)Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);return result}},QuaternionKeyframeTrack=class extends KeyframeTrack{InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result)}};QuaternionKeyframeTrack.prototype.ValueTypeName="quaternion";QuaternionKeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=void 0;var StringKeyframeTrack=class extends KeyframeTrack{};StringKeyframeTrack.prototype.ValueTypeName="string";StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=void 0;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=void 0;var VectorKeyframeTrack=class extends KeyframeTrack{};VectorKeyframeTrack.prototype.ValueTypeName="vector";var AnimationClip=class{constructor(name,duration=-1,tracks,blendMode=NormalAnimationBlendMode){this.name=name,this.tracks=tracks,this.duration=duration,this.blendMode=blendMode,this.uuid=generateUUID(),this.duration<0&&this.resetDuration()}static parse(json){let tracks=[],jsonTracks=json.tracks,frameTime=1/(json.fps||1);for(let i=0,n=jsonTracks.length;i!==n;++i)tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));let clip=new this(json.name,json.duration,tracks,json.blendMode);return clip.uuid=json.uuid,clip}static toJSON(clip){let tracks=[],clipTracks=clip.tracks,json={name:clip.name,duration:clip.duration,tracks,uuid:clip.uuid,blendMode:clip.blendMode};for(let i=0,n=clipTracks.length;i!==n;++i)tracks.push(KeyframeTrack.toJSON(clipTracks[i]));return json}static CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){let numMorphTargets=morphTargetSequence.length,tracks=[];for(let i=0;i<numMorphTargets;i++){let times=[],values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets),values.push(0,1,0);let order=getKeyframeOrder(times);times=sortedArray(times,1,order),values=sortedArray(values,1,order),!noLoop&&times[0]===0&&(times.push(numMorphTargets),values.push(values[0])),tracks.push(new NumberKeyframeTrack(".morphTargetInfluences["+morphTargetSequence[i].name+"]",times,values).scale(1/fps))}return new this(name,-1,tracks)}static findByName(objectOrClipArray,name){let clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){let o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations}for(let i=0;i<clipArray.length;i++)if(clipArray[i].name===name)return clipArray[i];return null}static CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){let animationToMorphTargets={},pattern=/^([\w-]*?)([\d]+)$/;for(let i=0,il=morphTargets.length;i<il;i++){let morphTarget=morphTargets[i],parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){let name=parts[1],animationMorphTargets=animationToMorphTargets[name];animationMorphTargets||(animationToMorphTargets[name]=animationMorphTargets=[]),animationMorphTargets.push(morphTarget)}}let clips=[];for(let name in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));return clips}static parseAnimation(animation,bones){if(!animation)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;let addNonemptyTrack=function(trackType,trackName,animationKeys,propertyName,destTracks){if(animationKeys.length!==0){let times=[],values=[];flattenJSON(animationKeys,times,values,propertyName),times.length!==0&&destTracks.push(new trackType(trackName,times,values))}},tracks=[],clipName=animation.name||"default",fps=animation.fps||30,blendMode=animation.blendMode,duration=animation.length||-1,hierarchyTracks=animation.hierarchy||[];for(let h=0;h<hierarchyTracks.length;h++){let animationKeys=hierarchyTracks[h].keys;if(!(!animationKeys||animationKeys.length===0))if(animationKeys[0].morphTargets){let morphTargetNames={},k;for(k=0;k<animationKeys.length;k++)if(animationKeys[k].morphTargets)for(let m=0;m<animationKeys[k].morphTargets.length;m++)morphTargetNames[animationKeys[k].morphTargets[m]]=-1;for(let morphTargetName in morphTargetNames){let times=[],values=[];for(let m=0;m!==animationKeys[k].morphTargets.length;++m){let animationKey=animationKeys[k];times.push(animationKey.time),values.push(animationKey.morphTarget===morphTargetName?1:0)}tracks.push(new NumberKeyframeTrack(".morphTargetInfluence["+morphTargetName+"]",times,values))}duration=morphTargetNames.length*fps}else{let boneName=".bones["+bones[h].name+"]";addNonemptyTrack(VectorKeyframeTrack,boneName+".position",animationKeys,"pos",tracks),addNonemptyTrack(QuaternionKeyframeTrack,boneName+".quaternion",animationKeys,"rot",tracks),addNonemptyTrack(VectorKeyframeTrack,boneName+".scale",animationKeys,"scl",tracks)}}return tracks.length===0?null:new this(clipName,duration,tracks,blendMode)}resetDuration(){let tracks=this.tracks,duration=0;for(let i=0,n=tracks.length;i!==n;++i){let track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1])}return this.duration=duration,this}trim(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].trim(0,this.duration);return this}validate(){let valid=!0;for(let i=0;i<this.tracks.length;i++)valid=valid&&this.tracks[i].validate();return valid}optimize(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].optimize();return this}clone(){let tracks=[];for(let i=0;i<this.tracks.length;i++)tracks.push(this.tracks[i].clone());return new this.constructor(this.name,this.duration,tracks,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}};function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+typeName)}function parseKeyframeTrack(json){if(json.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");let trackType=getTrackTypeForValueTypeName(json.type);if(json.times===void 0){let times=[],values=[];flattenJSON(json.keys,times,values,"value"),json.times=times,json.values=values}return trackType.parse!==void 0?trackType.parse(json):new trackType(json.name,json.times,json.values,json.interpolation)}var Cache={enabled:!1,files:{},add:function(key,file){this.enabled!==!1&&(this.files[key]=file)},get:function(key){if(this.enabled!==!1)return this.files[key]},remove:function(key){delete this.files[key]},clear:function(){this.files={}}},LoadingManager=class{constructor(onLoad,onProgress,onError){let scope=this,isLoading=!1,itemsLoaded=0,itemsTotal=0,urlModifier,handlers=[];this.onStart=void 0,this.onLoad=onLoad,this.onProgress=onProgress,this.onError=onError,this.itemStart=function(url){itemsTotal++,isLoading===!1&&scope.onStart!==void 0&&scope.onStart(url,itemsLoaded,itemsTotal),isLoading=!0},this.itemEnd=function(url){itemsLoaded++,scope.onProgress!==void 0&&scope.onProgress(url,itemsLoaded,itemsTotal),itemsLoaded===itemsTotal&&(isLoading=!1,scope.onLoad!==void 0&&scope.onLoad())},this.itemError=function(url){scope.onError!==void 0&&scope.onError(url)},this.resolveURL=function(url){return urlModifier?urlModifier(url):url},this.setURLModifier=function(transform){return urlModifier=transform,this},this.addHandler=function(regex,loader2){return handlers.push(regex,loader2),this},this.removeHandler=function(regex){let index=handlers.indexOf(regex);return index!==-1&&handlers.splice(index,2),this},this.getHandler=function(file){for(let i=0,l=handlers.length;i<l;i+=2){let regex=handlers[i],loader2=handlers[i+1];if(regex.global&&(regex.lastIndex=0),regex.test(file))return loader2}return null}}},DefaultLoadingManager=new LoadingManager,Loader=class{constructor(manager){this.manager=manager!==void 0?manager:DefaultLoadingManager,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(url,onProgress){let scope=this;return new Promise(function(resolve,reject){scope.load(url,resolve,onProgress,reject)})}parse(){}setCrossOrigin(crossOrigin){return this.crossOrigin=crossOrigin,this}setWithCredentials(value){return this.withCredentials=value,this}setPath(path){return this.path=path,this}setResourcePath(resourcePath){return this.resourcePath=resourcePath,this}setRequestHeader(requestHeader){return this.requestHeader=requestHeader,this}},loading={},HttpError=class extends Error{constructor(message,response){super(message),this.response=response}},FileLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){url===void 0&&(url=""),this.path!==void 0&&(url=this.path+url),url=this.manager.resolveURL(url);let cached=Cache.get(url);if(cached!==void 0)return this.manager.itemStart(url),setTimeout(()=>{onLoad&&onLoad(cached),this.manager.itemEnd(url)},0),cached;if(loading[url]!==void 0){loading[url].push({onLoad,onProgress,onError});return}loading[url]=[],loading[url].push({onLoad,onProgress,onError});let req=new Request(url,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),mimeType=this.mimeType,responseType=this.responseType;fetch(req).then(response=>{if(response.status===200||response.status===0){if(response.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream=="undefined"||response.body===void 0||response.body.getReader===void 0)return response;let callbacks=loading[url],reader=response.body.getReader(),contentLength=response.headers.get("Content-Length")||response.headers.get("X-File-Size"),total=contentLength?parseInt(contentLength):0,lengthComputable=total!==0,loaded=0,stream=new ReadableStream({start(controller){readData();function readData(){reader.read().then(({done,value})=>{if(done)controller.close();else{loaded+=value.byteLength;let event=new ProgressEvent("progress",{lengthComputable,loaded,total});for(let i=0,il=callbacks.length;i<il;i++){let callback=callbacks[i];callback.onProgress&&callback.onProgress(event)}controller.enqueue(value),readData()}})}}});return new Response(stream)}else throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`,response)}).then(response=>{switch(responseType){case"arraybuffer":return response.arrayBuffer();case"blob":return response.blob();case"document":return response.text().then(text=>new DOMParser().parseFromString(text,mimeType));case"json":return response.json();default:if(mimeType===void 0)return response.text();{let exec=/charset="?([^;"\s]*)"?/i.exec(mimeType),label=exec&&exec[1]?exec[1].toLowerCase():void 0,decoder=new TextDecoder(label);return response.arrayBuffer().then(ab=>decoder.decode(ab))}}}).then(data=>{Cache.add(url,data);let callbacks=loading[url];delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){let callback=callbacks[i];callback.onLoad&&callback.onLoad(data)}}).catch(err=>{let callbacks=loading[url];if(callbacks===void 0)throw this.manager.itemError(url),err;delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){let callback=callbacks[i];callback.onError&&callback.onError(err)}this.manager.itemError(url)}).finally(()=>{this.manager.itemEnd(url)}),this.manager.itemStart(url)}setResponseType(value){return this.responseType=value,this}setMimeType(value){return this.mimeType=value,this}},AnimationLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,loader2=new FileLoader(this.manager);loader2.setPath(this.path),loader2.setRequestHeader(this.requestHeader),loader2.setWithCredentials(this.withCredentials),loader2.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}parse(json){let animations=[];for(let i=0;i<json.length;i++){let clip=AnimationClip.parse(json[i]);animations.push(clip)}return animations}},CompressedTextureLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,images=[],texture=new CompressedTexture,loader2=new FileLoader(this.manager);loader2.setPath(this.path),loader2.setResponseType("arraybuffer"),loader2.setRequestHeader(this.requestHeader),loader2.setWithCredentials(scope.withCredentials);let loaded=0;function loadTexture2(i){loader2.load(url[i],function(buffer){let texDatas=scope.parse(buffer,!0);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps},loaded+=1,loaded===6&&(texDatas.mipmapCount===1&&(texture.minFilter=LinearFilter),texture.image=images,texture.format=texDatas.format,texture.needsUpdate=!0,onLoad&&onLoad(texture))},onProgress,onError)}if(Array.isArray(url))for(let i=0,il=url.length;i<il;++i)loadTexture2(i);else loader2.load(url,function(buffer){let texDatas=scope.parse(buffer,!0);if(texDatas.isCubemap){let faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(let f=0;f<faces;f++){images[f]={mipmaps:[]};for(let i=0;i<texDatas.mipmapCount;i++)images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]),images[f].format=texDatas.format,images[f].width=texDatas.width,images[f].height=texDatas.height}texture.image=images}else texture.image.width=texDatas.width,texture.image.height=texDatas.height,texture.mipmaps=texDatas.mipmaps;texDatas.mipmapCount===1&&(texture.minFilter=LinearFilter),texture.format=texDatas.format,texture.needsUpdate=!0,onLoad&&onLoad(texture)},onProgress,onError);return texture}},ImageLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){this.path!==void 0&&(url=this.path+url),url=this.manager.resolveURL(url);let scope=this,cached=Cache.get(url);if(cached!==void 0)return scope.manager.itemStart(url),setTimeout(function(){onLoad&&onLoad(cached),scope.manager.itemEnd(url)},0),cached;let image=createElementNS("img");function onImageLoad(){removeEventListeners(),Cache.add(url,this),onLoad&&onLoad(this),scope.manager.itemEnd(url)}function onImageError(event){removeEventListeners(),onError&&onError(event),scope.manager.itemError(url),scope.manager.itemEnd(url)}function removeEventListeners(){image.removeEventListener("load",onImageLoad,!1),image.removeEventListener("error",onImageError,!1)}return image.addEventListener("load",onImageLoad,!1),image.addEventListener("error",onImageError,!1),url.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(image.crossOrigin=this.crossOrigin),scope.manager.itemStart(url),image.src=url,image}},CubeTextureLoader=class extends Loader{constructor(manager){super(manager)}load(urls,onLoad,onProgress,onError){let texture=new CubeTexture,loader2=new ImageLoader(this.manager);loader2.setCrossOrigin(this.crossOrigin),loader2.setPath(this.path);let loaded=0;function loadTexture2(i){loader2.load(urls[i],function(image){texture.images[i]=image,loaded++,loaded===6&&(texture.needsUpdate=!0,onLoad&&onLoad(texture))},void 0,onError)}for(let i=0;i<urls.length;++i)loadTexture2(i);return texture}},DataTextureLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,texture=new DataTexture,loader2=new FileLoader(this.manager);return loader2.setResponseType("arraybuffer"),loader2.setRequestHeader(this.requestHeader),loader2.setPath(this.path),loader2.setWithCredentials(scope.withCredentials),loader2.load(url,function(buffer){let texData=scope.parse(buffer);!texData||(texData.image!==void 0?texture.image=texData.image:texData.data!==void 0&&(texture.image.width=texData.width,texture.image.height=texData.height,texture.image.data=texData.data),texture.wrapS=texData.wrapS!==void 0?texData.wrapS:ClampToEdgeWrapping,texture.wrapT=texData.wrapT!==void 0?texData.wrapT:ClampToEdgeWrapping,texture.magFilter=texData.magFilter!==void 0?texData.magFilter:LinearFilter,texture.minFilter=texData.minFilter!==void 0?texData.minFilter:LinearFilter,texture.anisotropy=texData.anisotropy!==void 0?texData.anisotropy:1,texData.encoding!==void 0&&(texture.encoding=texData.encoding),texData.flipY!==void 0&&(texture.flipY=texData.flipY),texData.format!==void 0&&(texture.format=texData.format),texData.type!==void 0&&(texture.type=texData.type),texData.mipmaps!==void 0&&(texture.mipmaps=texData.mipmaps,texture.minFilter=LinearMipmapLinearFilter),texData.mipmapCount===1&&(texture.minFilter=LinearFilter),texData.generateMipmaps!==void 0&&(texture.generateMipmaps=texData.generateMipmaps),texture.needsUpdate=!0,onLoad&&onLoad(texture,texData))},onProgress,onError),texture}},TextureLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let texture=new Texture,loader2=new ImageLoader(this.manager);return loader2.setCrossOrigin(this.crossOrigin),loader2.setPath(this.path),loader2.load(url,function(image){texture.image=image,texture.needsUpdate=!0,onLoad!==void 0&&onLoad(texture)},onProgress,onError),texture}},Light=class extends Object3D{constructor(color,intensity=1){super(),this.isLight=!0,this.type="Light",this.color=new Color(color),this.intensity=intensity}dispose(){}copy(source,recursive){return super.copy(source,recursive),this.color.copy(source.color),this.intensity=source.intensity,this}toJSON(meta){let data=super.toJSON(meta);return data.object.color=this.color.getHex(),data.object.intensity=this.intensity,this.groundColor!==void 0&&(data.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(data.object.distance=this.distance),this.angle!==void 0&&(data.object.angle=this.angle),this.decay!==void 0&&(data.object.decay=this.decay),this.penumbra!==void 0&&(data.object.penumbra=this.penumbra),this.shadow!==void 0&&(data.object.shadow=this.shadow.toJSON()),data}},HemisphereLight=class extends Light{constructor(skyColor,groundColor,intensity){super(skyColor,intensity),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.groundColor=new Color(groundColor)}copy(source,recursive){return super.copy(source,recursive),this.groundColor.copy(source.groundColor),this}},_projScreenMatrix$1=new Matrix4,_lightPositionWorld$1=new Vector3,_lookTarget$1=new Vector3,LightShadow=class{constructor(camera){this.camera=camera,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Vector2(512,512),this.map=null,this.mapPass=null,this.matrix=new Matrix4,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Frustum,this._frameExtents=new Vector2(1,1),this._viewportCount=1,this._viewports=[new Vector4(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(light){let shadowCamera=this.camera,shadowMatrix=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld),shadowCamera.position.copy(_lightPositionWorld$1),_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld),shadowCamera.lookAt(_lookTarget$1),shadowCamera.updateMatrixWorld(),_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse),this._frustum.setFromProjectionMatrix(_projScreenMatrix$1),shadowMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),shadowMatrix.multiply(_projScreenMatrix$1)}getViewport(viewportIndex){return this._viewports[viewportIndex]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(source){return this.camera=source.camera.clone(),this.bias=source.bias,this.radius=source.radius,this.mapSize.copy(source.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){let object={};return this.bias!==0&&(object.bias=this.bias),this.normalBias!==0&&(object.normalBias=this.normalBias),this.radius!==1&&(object.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(object.mapSize=this.mapSize.toArray()),object.camera=this.camera.toJSON(!1).object,delete object.camera.matrix,object}},SpotLightShadow=class extends LightShadow{constructor(){super(new PerspectiveCamera(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(light){let camera=this.camera,fov2=RAD2DEG*2*light.angle*this.focus,aspect2=this.mapSize.width/this.mapSize.height,far=light.distance||camera.far;(fov2!==camera.fov||aspect2!==camera.aspect||far!==camera.far)&&(camera.fov=fov2,camera.aspect=aspect2,camera.far=far,camera.updateProjectionMatrix()),super.updateMatrices(light)}copy(source){return super.copy(source),this.focus=source.focus,this}},SpotLight=class extends Light{constructor(color,intensity,distance=0,angle2=Math.PI/3,penumbra=0,decay=2){super(color,intensity),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.target=new Object3D,this.distance=distance,this.angle=angle2,this.penumbra=penumbra,this.decay=decay,this.map=null,this.shadow=new SpotLightShadow}get power(){return this.intensity*Math.PI}set power(power){this.intensity=power/Math.PI}dispose(){this.shadow.dispose()}copy(source,recursive){return super.copy(source,recursive),this.distance=source.distance,this.angle=source.angle,this.penumbra=source.penumbra,this.decay=source.decay,this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}},_projScreenMatrix=new Matrix4,_lightPositionWorld=new Vector3,_lookTarget=new Vector3,PointLightShadow=class extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Vector2(4,2),this._viewportCount=6,this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)],this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)],this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)]}updateMatrices(light,viewportIndex=0){let camera=this.camera,shadowMatrix=this.matrix,far=light.distance||camera.far;far!==camera.far&&(camera.far=far,camera.updateProjectionMatrix()),_lightPositionWorld.setFromMatrixPosition(light.matrixWorld),camera.position.copy(_lightPositionWorld),_lookTarget.copy(camera.position),_lookTarget.add(this._cubeDirections[viewportIndex]),camera.up.copy(this._cubeUps[viewportIndex]),camera.lookAt(_lookTarget),camera.updateMatrixWorld(),shadowMatrix.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z),_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse),this._frustum.setFromProjectionMatrix(_projScreenMatrix)}},PointLight=class extends Light{constructor(color,intensity,distance=0,decay=2){super(color,intensity),this.isPointLight=!0,this.type="PointLight",this.distance=distance,this.decay=decay,this.shadow=new PointLightShadow}get power(){return this.intensity*4*Math.PI}set power(power){this.intensity=power/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(source,recursive){return super.copy(source,recursive),this.distance=source.distance,this.decay=source.decay,this.shadow=source.shadow.clone(),this}},DirectionalLightShadow=class extends LightShadow{constructor(){super(new OrthographicCamera(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},DirectionalLight=class extends Light{constructor(color,intensity){super(color,intensity),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.target=new Object3D,this.shadow=new DirectionalLightShadow}dispose(){this.shadow.dispose()}copy(source){return super.copy(source),this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}},AmbientLight=class extends Light{constructor(color,intensity){super(color,intensity),this.isAmbientLight=!0,this.type="AmbientLight"}},RectAreaLight=class extends Light{constructor(color,intensity,width=10,height=10){super(color,intensity),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=width,this.height=height}get power(){return this.intensity*this.width*this.height*Math.PI}set power(power){this.intensity=power/(this.width*this.height*Math.PI)}copy(source){return super.copy(source),this.width=source.width,this.height=source.height,this}toJSON(meta){let data=super.toJSON(meta);return data.object.width=this.width,data.object.height=this.height,data}},SphericalHarmonics3=class{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let i=0;i<9;i++)this.coefficients.push(new Vector3)}set(coefficients){for(let i=0;i<9;i++)this.coefficients[i].copy(coefficients[i]);return this}zero(){for(let i=0;i<9;i++)this.coefficients[i].set(0,0,0);return this}getAt(normal,target){let x=normal.x,y=normal.y,z=normal.z,coeff=this.coefficients;return target.copy(coeff[0]).multiplyScalar(.282095),target.addScaledVector(coeff[1],.488603*y),target.addScaledVector(coeff[2],.488603*z),target.addScaledVector(coeff[3],.488603*x),target.addScaledVector(coeff[4],1.092548*(x*y)),target.addScaledVector(coeff[5],1.092548*(y*z)),target.addScaledVector(coeff[6],.315392*(3*z*z-1)),target.addScaledVector(coeff[7],1.092548*(x*z)),target.addScaledVector(coeff[8],.546274*(x*x-y*y)),target}getIrradianceAt(normal,target){let x=normal.x,y=normal.y,z=normal.z,coeff=this.coefficients;return target.copy(coeff[0]).multiplyScalar(.886227),target.addScaledVector(coeff[1],2*.511664*y),target.addScaledVector(coeff[2],2*.511664*z),target.addScaledVector(coeff[3],2*.511664*x),target.addScaledVector(coeff[4],2*.429043*x*y),target.addScaledVector(coeff[5],2*.429043*y*z),target.addScaledVector(coeff[6],.743125*z*z-.247708),target.addScaledVector(coeff[7],2*.429043*x*z),target.addScaledVector(coeff[8],.429043*(x*x-y*y)),target}add(sh){for(let i=0;i<9;i++)this.coefficients[i].add(sh.coefficients[i]);return this}addScaledSH(sh,s){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(sh.coefficients[i],s);return this}scale(s){for(let i=0;i<9;i++)this.coefficients[i].multiplyScalar(s);return this}lerp(sh,alpha){for(let i=0;i<9;i++)this.coefficients[i].lerp(sh.coefficients[i],alpha);return this}equals(sh){for(let i=0;i<9;i++)if(!this.coefficients[i].equals(sh.coefficients[i]))return!1;return!0}copy(sh){return this.set(sh.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(array,offset=0){let coefficients=this.coefficients;for(let i=0;i<9;i++)coefficients[i].fromArray(array,offset+i*3);return this}toArray(array=[],offset=0){let coefficients=this.coefficients;for(let i=0;i<9;i++)coefficients[i].toArray(array,offset+i*3);return array}static getBasisAt(normal,shBasis){let x=normal.x,y=normal.y,z=normal.z;shBasis[0]=.282095,shBasis[1]=.488603*y,shBasis[2]=.488603*z,shBasis[3]=.488603*x,shBasis[4]=1.092548*x*y,shBasis[5]=1.092548*y*z,shBasis[6]=.315392*(3*z*z-1),shBasis[7]=1.092548*x*z,shBasis[8]=.546274*(x*x-y*y)}},LightProbe=class extends Light{constructor(sh=new SphericalHarmonics3,intensity=1){super(void 0,intensity),this.isLightProbe=!0,this.sh=sh}copy(source){return super.copy(source),this.sh.copy(source.sh),this}fromJSON(json){return this.intensity=json.intensity,this.sh.fromArray(json.sh),this}toJSON(meta){let data=super.toJSON(meta);return data.object.sh=this.sh.toArray(),data}},MaterialLoader=class extends Loader{constructor(manager){super(manager),this.textures={}}load(url,onLoad,onProgress,onError){let scope=this,loader2=new FileLoader(scope.manager);loader2.setPath(scope.path),loader2.setRequestHeader(scope.requestHeader),loader2.setWithCredentials(scope.withCredentials),loader2.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}parse(json){let textures=this.textures;function getTexture(name){return textures[name]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",name),textures[name]}let material=MaterialLoader.createMaterialFromType(json.type);if(json.uuid!==void 0&&(material.uuid=json.uuid),json.name!==void 0&&(material.name=json.name),json.color!==void 0&&material.color!==void 0&&material.color.setHex(json.color),json.roughness!==void 0&&(material.roughness=json.roughness),json.metalness!==void 0&&(material.metalness=json.metalness),json.sheen!==void 0&&(material.sheen=json.sheen),json.sheenColor!==void 0&&(material.sheenColor=new Color().setHex(json.sheenColor)),json.sheenRoughness!==void 0&&(material.sheenRoughness=json.sheenRoughness),json.emissive!==void 0&&material.emissive!==void 0&&material.emissive.setHex(json.emissive),json.specular!==void 0&&material.specular!==void 0&&material.specular.setHex(json.specular),json.specularIntensity!==void 0&&(material.specularIntensity=json.specularIntensity),json.specularColor!==void 0&&material.specularColor!==void 0&&material.specularColor.setHex(json.specularColor),json.shininess!==void 0&&(material.shininess=json.shininess),json.clearcoat!==void 0&&(material.clearcoat=json.clearcoat),json.clearcoatRoughness!==void 0&&(material.clearcoatRoughness=json.clearcoatRoughness),json.iridescence!==void 0&&(material.iridescence=json.iridescence),json.iridescenceIOR!==void 0&&(material.iridescenceIOR=json.iridescenceIOR),json.iridescenceThicknessRange!==void 0&&(material.iridescenceThicknessRange=json.iridescenceThicknessRange),json.transmission!==void 0&&(material.transmission=json.transmission),json.thickness!==void 0&&(material.thickness=json.thickness),json.attenuationDistance!==void 0&&(material.attenuationDistance=json.attenuationDistance),json.attenuationColor!==void 0&&material.attenuationColor!==void 0&&material.attenuationColor.setHex(json.attenuationColor),json.fog!==void 0&&(material.fog=json.fog),json.flatShading!==void 0&&(material.flatShading=json.flatShading),json.blending!==void 0&&(material.blending=json.blending),json.combine!==void 0&&(material.combine=json.combine),json.side!==void 0&&(material.side=json.side),json.shadowSide!==void 0&&(material.shadowSide=json.shadowSide),json.opacity!==void 0&&(material.opacity=json.opacity),json.transparent!==void 0&&(material.transparent=json.transparent),json.alphaTest!==void 0&&(material.alphaTest=json.alphaTest),json.depthTest!==void 0&&(material.depthTest=json.depthTest),json.depthWrite!==void 0&&(material.depthWrite=json.depthWrite),json.colorWrite!==void 0&&(material.colorWrite=json.colorWrite),json.stencilWrite!==void 0&&(material.stencilWrite=json.stencilWrite),json.stencilWriteMask!==void 0&&(material.stencilWriteMask=json.stencilWriteMask),json.stencilFunc!==void 0&&(material.stencilFunc=json.stencilFunc),json.stencilRef!==void 0&&(material.stencilRef=json.stencilRef),json.stencilFuncMask!==void 0&&(material.stencilFuncMask=json.stencilFuncMask),json.stencilFail!==void 0&&(material.stencilFail=json.stencilFail),json.stencilZFail!==void 0&&(material.stencilZFail=json.stencilZFail),json.stencilZPass!==void 0&&(material.stencilZPass=json.stencilZPass),json.wireframe!==void 0&&(material.wireframe=json.wireframe),json.wireframeLinewidth!==void 0&&(material.wireframeLinewidth=json.wireframeLinewidth),json.wireframeLinecap!==void 0&&(material.wireframeLinecap=json.wireframeLinecap),json.wireframeLinejoin!==void 0&&(material.wireframeLinejoin=json.wireframeLinejoin),json.rotation!==void 0&&(material.rotation=json.rotation),json.linewidth!==1&&(material.linewidth=json.linewidth),json.dashSize!==void 0&&(material.dashSize=json.dashSize),json.gapSize!==void 0&&(material.gapSize=json.gapSize),json.scale!==void 0&&(material.scale=json.scale),json.polygonOffset!==void 0&&(material.polygonOffset=json.polygonOffset),json.polygonOffsetFactor!==void 0&&(material.polygonOffsetFactor=json.polygonOffsetFactor),json.polygonOffsetUnits!==void 0&&(material.polygonOffsetUnits=json.polygonOffsetUnits),json.dithering!==void 0&&(material.dithering=json.dithering),json.alphaToCoverage!==void 0&&(material.alphaToCoverage=json.alphaToCoverage),json.premultipliedAlpha!==void 0&&(material.premultipliedAlpha=json.premultipliedAlpha),json.visible!==void 0&&(material.visible=json.visible),json.toneMapped!==void 0&&(material.toneMapped=json.toneMapped),json.userData!==void 0&&(material.userData=json.userData),json.vertexColors!==void 0&&(typeof json.vertexColors=="number"?material.vertexColors=json.vertexColors>0:material.vertexColors=json.vertexColors),json.uniforms!==void 0)for(let name in json.uniforms){let uniform=json.uniforms[name];switch(material.uniforms[name]={},uniform.type){case"t":material.uniforms[name].value=getTexture(uniform.value);break;case"c":material.uniforms[name].value=new Color().setHex(uniform.value);break;case"v2":material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case"v3":material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case"v4":material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case"m3":material.uniforms[name].value=new Matrix3().fromArray(uniform.value);break;case"m4":material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value}}if(json.defines!==void 0&&(material.defines=json.defines),json.vertexShader!==void 0&&(material.vertexShader=json.vertexShader),json.fragmentShader!==void 0&&(material.fragmentShader=json.fragmentShader),json.glslVersion!==void 0&&(material.glslVersion=json.glslVersion),json.extensions!==void 0)for(let key in json.extensions)material.extensions[key]=json.extensions[key];if(json.size!==void 0&&(material.size=json.size),json.sizeAttenuation!==void 0&&(material.sizeAttenuation=json.sizeAttenuation),json.map!==void 0&&(material.map=getTexture(json.map)),json.matcap!==void 0&&(material.matcap=getTexture(json.matcap)),json.alphaMap!==void 0&&(material.alphaMap=getTexture(json.alphaMap)),json.bumpMap!==void 0&&(material.bumpMap=getTexture(json.bumpMap)),json.bumpScale!==void 0&&(material.bumpScale=json.bumpScale),json.normalMap!==void 0&&(material.normalMap=getTexture(json.normalMap)),json.normalMapType!==void 0&&(material.normalMapType=json.normalMapType),json.normalScale!==void 0){let normalScale=json.normalScale;Array.isArray(normalScale)===!1&&(normalScale=[normalScale,normalScale]),material.normalScale=new Vector2().fromArray(normalScale)}return json.displacementMap!==void 0&&(material.displacementMap=getTexture(json.displacementMap)),json.displacementScale!==void 0&&(material.displacementScale=json.displacementScale),json.displacementBias!==void 0&&(material.displacementBias=json.displacementBias),json.roughnessMap!==void 0&&(material.roughnessMap=getTexture(json.roughnessMap)),json.metalnessMap!==void 0&&(material.metalnessMap=getTexture(json.metalnessMap)),json.emissiveMap!==void 0&&(material.emissiveMap=getTexture(json.emissiveMap)),json.emissiveIntensity!==void 0&&(material.emissiveIntensity=json.emissiveIntensity),json.specularMap!==void 0&&(material.specularMap=getTexture(json.specularMap)),json.specularIntensityMap!==void 0&&(material.specularIntensityMap=getTexture(json.specularIntensityMap)),json.specularColorMap!==void 0&&(material.specularColorMap=getTexture(json.specularColorMap)),json.envMap!==void 0&&(material.envMap=getTexture(json.envMap)),json.envMapIntensity!==void 0&&(material.envMapIntensity=json.envMapIntensity),json.reflectivity!==void 0&&(material.reflectivity=json.reflectivity),json.refractionRatio!==void 0&&(material.refractionRatio=json.refractionRatio),json.lightMap!==void 0&&(material.lightMap=getTexture(json.lightMap)),json.lightMapIntensity!==void 0&&(material.lightMapIntensity=json.lightMapIntensity),json.aoMap!==void 0&&(material.aoMap=getTexture(json.aoMap)),json.aoMapIntensity!==void 0&&(material.aoMapIntensity=json.aoMapIntensity),json.gradientMap!==void 0&&(material.gradientMap=getTexture(json.gradientMap)),json.clearcoatMap!==void 0&&(material.clearcoatMap=getTexture(json.clearcoatMap)),json.clearcoatRoughnessMap!==void 0&&(material.clearcoatRoughnessMap=getTexture(json.clearcoatRoughnessMap)),json.clearcoatNormalMap!==void 0&&(material.clearcoatNormalMap=getTexture(json.clearcoatNormalMap)),json.clearcoatNormalScale!==void 0&&(material.clearcoatNormalScale=new Vector2().fromArray(json.clearcoatNormalScale)),json.iridescenceMap!==void 0&&(material.iridescenceMap=getTexture(json.iridescenceMap)),json.iridescenceThicknessMap!==void 0&&(material.iridescenceThicknessMap=getTexture(json.iridescenceThicknessMap)),json.transmissionMap!==void 0&&(material.transmissionMap=getTexture(json.transmissionMap)),json.thicknessMap!==void 0&&(material.thicknessMap=getTexture(json.thicknessMap)),json.sheenColorMap!==void 0&&(material.sheenColorMap=getTexture(json.sheenColorMap)),json.sheenRoughnessMap!==void 0&&(material.sheenRoughnessMap=getTexture(json.sheenRoughnessMap)),material}setTextures(value){return this.textures=value,this}static createMaterialFromType(type){let materialLib={ShadowMaterial,SpriteMaterial,RawShaderMaterial,ShaderMaterial,PointsMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshPhongMaterial,MeshToonMaterial,MeshNormalMaterial,MeshLambertMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshBasicMaterial,MeshMatcapMaterial,LineDashedMaterial,LineBasicMaterial,Material};return new materialLib[type]}},LoaderUtils=class{static decodeText(array){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(array);let s="";for(let i=0,il=array.length;i<il;i++)s+=String.fromCharCode(array[i]);try{return decodeURIComponent(escape(s))}catch(e){return s}}static extractUrlBase(url){let index=url.lastIndexOf("/");return index===-1?"./":url.slice(0,index+1)}static resolveURL(url,path){return typeof url!="string"||url===""?"":(/^https?:\/\//i.test(path)&&/^\//.test(url)&&(path=path.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(url)||/^data:.*,.*$/i.test(url)||/^blob:.*$/i.test(url)?url:path+url)}},InstancedBufferGeometry=class extends BufferGeometry{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(source){return super.copy(source),this.instanceCount=source.instanceCount,this}toJSON(){let data=super.toJSON();return data.instanceCount=this.instanceCount,data.isInstancedBufferGeometry=!0,data}},BufferGeometryLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,loader2=new FileLoader(scope.manager);loader2.setPath(scope.path),loader2.setRequestHeader(scope.requestHeader),loader2.setWithCredentials(scope.withCredentials),loader2.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}parse(json){let interleavedBufferMap={},arrayBufferMap={};function getInterleavedBuffer(json2,uuid){if(interleavedBufferMap[uuid]!==void 0)return interleavedBufferMap[uuid];let interleavedBuffer=json2.interleavedBuffers[uuid],buffer=getArrayBuffer(json2,interleavedBuffer.buffer),array=getTypedArray(interleavedBuffer.type,buffer),ib=new InterleavedBuffer(array,interleavedBuffer.stride);return ib.uuid=interleavedBuffer.uuid,interleavedBufferMap[uuid]=ib,ib}function getArrayBuffer(json2,uuid){if(arrayBufferMap[uuid]!==void 0)return arrayBufferMap[uuid];let arrayBuffer=json2.arrayBuffers[uuid],ab=new Uint32Array(arrayBuffer).buffer;return arrayBufferMap[uuid]=ab,ab}let geometry=json.isInstancedBufferGeometry?new InstancedBufferGeometry:new BufferGeometry,index=json.data.index;if(index!==void 0){let typedArray=getTypedArray(index.type,index.array);geometry.setIndex(new BufferAttribute(typedArray,1))}let attributes=json.data.attributes;for(let key in attributes){let attribute=attributes[key],bufferAttribute;if(attribute.isInterleavedBufferAttribute){let interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized)}else{let typedArray=getTypedArray(attribute.type,attribute.array),bufferAttributeConstr=attribute.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;bufferAttribute=new bufferAttributeConstr(typedArray,attribute.itemSize,attribute.normalized)}attribute.name!==void 0&&(bufferAttribute.name=attribute.name),attribute.usage!==void 0&&bufferAttribute.setUsage(attribute.usage),attribute.updateRange!==void 0&&(bufferAttribute.updateRange.offset=attribute.updateRange.offset,bufferAttribute.updateRange.count=attribute.updateRange.count),geometry.setAttribute(key,bufferAttribute)}let morphAttributes=json.data.morphAttributes;if(morphAttributes)for(let key in morphAttributes){let attributeArray=morphAttributes[key],array=[];for(let i=0,il=attributeArray.length;i<il;i++){let attribute=attributeArray[i],bufferAttribute;if(attribute.isInterleavedBufferAttribute){let interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized)}else{let typedArray=getTypedArray(attribute.type,attribute.array);bufferAttribute=new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized)}attribute.name!==void 0&&(bufferAttribute.name=attribute.name),array.push(bufferAttribute)}geometry.morphAttributes[key]=array}json.data.morphTargetsRelative&&(geometry.morphTargetsRelative=!0);let groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==void 0)for(let i=0,n=groups.length;i!==n;++i){let group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex)}let boundingSphere=json.data.boundingSphere;if(boundingSphere!==void 0){let center=new Vector3;boundingSphere.center!==void 0&&center.fromArray(boundingSphere.center),geometry.boundingSphere=new Sphere(center,boundingSphere.radius)}return json.name&&(geometry.name=json.name),json.userData&&(geometry.userData=json.userData),geometry}},ObjectLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,path=this.path===""?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;let loader2=new FileLoader(this.manager);loader2.setPath(this.path),loader2.setRequestHeader(this.requestHeader),loader2.setWithCredentials(this.withCredentials),loader2.load(url,function(text){let json=null;try{json=JSON.parse(text)}catch(error){onError!==void 0&&onError(error),console.error("THREE:ObjectLoader: Can't parse "+url+".",error.message);return}let metadata=json.metadata;if(metadata===void 0||metadata.type===void 0||metadata.type.toLowerCase()==="geometry"){onError!==void 0&&onError(new Error("THREE.ObjectLoader: Can't load "+url)),console.error("THREE.ObjectLoader: Can't load "+url);return}scope.parse(json,onLoad)},onProgress,onError)}loadAsync(url,onProgress){return __async(this,null,function*(){let scope=this,path=this.path===""?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;let loader2=new FileLoader(this.manager);loader2.setPath(this.path),loader2.setRequestHeader(this.requestHeader),loader2.setWithCredentials(this.withCredentials);let text=yield loader2.loadAsync(url,onProgress),json=JSON.parse(text),metadata=json.metadata;if(metadata===void 0||metadata.type===void 0||metadata.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+url);return yield scope.parseAsync(json)})}parse(json,onLoad){let animations=this.parseAnimations(json.animations),shapes=this.parseShapes(json.shapes),geometries=this.parseGeometries(json.geometries,shapes),images=this.parseImages(json.images,function(){onLoad!==void 0&&onLoad(object)}),textures=this.parseTextures(json.textures,images),materials2=this.parseMaterials(json.materials,textures),object=this.parseObject(json.object,geometries,materials2,textures,animations),skeletons=this.parseSkeletons(json.skeletons,object);if(this.bindSkeletons(object,skeletons),onLoad!==void 0){let hasImages=!1;for(let uuid in images)if(images[uuid].data instanceof HTMLImageElement){hasImages=!0;break}hasImages===!1&&onLoad(object)}return object}parseAsync(json){return __async(this,null,function*(){let animations=this.parseAnimations(json.animations),shapes=this.parseShapes(json.shapes),geometries=this.parseGeometries(json.geometries,shapes),images=yield this.parseImagesAsync(json.images),textures=this.parseTextures(json.textures,images),materials2=this.parseMaterials(json.materials,textures),object=this.parseObject(json.object,geometries,materials2,textures,animations),skeletons=this.parseSkeletons(json.skeletons,object);return this.bindSkeletons(object,skeletons),object})}parseShapes(json){let shapes={};if(json!==void 0)for(let i=0,l=json.length;i<l;i++){let shape=new Shape().fromJSON(json[i]);shapes[shape.uuid]=shape}return shapes}parseSkeletons(json,object){let skeletons={},bones={};if(object.traverse(function(child){child.isBone&&(bones[child.uuid]=child)}),json!==void 0)for(let i=0,l=json.length;i<l;i++){let skeleton=new Skeleton().fromJSON(json[i],bones);skeletons[skeleton.uuid]=skeleton}return skeletons}parseGeometries(json,shapes){let geometries={};if(json!==void 0){let bufferGeometryLoader=new BufferGeometryLoader;for(let i=0,l=json.length;i<l;i++){let geometry,data=json[i];switch(data.type){case"BufferGeometry":case"InstancedBufferGeometry":geometry=bufferGeometryLoader.parse(data);break;default:data.type in Geometries?geometry=Geometries[data.type].fromJSON(data,shapes):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`)}geometry.uuid=data.uuid,data.name!==void 0&&(geometry.name=data.name),geometry.isBufferGeometry===!0&&data.userData!==void 0&&(geometry.userData=data.userData),geometries[data.uuid]=geometry}}return geometries}parseMaterials(json,textures){let cache={},materials2={};if(json!==void 0){let loader2=new MaterialLoader;loader2.setTextures(textures);for(let i=0,l=json.length;i<l;i++){let data=json[i];cache[data.uuid]===void 0&&(cache[data.uuid]=loader2.parse(data)),materials2[data.uuid]=cache[data.uuid]}}return materials2}parseAnimations(json){let animations={};if(json!==void 0)for(let i=0;i<json.length;i++){let data=json[i],clip=AnimationClip.parse(data);animations[clip.uuid]=clip}return animations}parseImages(json,onLoad){let scope=this,images={},loader2;function loadImage(url){return scope.manager.itemStart(url),loader2.load(url,function(){scope.manager.itemEnd(url)},void 0,function(){scope.manager.itemError(url),scope.manager.itemEnd(url)})}function deserializeImage(image){if(typeof image=="string"){let url=image,path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(url)?url:scope.resourcePath+url;return loadImage(path)}else return image.data?{data:getTypedArray(image.type,image.data),width:image.width,height:image.height}:null}if(json!==void 0&&json.length>0){let manager=new LoadingManager(onLoad);loader2=new ImageLoader(manager),loader2.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){let image=json[i],url=image.url;if(Array.isArray(url)){let imageArray=[];for(let j=0,jl=url.length;j<jl;j++){let currentUrl=url[j],deserializedImage=deserializeImage(currentUrl);deserializedImage!==null&&(deserializedImage instanceof HTMLImageElement?imageArray.push(deserializedImage):imageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height)))}images[image.uuid]=new Source(imageArray)}else{let deserializedImage=deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage)}}}return images}parseImagesAsync(json){return __async(this,null,function*(){let scope=this,images={},loader2;function deserializeImage(image){return __async(this,null,function*(){if(typeof image=="string"){let url=image,path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(url)?url:scope.resourcePath+url;return yield loader2.loadAsync(path)}else return image.data?{data:getTypedArray(image.type,image.data),width:image.width,height:image.height}:null})}if(json!==void 0&&json.length>0){loader2=new ImageLoader(this.manager),loader2.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){let image=json[i],url=image.url;if(Array.isArray(url)){let imageArray=[];for(let j=0,jl=url.length;j<jl;j++){let currentUrl=url[j],deserializedImage=yield deserializeImage(currentUrl);deserializedImage!==null&&(deserializedImage instanceof HTMLImageElement?imageArray.push(deserializedImage):imageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height)))}images[image.uuid]=new Source(imageArray)}else{let deserializedImage=yield deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage)}}}return images})}parseTextures(json,images){function parseConstant(value,type){return typeof value=="number"?value:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",value),type[value])}let textures={};if(json!==void 0)for(let i=0,l=json.length;i<l;i++){let data=json[i];data.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid),images[data.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",data.image);let source=images[data.image],image=source.data,texture;Array.isArray(image)?(texture=new CubeTexture,image.length===6&&(texture.needsUpdate=!0)):(image&&image.data?texture=new DataTexture:texture=new Texture,image&&(texture.needsUpdate=!0)),texture.source=source,texture.uuid=data.uuid,data.name!==void 0&&(texture.name=data.name),data.mapping!==void 0&&(texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING)),data.offset!==void 0&&texture.offset.fromArray(data.offset),data.repeat!==void 0&&texture.repeat.fromArray(data.repeat),data.center!==void 0&&texture.center.fromArray(data.center),data.rotation!==void 0&&(texture.rotation=data.rotation),data.wrap!==void 0&&(texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING),texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING)),data.format!==void 0&&(texture.format=data.format),data.type!==void 0&&(texture.type=data.type),data.encoding!==void 0&&(texture.encoding=data.encoding),data.minFilter!==void 0&&(texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER)),data.magFilter!==void 0&&(texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER)),data.anisotropy!==void 0&&(texture.anisotropy=data.anisotropy),data.flipY!==void 0&&(texture.flipY=data.flipY),data.premultiplyAlpha!==void 0&&(texture.premultiplyAlpha=data.premultiplyAlpha),data.unpackAlignment!==void 0&&(texture.unpackAlignment=data.unpackAlignment),data.userData!==void 0&&(texture.userData=data.userData),textures[data.uuid]=texture}return textures}parseObject(data,geometries,materials2,textures,animations){let object;function getGeometry(name){return geometries[name]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",name),geometries[name]}function getMaterial(name){if(name!==void 0){if(Array.isArray(name)){let array=[];for(let i=0,l=name.length;i<l;i++){let uuid=name[i];materials2[uuid]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",uuid),array.push(materials2[uuid])}return array}return materials2[name]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",name),materials2[name]}}function getTexture(uuid){return textures[uuid]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",uuid),textures[uuid]}let geometry,material;switch(data.type){case"Scene":object=new Scene,data.background!==void 0&&(Number.isInteger(data.background)?object.background=new Color(data.background):object.background=getTexture(data.background)),data.environment!==void 0&&(object.environment=getTexture(data.environment)),data.fog!==void 0&&(data.fog.type==="Fog"?object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far):data.fog.type==="FogExp2"&&(object.fog=new FogExp2(data.fog.color,data.fog.density))),data.backgroundBlurriness!==void 0&&(object.backgroundBlurriness=data.backgroundBlurriness);break;case"PerspectiveCamera":object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far),data.focus!==void 0&&(object.focus=data.focus),data.zoom!==void 0&&(object.zoom=data.zoom),data.filmGauge!==void 0&&(object.filmGauge=data.filmGauge),data.filmOffset!==void 0&&(object.filmOffset=data.filmOffset),data.view!==void 0&&(object.view=Object.assign({},data.view));break;case"OrthographicCamera":object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far),data.zoom!==void 0&&(object.zoom=data.zoom),data.view!==void 0&&(object.view=Object.assign({},data.view));break;case"AmbientLight":object=new AmbientLight(data.color,data.intensity);break;case"DirectionalLight":object=new DirectionalLight(data.color,data.intensity);break;case"PointLight":object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case"RectAreaLight":object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case"SpotLight":object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case"HemisphereLight":object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case"LightProbe":object=new LightProbe().fromJSON(data);break;case"SkinnedMesh":geometry=getGeometry(data.geometry),material=getMaterial(data.material),object=new SkinnedMesh(geometry,material),data.bindMode!==void 0&&(object.bindMode=data.bindMode),data.bindMatrix!==void 0&&object.bindMatrix.fromArray(data.bindMatrix),data.skeleton!==void 0&&(object.skeleton=data.skeleton);break;case"Mesh":geometry=getGeometry(data.geometry),material=getMaterial(data.material),object=new Mesh(geometry,material);break;case"InstancedMesh":geometry=getGeometry(data.geometry),material=getMaterial(data.material);let count=data.count,instanceMatrix=data.instanceMatrix,instanceColor=data.instanceColor;object=new InstancedMesh(geometry,material,count),object.instanceMatrix=new InstancedBufferAttribute(new Float32Array(instanceMatrix.array),16),instanceColor!==void 0&&(object.instanceColor=new InstancedBufferAttribute(new Float32Array(instanceColor.array),instanceColor.itemSize));break;case"LOD":object=new LOD;break;case"Line":object=new Line(getGeometry(data.geometry),getMaterial(data.material));break;case"LineLoop":object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case"LineSegments":object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case"PointCloud":case"Points":object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case"Sprite":object=new Sprite(getMaterial(data.material));break;case"Group":object=new Group;break;case"Bone":object=new Bone;break;default:object=new Object3D}if(object.uuid=data.uuid,data.name!==void 0&&(object.name=data.name),data.matrix!==void 0?(object.matrix.fromArray(data.matrix),data.matrixAutoUpdate!==void 0&&(object.matrixAutoUpdate=data.matrixAutoUpdate),object.matrixAutoUpdate&&object.matrix.decompose(object.position,object.quaternion,object.scale)):(data.position!==void 0&&object.position.fromArray(data.position),data.rotation!==void 0&&object.rotation.fromArray(data.rotation),data.quaternion!==void 0&&object.quaternion.fromArray(data.quaternion),data.scale!==void 0&&object.scale.fromArray(data.scale)),data.castShadow!==void 0&&(object.castShadow=data.castShadow),data.receiveShadow!==void 0&&(object.receiveShadow=data.receiveShadow),data.shadow&&(data.shadow.bias!==void 0&&(object.shadow.bias=data.shadow.bias),data.shadow.normalBias!==void 0&&(object.shadow.normalBias=data.shadow.normalBias),data.shadow.radius!==void 0&&(object.shadow.radius=data.shadow.radius),data.shadow.mapSize!==void 0&&object.shadow.mapSize.fromArray(data.shadow.mapSize),data.shadow.camera!==void 0&&(object.shadow.camera=this.parseObject(data.shadow.camera))),data.visible!==void 0&&(object.visible=data.visible),data.frustumCulled!==void 0&&(object.frustumCulled=data.frustumCulled),data.renderOrder!==void 0&&(object.renderOrder=data.renderOrder),data.userData!==void 0&&(object.userData=data.userData),data.layers!==void 0&&(object.layers.mask=data.layers),data.children!==void 0){let children=data.children;for(let i=0;i<children.length;i++)object.add(this.parseObject(children[i],geometries,materials2,textures,animations))}if(data.animations!==void 0){let objectAnimations=data.animations;for(let i=0;i<objectAnimations.length;i++){let uuid=objectAnimations[i];object.animations.push(animations[uuid])}}if(data.type==="LOD"){data.autoUpdate!==void 0&&(object.autoUpdate=data.autoUpdate);let levels=data.levels;for(let l=0;l<levels.length;l++){let level=levels[l],child=object.getObjectByProperty("uuid",level.object);child!==void 0&&object.addLevel(child,level.distance,level.hysteresis)}}return object}bindSkeletons(object,skeletons){Object.keys(skeletons).length!==0&&object.traverse(function(child){if(child.isSkinnedMesh===!0&&child.skeleton!==void 0){let skeleton=skeletons[child.skeleton];skeleton===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",child.skeleton):child.bind(skeleton,child.bindMatrix)}})}},TEXTURE_MAPPING={UVMapping,CubeReflectionMapping,CubeRefractionMapping,EquirectangularReflectionMapping,EquirectangularRefractionMapping,CubeUVReflectionMapping},TEXTURE_WRAPPING={RepeatWrapping,ClampToEdgeWrapping,MirroredRepeatWrapping},TEXTURE_FILTER={NearestFilter,NearestMipmapNearestFilter,NearestMipmapLinearFilter,LinearFilter,LinearMipmapNearestFilter,LinearMipmapLinearFilter},ImageBitmapLoader=class extends Loader{constructor(manager){super(manager),this.isImageBitmapLoader=!0,typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(options){return this.options=options,this}load(url,onLoad,onProgress,onError){url===void 0&&(url=""),this.path!==void 0&&(url=this.path+url),url=this.manager.resolveURL(url);let scope=this,cached=Cache.get(url);if(cached!==void 0)return scope.manager.itemStart(url),setTimeout(function(){onLoad&&onLoad(cached),scope.manager.itemEnd(url)},0),cached;let fetchOptions={};fetchOptions.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",fetchOptions.headers=this.requestHeader,fetch(url,fetchOptions).then(function(res){return res.blob()}).then(function(blob){return createImageBitmap(blob,Object.assign(scope.options,{colorSpaceConversion:"none"}))}).then(function(imageBitmap){Cache.add(url,imageBitmap),onLoad&&onLoad(imageBitmap),scope.manager.itemEnd(url)}).catch(function(e){onError&&onError(e),scope.manager.itemError(url),scope.manager.itemEnd(url)}),scope.manager.itemStart(url)}},_context,AudioContext=class{static getContext(){return _context===void 0&&(_context=new(window.AudioContext||window.webkitAudioContext)),_context}static setContext(value){_context=value}},AudioLoader=class extends Loader{constructor(manager){super(manager)}load(url,onLoad,onProgress,onError){let scope=this,loader2=new FileLoader(this.manager);loader2.setResponseType("arraybuffer"),loader2.setPath(this.path),loader2.setRequestHeader(this.requestHeader),loader2.setWithCredentials(this.withCredentials),loader2.load(url,function(buffer){try{let bufferCopy=buffer.slice(0);AudioContext.getContext().decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer)})}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}},HemisphereLightProbe=class extends LightProbe{constructor(skyColor,groundColor,intensity=1){super(void 0,intensity),this.isHemisphereLightProbe=!0;let color1=new Color().set(skyColor),color2=new Color().set(groundColor),sky=new Vector3(color1.r,color1.g,color1.b),ground=new Vector3(color2.r,color2.g,color2.b),c0=Math.sqrt(Math.PI),c1=c0*Math.sqrt(.75);this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0),this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1)}},AmbientLightProbe=class extends LightProbe{constructor(color,intensity=1){super(void 0,intensity),this.isAmbientLightProbe=!0;let color1=new Color().set(color);this.sh.coefficients[0].set(color1.r,color1.g,color1.b).multiplyScalar(2*Math.sqrt(Math.PI))}},_eyeRight=new Matrix4,_eyeLeft=new Matrix4,_projectionMatrix=new Matrix4,StereoCamera=class{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(camera){let cache=this._cache;if(cache.focus!==camera.focus||cache.fov!==camera.fov||cache.aspect!==camera.aspect*this.aspect||cache.near!==camera.near||cache.far!==camera.far||cache.zoom!==camera.zoom||cache.eyeSep!==this.eyeSep){cache.focus=camera.focus,cache.fov=camera.fov,cache.aspect=camera.aspect*this.aspect,cache.near=camera.near,cache.far=camera.far,cache.zoom=camera.zoom,cache.eyeSep=this.eyeSep,_projectionMatrix.copy(camera.projectionMatrix);let eyeSepHalf=cache.eyeSep/2,eyeSepOnProjection=eyeSepHalf*cache.near/cache.focus,ymax=cache.near*Math.tan(DEG2RAD*cache.fov*.5)/cache.zoom,xmin,xmax;_eyeLeft.elements[12]=-eyeSepHalf,_eyeRight.elements[12]=eyeSepHalf,xmin=-ymax*cache.aspect+eyeSepOnProjection,xmax=ymax*cache.aspect+eyeSepOnProjection,_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin),_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin),this.cameraL.projectionMatrix.copy(_projectionMatrix),xmin=-ymax*cache.aspect-eyeSepOnProjection,xmax=ymax*cache.aspect-eyeSepOnProjection,_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin),_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin),this.cameraR.projectionMatrix.copy(_projectionMatrix)}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft),this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight)}},Clock=class{constructor(autoStart=!0){this.autoStart=autoStart,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let diff=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){let newTime=now();diff=(newTime-this.oldTime)/1e3,this.oldTime=newTime,this.elapsedTime+=diff}return diff}};function now(){return(typeof performance=="undefined"?Date:performance).now()}var _position$1=new Vector3,_quaternion$1=new Quaternion,_scale$1=new Vector3,_orientation$1=new Vector3,AudioListener=class extends Object3D{constructor(){super(),this.type="AudioListener",this.context=AudioContext.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Clock}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(value){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=value,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(value){return this.gain.gain.setTargetAtTime(value,this.context.currentTime,.01),this}updateMatrixWorld(force){super.updateMatrixWorld(force);let listener=this.context.listener,up=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(_position$1,_quaternion$1,_scale$1),_orientation$1.set(0,0,-1).applyQuaternion(_quaternion$1),listener.positionX){let endTime=this.context.currentTime+this.timeDelta;listener.positionX.linearRampToValueAtTime(_position$1.x,endTime),listener.positionY.linearRampToValueAtTime(_position$1.y,endTime),listener.positionZ.linearRampToValueAtTime(_position$1.z,endTime),listener.forwardX.linearRampToValueAtTime(_orientation$1.x,endTime),listener.forwardY.linearRampToValueAtTime(_orientation$1.y,endTime),listener.forwardZ.linearRampToValueAtTime(_orientation$1.z,endTime),listener.upX.linearRampToValueAtTime(up.x,endTime),listener.upY.linearRampToValueAtTime(up.y,endTime),listener.upZ.linearRampToValueAtTime(up.z,endTime)}else listener.setPosition(_position$1.x,_position$1.y,_position$1.z),listener.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z,up.x,up.y,up.z)}},Audio=class extends Object3D{constructor(listener){super(),this.type="Audio",this.listener=listener,this.context=listener.context,this.gain=this.context.createGain(),this.gain.connect(listener.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(audioNode){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=audioNode,this.connect(),this}setMediaElementSource(mediaElement){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(mediaElement),this.connect(),this}setMediaStreamSource(mediaStream){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(mediaStream),this.connect(),this}setBuffer(audioBuffer){return this.buffer=audioBuffer,this.sourceType="buffer",this.autoplay&&this.play(),this}play(delay=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+delay;let source=this.context.createBufferSource();return source.buffer=this.buffer,source.loop=this.loop,source.loopStart=this.loopStart,source.loopEnd=this.loopEnd,source.onended=this.onEnded.bind(this),source.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=source,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++)this.filters[i-1].connect(this.filters[i]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++)this.filters[i-1].disconnect(this.filters[i]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(value){return value||(value=[]),this._connected===!0?(this.disconnect(),this.filters=value.slice(),this.connect()):this.filters=value.slice(),this}setDetune(value){if(this.detune=value,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(filter){return this.setFilters(filter?[filter]:[])}setPlaybackRate(value){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=value,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(value){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=value,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(value){return this.loopStart=value,this}setLoopEnd(value){return this.loopEnd=value,this}getVolume(){return this.gain.gain.value}setVolume(value){return this.gain.gain.setTargetAtTime(value,this.context.currentTime,.01),this}},_position=new Vector3,_quaternion=new Quaternion,_scale=new Vector3,_orientation=new Vector3,PositionalAudio=class extends Audio{constructor(listener){super(listener),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(value){return this.panner.refDistance=value,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(value){return this.panner.rolloffFactor=value,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(value){return this.panner.distanceModel=value,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(value){return this.panner.maxDistance=value,this}setDirectionalCone(coneInnerAngle,coneOuterAngle,coneOuterGain){return this.panner.coneInnerAngle=coneInnerAngle,this.panner.coneOuterAngle=coneOuterAngle,this.panner.coneOuterGain=coneOuterGain,this}updateMatrixWorld(force){if(super.updateMatrixWorld(force),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(_position,_quaternion,_scale),_orientation.set(0,0,1).applyQuaternion(_quaternion);let panner=this.panner;if(panner.positionX){let endTime=this.context.currentTime+this.listener.timeDelta;panner.positionX.linearRampToValueAtTime(_position.x,endTime),panner.positionY.linearRampToValueAtTime(_position.y,endTime),panner.positionZ.linearRampToValueAtTime(_position.z,endTime),panner.orientationX.linearRampToValueAtTime(_orientation.x,endTime),panner.orientationY.linearRampToValueAtTime(_orientation.y,endTime),panner.orientationZ.linearRampToValueAtTime(_orientation.z,endTime)}else panner.setPosition(_position.x,_position.y,_position.z),panner.setOrientation(_orientation.x,_orientation.y,_orientation.z)}},AudioAnalyser=class{constructor(audio,fftSize=2048){this.analyser=audio.context.createAnalyser(),this.analyser.fftSize=fftSize,this.data=new Uint8Array(this.analyser.frequencyBinCount),audio.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let value=0,data=this.getFrequencyData();for(let i=0;i<data.length;i++)value+=data[i];return value/data.length}},PropertyMixer=class{constructor(binding,typeName,valueSize){this.binding=binding,this.valueSize=valueSize;let mixFunction,mixFunctionAdditive,setIdentity;switch(typeName){case"quaternion":mixFunction=this._slerp,mixFunctionAdditive=this._slerpAdditive,setIdentity=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(valueSize*6),this._workIndex=5;break;case"string":case"bool":mixFunction=this._select,mixFunctionAdditive=this._select,setIdentity=this._setAdditiveIdentityOther,this.buffer=new Array(valueSize*5);break;default:mixFunction=this._lerp,mixFunctionAdditive=this._lerpAdditive,setIdentity=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(valueSize*5)}this._mixBufferRegion=mixFunction,this._mixBufferRegionAdditive=mixFunctionAdditive,this._setIdentity=setIdentity,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(accuIndex,weight){let buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride,currentWeight=this.cumulativeWeight;if(currentWeight===0){for(let i=0;i!==stride;++i)buffer[offset+i]=buffer[i];currentWeight=weight}else{currentWeight+=weight;let mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride)}this.cumulativeWeight=currentWeight}accumulateAdditive(weight){let buffer=this.buffer,stride=this.valueSize,offset=stride*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(buffer,offset,0,weight,stride),this.cumulativeWeightAdditive+=weight}apply(accuIndex){let stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,weightAdditive=this.cumulativeWeightAdditive,binding=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,weight<1){let originalValueOffset=stride*this._origIndex;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride)}weightAdditive>0&&this._mixBufferRegionAdditive(buffer,offset,this._addIndex*stride,1,stride);for(let i=stride,e=stride+stride;i!==e;++i)if(buffer[i]!==buffer[i+stride]){binding.setValue(buffer,offset);break}}saveOriginalState(){let binding=this.binding,buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*this._origIndex;binding.getValue(buffer,originalValueOffset);for(let i=stride,e=originalValueOffset;i!==e;++i)buffer[i]=buffer[originalValueOffset+i%stride];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){let originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset)}_setAdditiveIdentityNumeric(){let startIndex=this._addIndex*this.valueSize,endIndex=startIndex+this.valueSize;for(let i=startIndex;i<endIndex;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){let startIndex=this._origIndex*this.valueSize,targetIndex=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[targetIndex+i]=this.buffer[startIndex+i]}_select(buffer,dstOffset,srcOffset,t,stride){if(t>=.5)for(let i=0;i!==stride;++i)buffer[dstOffset+i]=buffer[srcOffset+i]}_slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t)}_slerpAdditive(buffer,dstOffset,srcOffset,t,stride){let workOffset=this._workIndex*stride;Quaternion.multiplyQuaternionsFlat(buffer,workOffset,buffer,dstOffset,buffer,srcOffset),Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,workOffset,t)}_lerp(buffer,dstOffset,srcOffset,t,stride){let s=1-t;for(let i=0;i!==stride;++i){let j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t}}_lerpAdditive(buffer,dstOffset,srcOffset,t,stride){for(let i=0;i!==stride;++i){let j=dstOffset+i;buffer[j]=buffer[j]+buffer[srcOffset+i]*t}}},_RESERVED_CHARS_RE="\\[\\]\\.:\\/",_reservedRe=new RegExp("["+_RESERVED_CHARS_RE+"]","g"),_wordChar="[^"+_RESERVED_CHARS_RE+"]",_wordCharOrDot="[^"+_RESERVED_CHARS_RE.replace("\\.","")+"]",_directoryRe=/((?:WC+[\/:])*)/.source.replace("WC",_wordChar),_nodeRe=/(WCOD+)?/.source.replace("WCOD",_wordCharOrDot),_objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_wordChar),_propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_wordChar),_trackRe=new RegExp("^"+_directoryRe+_nodeRe+_objectRe+_propertyRe+"$"),_supportedObjectNames=["material","materials","bones","map"],Composite=class{constructor(targetGroup,path,optionalParsedPath){let parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup,this._bindings=targetGroup.subscribe_(path,parsedPath)}getValue(array,offset){this.bind();let firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];binding!==void 0&&binding.getValue(array,offset)}setValue(array,offset){let bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].setValue(array,offset)}bind(){let bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].bind()}unbind(){let bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].unbind()}},PropertyBinding=class{constructor(rootNode,path,parsedPath){this.path=path,this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path),this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode,this.rootNode=rootNode,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(root,path,parsedPath){return root&&root.isAnimationObjectGroup?new PropertyBinding.Composite(root,path,parsedPath):new PropertyBinding(root,path,parsedPath)}static sanitizeNodeName(name){return name.replace(/\s/g,"_").replace(_reservedRe,"")}static parseTrackName(trackName){let matches=_trackRe.exec(trackName);if(matches===null)throw new Error("PropertyBinding: Cannot parse trackName: "+trackName);let results={nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],propertyIndex:matches[6]},lastDot=results.nodeName&&results.nodeName.lastIndexOf(".");if(lastDot!==void 0&&lastDot!==-1){let objectName=results.nodeName.substring(lastDot+1);_supportedObjectNames.indexOf(objectName)!==-1&&(results.nodeName=results.nodeName.substring(0,lastDot),results.objectName=objectName)}if(results.propertyName===null||results.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+trackName);return results}static findNode(root,nodeName){if(nodeName===void 0||nodeName===""||nodeName==="."||nodeName===-1||nodeName===root.name||nodeName===root.uuid)return root;if(root.skeleton){let bone=root.skeleton.getBoneByName(nodeName);if(bone!==void 0)return bone}if(root.children){let searchNodeSubtree=function(children){for(let i=0;i<children.length;i++){let childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName)return childNode;let result=searchNodeSubtree(childNode.children);if(result)return result}return null},subTreeNode=searchNodeSubtree(root.children);if(subTreeNode)return subTreeNode}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(buffer,offset){buffer[offset]=this.targetObject[this.propertyName]}_getValue_array(buffer,offset){let source=this.resolvedProperty;for(let i=0,n=source.length;i!==n;++i)buffer[offset++]=source[i]}_getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset)}_setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset]}_setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(buffer,offset){let dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++]}_setValue_array_setNeedsUpdate(buffer,offset){let dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){let dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset]}_setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset)}_setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(targetArray,offset){this.bind(),this.getValue(targetArray,offset)}_setValue_unbound(sourceArray,offset){this.bind(),this.setValue(sourceArray,offset)}bind(){let targetObject=this.node,parsedPath=this.parsedPath,objectName=parsedPath.objectName,propertyName=parsedPath.propertyName,propertyIndex=parsedPath.propertyIndex;if(targetObject||(targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode,this.node=targetObject),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!targetObject){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(objectName){let objectIndex=parsedPath.objectIndex;switch(objectName){case"materials":if(!targetObject.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!targetObject.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}targetObject=targetObject.material.materials;break;case"bones":if(!targetObject.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}targetObject=targetObject.skeleton.bones;for(let i=0;i<targetObject.length;i++)if(targetObject[i].name===objectIndex){objectIndex=i;break}break;case"map":if("map"in targetObject){targetObject=targetObject.map;break}if(!targetObject.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!targetObject.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}targetObject=targetObject.material.map;break;default:if(targetObject[objectName]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}targetObject=targetObject[objectName]}if(objectIndex!==void 0){if(targetObject[objectIndex]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,targetObject);return}targetObject=targetObject[objectIndex]}}let nodeProperty=targetObject[propertyName];if(nodeProperty===void 0){let nodeName=parsedPath.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+nodeName+"."+propertyName+" but it wasn't found.",targetObject);return}let versioning=this.Versioning.None;this.targetObject=targetObject,targetObject.needsUpdate!==void 0?versioning=this.Versioning.NeedsUpdate:targetObject.matrixWorldNeedsUpdate!==void 0&&(versioning=this.Versioning.MatrixWorldNeedsUpdate);let bindingType=this.BindingType.Direct;if(propertyIndex!==void 0){if(propertyName==="morphTargetInfluences"){if(!targetObject.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!targetObject.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}targetObject.morphTargetDictionary[propertyIndex]!==void 0&&(propertyIndex=targetObject.morphTargetDictionary[propertyIndex])}bindingType=this.BindingType.ArrayElement,this.resolvedProperty=nodeProperty,this.propertyIndex=propertyIndex}else nodeProperty.fromArray!==void 0&&nodeProperty.toArray!==void 0?(bindingType=this.BindingType.HasFromToArray,this.resolvedProperty=nodeProperty):Array.isArray(nodeProperty)?(bindingType=this.BindingType.EntireArray,this.resolvedProperty=nodeProperty):this.propertyName=propertyName;this.getValue=this.GetterByBindingType[bindingType],this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}};PropertyBinding.Composite=Composite;PropertyBinding.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};PropertyBinding.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};PropertyBinding.prototype.GetterByBindingType=[PropertyBinding.prototype._getValue_direct,PropertyBinding.prototype._getValue_array,PropertyBinding.prototype._getValue_arrayElement,PropertyBinding.prototype._getValue_toArray];PropertyBinding.prototype.SetterByBindingTypeAndVersioning=[[PropertyBinding.prototype._setValue_direct,PropertyBinding.prototype._setValue_direct_setNeedsUpdate,PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_array,PropertyBinding.prototype._setValue_array_setNeedsUpdate,PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_arrayElement,PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_fromArray,PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];var AnimationObjectGroup=class{constructor(){this.isAnimationObjectGroup=!0,this.uuid=generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;let indices={};this._indicesByUUID=indices;for(let i=0,n=arguments.length;i!==n;++i)indices[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};let scope=this;this.stats={objects:{get total(){return scope._objects.length},get inUse(){return this.total-scope.nCachedObjects_}},get bindingsPerObject(){return scope._bindings.length}}}add(){let objects=this._objects,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length,knownObject,nObjects=objects.length,nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){let object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index===void 0){index=nObjects++,indicesByUUID[uuid]=index,objects.push(object);for(let j=0,m=nBindings;j!==m;++j)bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]))}else if(index<nCachedObjects){knownObject=objects[index];let firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index,objects[index]=lastCachedObject,indicesByUUID[uuid]=firstActiveIndex,objects[firstActiveIndex]=object;for(let j=0,m=nBindings;j!==m;++j){let bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],binding=bindingsForPath[index];bindingsForPath[index]=lastCached,binding===void 0&&(binding=new PropertyBinding(object,paths[j],parsedPaths[j])),bindingsForPath[firstActiveIndex]=binding}}else objects[index]!==knownObject&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=nCachedObjects}remove(){let objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){let object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==void 0&&index>=nCachedObjects){let lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index,objects[index]=firstActiveObject,indicesByUUID[uuid]=lastCachedIndex,objects[lastCachedIndex]=object;for(let j=0,m=nBindings;j!==m;++j){let bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive,bindingsForPath[lastCachedIndex]=binding}}}this.nCachedObjects_=nCachedObjects}uncache(){let objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,nCachedObjects=this.nCachedObjects_,nObjects=objects.length;for(let i=0,n=arguments.length;i!==n;++i){let object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==void 0)if(delete indicesByUUID[uuid],index<nCachedObjects){let firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];indicesByUUID[lastCachedObject.uuid]=index,objects[index]=lastCachedObject,indicesByUUID[lastObject.uuid]=firstActiveIndex,objects[firstActiveIndex]=lastObject,objects.pop();for(let j=0,m=nBindings;j!==m;++j){let bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached,bindingsForPath[firstActiveIndex]=last,bindingsForPath.pop()}}else{let lastIndex=--nObjects,lastObject=objects[lastIndex];lastIndex>0&&(indicesByUUID[lastObject.uuid]=index),objects[index]=lastObject,objects.pop();for(let j=0,m=nBindings;j!==m;++j){let bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex],bindingsForPath.pop()}}}this.nCachedObjects_=nCachedObjects}subscribe_(path,parsedPath){let indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path],bindings=this._bindings;if(index!==void 0)return bindings[index];let paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length,indicesByPath[path]=index,paths.push(path),parsedPaths.push(parsedPath),bindings.push(bindingsForPath);for(let i=nCachedObjects,n=objects.length;i!==n;++i){let object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath)}return bindingsForPath}unsubscribe_(path){let indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==void 0){let paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index,bindings[index]=lastBindings,bindings.pop(),parsedPaths[index]=parsedPaths[lastBindingsIndex],parsedPaths.pop(),paths[index]=paths[lastBindingsIndex],paths.pop()}}},AnimationAction=class{constructor(mixer,clip,localRoot=null,blendMode=clip.blendMode){this._mixer=mixer,this._clip=clip,this._localRoot=localRoot,this.blendMode=blendMode;let tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks),interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let i=0;i!==nTracks;++i){let interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant,interpolant.settings=interpolantSettings}this._interpolantSettings=interpolantSettings,this._interpolants=interpolants,this._propertyBindings=new Array(nTracks),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(time){return this._startTime=time,this}setLoop(mode,repetitions){return this.loop=mode,this.repetitions=repetitions,this}setEffectiveWeight(weight){return this.weight=weight,this._effectiveWeight=this.enabled?weight:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(duration){return this._scheduleFading(duration,0,1)}fadeOut(duration){return this._scheduleFading(duration,1,0)}crossFadeFrom(fadeOutAction,duration,warp){if(fadeOutAction.fadeOut(duration),this.fadeIn(duration),warp){let fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1,startEndRatio,duration),this.warp(endStartRatio,1,duration)}return this}crossFadeTo(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp)}stopFading(){let weightInterpolant=this._weightInterpolant;return weightInterpolant!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(weightInterpolant)),this}setEffectiveTimeScale(timeScale){return this.timeScale=timeScale,this._effectiveTimeScale=this.paused?0:timeScale,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(duration){return this.timeScale=this._clip.duration/duration,this.stopWarping()}syncWith(action){return this.time=action.time,this.timeScale=action.timeScale,this.stopWarping()}halt(duration){return this.warp(this._effectiveTimeScale,0,duration)}warp(startTimeScale,endTimeScale,duration){let mixer=this._mixer,now2=mixer.time,timeScale=this.timeScale,interpolant=this._timeScaleInterpolant;interpolant===null&&(interpolant=mixer._lendControlInterpolant(),this._timeScaleInterpolant=interpolant);let times=interpolant.parameterPositions,values=interpolant.sampleValues;return times[0]=now2,times[1]=now2+duration,values[0]=startTimeScale/timeScale,values[1]=endTimeScale/timeScale,this}stopWarping(){let timeScaleInterpolant=this._timeScaleInterpolant;return timeScaleInterpolant!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(timeScaleInterpolant)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(time,deltaTime,timeDirection,accuIndex){if(!this.enabled){this._updateWeight(time);return}let startTime=this._startTime;if(startTime!==null){let timeRunning=(time-startTime)*timeDirection;timeRunning<0||timeDirection===0?deltaTime=0:(this._startTime=null,deltaTime=timeDirection*timeRunning)}deltaTime*=this._updateTimeScale(time);let clipTime=this._updateTime(deltaTime),weight=this._updateWeight(time);if(weight>0){let interpolants=this._interpolants,propertyMixers=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let j=0,m=interpolants.length;j!==m;++j)interpolants[j].evaluate(clipTime),propertyMixers[j].accumulateAdditive(weight);break;case NormalAnimationBlendMode:default:for(let j=0,m=interpolants.length;j!==m;++j)interpolants[j].evaluate(clipTime),propertyMixers[j].accumulate(accuIndex,weight)}}}_updateWeight(time){let weight=0;if(this.enabled){weight=this.weight;let interpolant=this._weightInterpolant;if(interpolant!==null){let interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue,time>interpolant.parameterPositions[1]&&(this.stopFading(),interpolantValue===0&&(this.enabled=!1))}}return this._effectiveWeight=weight,weight}_updateTimeScale(time){let timeScale=0;if(!this.paused){timeScale=this.timeScale;let interpolant=this._timeScaleInterpolant;if(interpolant!==null){let interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue,time>interpolant.parameterPositions[1]&&(this.stopWarping(),timeScale===0?this.paused=!0:this.timeScale=timeScale)}}return this._effectiveTimeScale=timeScale,timeScale}_updateTime(deltaTime){let duration=this._clip.duration,loop=this.loop,time=this.time+deltaTime,loopCount=this._loopCount,pingPong=loop===LoopPingPong;if(deltaTime===0)return loopCount===-1?time:pingPong&&(loopCount&1)===1?duration-time:time;if(loop===LoopOnce){loopCount===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(time>=duration)time=duration;else if(time<0)time=0;else{this.time=time;break handle_stop}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=time,this._mixer.dispatchEvent({type:"finished",action:this,direction:deltaTime<0?-1:1})}}else{if(loopCount===-1&&(deltaTime>=0?(loopCount=0,this._setEndings(!0,this.repetitions===0,pingPong)):this._setEndings(this.repetitions===0,!0,pingPong)),time>=duration||time<0){let loopDelta=Math.floor(time/duration);time-=duration*loopDelta,loopCount+=Math.abs(loopDelta);let pending=this.repetitions-loopCount;if(pending<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,time=deltaTime>0?duration:0,this.time=time,this._mixer.dispatchEvent({type:"finished",action:this,direction:deltaTime>0?1:-1});else{if(pending===1){let atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong)}else this._setEndings(!1,!1,pingPong);this._loopCount=loopCount,this.time=time,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta})}}else this.time=time;if(pingPong&&(loopCount&1)===1)return duration-time}return time}_setEndings(atStart,atEnd,pingPong){let settings=this._interpolantSettings;pingPong?(settings.endingStart=ZeroSlopeEnding,settings.endingEnd=ZeroSlopeEnding):(atStart?settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding:settings.endingStart=WrapAroundEnding,atEnd?settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding:settings.endingEnd=WrapAroundEnding)}_scheduleFading(duration,weightNow,weightThen){let mixer=this._mixer,now2=mixer.time,interpolant=this._weightInterpolant;interpolant===null&&(interpolant=mixer._lendControlInterpolant(),this._weightInterpolant=interpolant);let times=interpolant.parameterPositions,values=interpolant.sampleValues;return times[0]=now2,values[0]=weightNow,times[1]=now2+duration,values[1]=weightThen,this}},_controlInterpolantsResultBuffer=new Float32Array(1),AnimationMixer=class extends EventDispatcher{constructor(root){super(),this._root=root,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(action,prototypeAction){let root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName,bindingsByName=bindingsByRoot[rootUuid];bindingsByName===void 0&&(bindingsByName={},bindingsByRoot[rootUuid]=bindingsByName);for(let i=0;i!==nTracks;++i){let track=tracks[i],trackName=track.name,binding=bindingsByName[trackName];if(binding!==void 0)++binding.referenceCount,bindings[i]=binding;else{if(binding=bindings[i],binding!==void 0){binding._cacheIndex===null&&(++binding.referenceCount,this._addInactiveBinding(binding,rootUuid,trackName));continue}let path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize()),++binding.referenceCount,this._addInactiveBinding(binding,rootUuid,trackName),bindings[i]=binding}interpolants[i].resultBuffer=binding.buffer}}_activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){let rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]),this._addInactiveAction(action,clipUuid,rootUuid)}let bindings=action._propertyBindings;for(let i=0,n=bindings.length;i!==n;++i){let binding=bindings[i];binding.useCount++===0&&(this._lendBinding(binding),binding.saveOriginalState())}this._lendAction(action)}}_deactivateAction(action){if(this._isActiveAction(action)){let bindings=action._propertyBindings;for(let i=0,n=bindings.length;i!==n;++i){let binding=bindings[i];--binding.useCount===0&&(binding.restoreOriginalState(),this._takeBackBinding(binding))}this._takeBackAction(action)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;let scope=this;this.stats={actions:{get total(){return scope._actions.length},get inUse(){return scope._nActiveActions}},bindings:{get total(){return scope._bindings.length},get inUse(){return scope._nActiveBindings}},controlInterpolants:{get total(){return scope._controlInterpolants.length},get inUse(){return scope._nActiveControlInterpolants}}}}_isActiveAction(action){let index=action._cacheIndex;return index!==null&&index<this._nActiveActions}_addInactiveAction(action,clipUuid,rootUuid){let actions=this._actions,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip===void 0)actionsForClip={knownActions:[action],actionByRoot:{}},action._byClipCacheIndex=0,actionsByClip[clipUuid]=actionsForClip;else{let knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length,knownActions.push(action)}action._cacheIndex=actions.length,actions.push(action),actionsForClip.actionByRoot[rootUuid]=action}_removeInactiveAction(action){let actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex,actions[cacheIndex]=lastInactiveAction,actions.pop(),action._cacheIndex=null;let clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex,knownActionsForClip[byClipCacheIndex]=lastKnownAction,knownActionsForClip.pop(),action._byClipCacheIndex=null;let actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid],knownActionsForClip.length===0&&delete actionsByClip[clipUuid],this._removeInactiveBindingsForAction(action)}_removeInactiveBindingsForAction(action){let bindings=action._propertyBindings;for(let i=0,n=bindings.length;i!==n;++i){let binding=bindings[i];--binding.referenceCount===0&&this._removeInactiveBinding(binding)}}_lendAction(action){let actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex,actions[lastActiveIndex]=action,firstInactiveAction._cacheIndex=prevIndex,actions[prevIndex]=firstInactiveAction}_takeBackAction(action){let actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex,actions[firstInactiveIndex]=action,lastActiveAction._cacheIndex=prevIndex,actions[prevIndex]=lastActiveAction}_addInactiveBinding(binding,rootUuid,trackName){let bindingsByRoot=this._bindingsByRootAndName,bindings=this._bindings,bindingByName=bindingsByRoot[rootUuid];bindingByName===void 0&&(bindingByName={},bindingsByRoot[rootUuid]=bindingByName),bindingByName[trackName]=binding,binding._cacheIndex=bindings.length,bindings.push(binding)}_removeInactiveBinding(binding){let bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex,bindings[cacheIndex]=lastInactiveBinding,bindings.pop(),delete bindingByName[trackName],Object.keys(bindingByName).length===0&&delete bindingsByRoot[rootUuid]}_lendBinding(binding){let bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex,bindings[lastActiveIndex]=binding,firstInactiveBinding._cacheIndex=prevIndex,bindings[prevIndex]=firstInactiveBinding}_takeBackBinding(binding){let bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex,bindings[firstInactiveIndex]=binding,lastActiveBinding._cacheIndex=prevIndex,bindings[prevIndex]=lastActiveBinding}_lendControlInterpolant(){let interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++,interpolant=interpolants[lastActiveIndex];return interpolant===void 0&&(interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,_controlInterpolantsResultBuffer),interpolant.__cacheIndex=lastActiveIndex,interpolants[lastActiveIndex]=interpolant),interpolant}_takeBackControlInterpolant(interpolant){let interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex,interpolants[firstInactiveIndex]=interpolant,lastActiveInterpolant.__cacheIndex=prevIndex,interpolants[prevIndex]=lastActiveInterpolant}clipAction(clip,optionalRoot,blendMode){let root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip=="string"?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject!==null?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid],prototypeAction=null;if(blendMode===void 0&&(clipObject!==null?blendMode=clipObject.blendMode:blendMode=NormalAnimationBlendMode),actionsForClip!==void 0){let existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==void 0&&existingAction.blendMode===blendMode)return existingAction;prototypeAction=actionsForClip.knownActions[0],clipObject===null&&(clipObject=prototypeAction._clip)}if(clipObject===null)return null;let newAction=new AnimationAction(this,clipObject,optionalRoot,blendMode);return this._bindAction(newAction,prototypeAction),this._addInactiveAction(newAction,clipUuid,rootUuid),newAction}existingAction(clip,optionalRoot){let root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip=="string"?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];return actionsForClip!==void 0&&actionsForClip.actionByRoot[rootUuid]||null}stopAllAction(){let actions=this._actions,nActions=this._nActiveActions;for(let i=nActions-1;i>=0;--i)actions[i].stop();return this}update(deltaTime){deltaTime*=this.timeScale;let actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;for(let i=0;i!==nActions;++i)actions[i]._update(time,deltaTime,timeDirection,accuIndex);let bindings=this._bindings,nBindings=this._nActiveBindings;for(let i=0;i!==nBindings;++i)bindings[i].apply(accuIndex);return this}setTime(timeInSeconds){this.time=0;for(let i=0;i<this._actions.length;i++)this._actions[i].time=0;return this.update(timeInSeconds)}getRoot(){return this._root}uncacheClip(clip){let actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==void 0){let actionsToRemove=actionsForClip.knownActions;for(let i=0,n=actionsToRemove.length;i!==n;++i){let action=actionsToRemove[i];this._deactivateAction(action);let cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null,action._byClipCacheIndex=null,lastInactiveAction._cacheIndex=cacheIndex,actions[cacheIndex]=lastInactiveAction,actions.pop(),this._removeInactiveBindingsForAction(action)}delete actionsByClip[clipUuid]}}uncacheRoot(root){let rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(let clipUuid in actionsByClip){let actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];action!==void 0&&(this._deactivateAction(action),this._removeInactiveAction(action))}let bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==void 0)for(let trackName in bindingByName){let binding=bindingByName[trackName];binding.restoreOriginalState(),this._removeInactiveBinding(binding)}}uncacheAction(clip,optionalRoot){let action=this.existingAction(clip,optionalRoot);action!==null&&(this._deactivateAction(action),this._removeInactiveAction(action))}},Uniform=class{constructor(value){this.value=value}clone(){return new Uniform(this.value.clone===void 0?this.value:this.value.clone())}},id=0,UniformsGroup=class extends EventDispatcher{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:id++}),this.name="",this.usage=StaticDrawUsage,this.uniforms=[]}add(uniform){return this.uniforms.push(uniform),this}remove(uniform){let index=this.uniforms.indexOf(uniform);return index!==-1&&this.uniforms.splice(index,1),this}setName(name){return this.name=name,this}setUsage(value){return this.usage=value,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(source){this.name=source.name,this.usage=source.usage;let uniformsSource=source.uniforms;this.uniforms.length=0;for(let i=0,l=uniformsSource.length;i<l;i++)this.uniforms.push(uniformsSource[i].clone());return this}clone(){return new this.constructor().copy(this)}},InstancedInterleavedBuffer=class extends InterleavedBuffer{constructor(array,stride,meshPerAttribute=1){super(array,stride),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=meshPerAttribute}copy(source){return super.copy(source),this.meshPerAttribute=source.meshPerAttribute,this}clone(data){let ib=super.clone(data);return ib.meshPerAttribute=this.meshPerAttribute,ib}toJSON(data){let json=super.toJSON(data);return json.isInstancedInterleavedBuffer=!0,json.meshPerAttribute=this.meshPerAttribute,json}},GLBufferAttribute=class{constructor(buffer,type,itemSize,elementSize,count){this.isGLBufferAttribute=!0,this.buffer=buffer,this.type=type,this.itemSize=itemSize,this.elementSize=elementSize,this.count=count,this.version=0}set needsUpdate(value){value===!0&&this.version++}setBuffer(buffer){return this.buffer=buffer,this}setType(type,elementSize){return this.type=type,this.elementSize=elementSize,this}setItemSize(itemSize){return this.itemSize=itemSize,this}setCount(count){return this.count=count,this}},Raycaster=class{constructor(origin,direction,near=0,far=1/0){this.ray=new Ray(origin,direction),this.near=near,this.far=far,this.camera=null,this.layers=new Layers,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(origin,direction){this.ray.set(origin,direction)}setFromCamera(coords,camera){camera.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(camera.matrixWorld),this.ray.direction.set(coords.x,coords.y,.5).unproject(camera).sub(this.ray.origin).normalize(),this.camera=camera):camera.isOrthographicCamera?(this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera),this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld),this.camera=camera):console.error("THREE.Raycaster: Unsupported camera type: "+camera.type)}intersectObject(object,recursive=!0,intersects2=[]){return intersectObject(object,this,intersects2,recursive),intersects2.sort(ascSort),intersects2}intersectObjects(objects,recursive=!0,intersects2=[]){for(let i=0,l=objects.length;i<l;i++)intersectObject(objects[i],this,intersects2,recursive);return intersects2.sort(ascSort),intersects2}};function ascSort(a,b){return a.distance-b.distance}function intersectObject(object,raycaster,intersects2,recursive){if(object.layers.test(raycaster.layers)&&object.raycast(raycaster,intersects2),recursive===!0){let children=object.children;for(let i=0,l=children.length;i<l;i++)intersectObject(children[i],raycaster,intersects2,!0)}}var Spherical=class{constructor(radius=1,phi=0,theta=0){return this.radius=radius,this.phi=phi,this.theta=theta,this}set(radius,phi,theta){return this.radius=radius,this.phi=phi,this.theta=theta,this}copy(other){return this.radius=other.radius,this.phi=other.phi,this.theta=other.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z)}setFromCartesianCoords(x,y,z){return this.radius=Math.sqrt(x*x+y*y+z*z),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(x,z),this.phi=Math.acos(clamp(y/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}},Cylindrical=class{constructor(radius=1,theta=0,y=0){return this.radius=radius,this.theta=theta,this.y=y,this}set(radius,theta,y){return this.radius=radius,this.theta=theta,this.y=y,this}copy(other){return this.radius=other.radius,this.theta=other.theta,this.y=other.y,this}setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z)}setFromCartesianCoords(x,y,z){return this.radius=Math.sqrt(x*x+z*z),this.theta=Math.atan2(x,z),this.y=y,this}clone(){return new this.constructor().copy(this)}},_vector$4=new Vector2,Box2=class{constructor(min=new Vector2(1/0,1/0),max=new Vector2(-1/0,-1/0)){this.isBox2=!0,this.min=min,this.max=max}set(min,max){return this.min.copy(min),this.max.copy(max),this}setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++)this.expandByPoint(points[i]);return this}setFromCenterAndSize(center,size){let halfSize=_vector$4.copy(size).multiplyScalar(.5);return this.min.copy(center).sub(halfSize),this.max.copy(center).add(halfSize),this}clone(){return new this.constructor().copy(this)}copy(box2){return this.min.copy(box2.min),this.max.copy(box2.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(target){return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(target){return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min)}expandByPoint(point2){return this.min.min(point2),this.max.max(point2),this}expandByVector(vector){return this.min.sub(vector),this.max.add(vector),this}expandByScalar(scalar){return this.min.addScalar(-scalar),this.max.addScalar(scalar),this}containsPoint(point2){return!(point2.x<this.min.x||point2.x>this.max.x||point2.y<this.min.y||point2.y>this.max.y)}containsBox(box2){return this.min.x<=box2.min.x&&box2.max.x<=this.max.x&&this.min.y<=box2.min.y&&box2.max.y<=this.max.y}getParameter(point2,target){return target.set((point2.x-this.min.x)/(this.max.x-this.min.x),(point2.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(box2){return!(box2.max.x<this.min.x||box2.min.x>this.max.x||box2.max.y<this.min.y||box2.min.y>this.max.y)}clampPoint(point2,target){return target.copy(point2).clamp(this.min,this.max)}distanceToPoint(point2){return _vector$4.copy(point2).clamp(this.min,this.max).sub(point2).length()}intersect(box2){return this.min.max(box2.min),this.max.min(box2.max),this}union(box2){return this.min.min(box2.min),this.max.max(box2.max),this}translate(offset){return this.min.add(offset),this.max.add(offset),this}equals(box2){return box2.min.equals(this.min)&&box2.max.equals(this.max)}},_startP=new Vector3,_startEnd=new Vector3,Line3=class{constructor(start=new Vector3,end=new Vector3){this.start=start,this.end=end}set(start,end){return this.start.copy(start),this.end.copy(end),this}copy(line2){return this.start.copy(line2.start),this.end.copy(line2.end),this}getCenter(target){return target.addVectors(this.start,this.end).multiplyScalar(.5)}delta(target){return target.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,target){return this.delta(target).multiplyScalar(t).add(this.start)}closestPointToPointParameter(point2,clampToLine){_startP.subVectors(point2,this.start),_startEnd.subVectors(this.end,this.start);let startEnd2=_startEnd.dot(_startEnd),t=_startEnd.dot(_startP)/startEnd2;return clampToLine&&(t=clamp(t,0,1)),t}closestPointToPoint(point2,clampToLine,target){let t=this.closestPointToPointParameter(point2,clampToLine);return this.delta(target).multiplyScalar(t).add(this.start)}applyMatrix4(matrix){return this.start.applyMatrix4(matrix),this.end.applyMatrix4(matrix),this}equals(line2){return line2.start.equals(this.start)&&line2.end.equals(this.end)}clone(){return new this.constructor().copy(this)}},_vector$3=new Vector3,SpotLightHelper=class extends Object3D{constructor(light,color){super(),this.light=light,this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1,this.color=color,this.type="SpotLightHelper";let geometry=new BufferGeometry,positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let i=0,j=1,l=32;i<l;i++,j++){let p1=i/l*Math.PI*2,p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1)}geometry.setAttribute("position",new Float32BufferAttribute(positions,3));let material=new LineBasicMaterial({fog:!1,toneMapped:!1});this.cone=new LineSegments(geometry,material),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1);let coneLength=this.light.distance?this.light.distance:1e3,coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength),_vector$3.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(_vector$3),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}},_vector$2=new Vector3,_boneMatrix=new Matrix4,_matrixWorldInv=new Matrix4,SkeletonHelper=class extends LineSegments{constructor(object){let bones=getBoneList(object),geometry=new BufferGeometry,vertices=[],colors=[],color1=new Color(0,0,1),color2=new Color(0,1,0);for(let i=0;i<bones.length;i++){let bone=bones[i];bone.parent&&bone.parent.isBone&&(vertices.push(0,0,0),vertices.push(0,0,0),colors.push(color1.r,color1.g,color1.b),colors.push(color2.r,color2.g,color2.b))}geometry.setAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.setAttribute("color",new Float32BufferAttribute(colors,3));let material=new LineBasicMaterial({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(geometry,material),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=object,this.bones=bones,this.matrix=object.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(force){let bones=this.bones,geometry=this.geometry,position=geometry.getAttribute("position");_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let i=0,j=0;i<bones.length;i++){let bone=bones[i];bone.parent&&bone.parent.isBone&&(_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.matrixWorld),_vector$2.setFromMatrixPosition(_boneMatrix),position.setXYZ(j,_vector$2.x,_vector$2.y,_vector$2.z),_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.parent.matrixWorld),_vector$2.setFromMatrixPosition(_boneMatrix),position.setXYZ(j+1,_vector$2.x,_vector$2.y,_vector$2.z),j+=2)}geometry.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(force)}dispose(){this.geometry.dispose(),this.material.dispose()}};function getBoneList(object){let boneList=[];object.isBone===!0&&boneList.push(object);for(let i=0;i<object.children.length;i++)boneList.push.apply(boneList,getBoneList(object.children[i]));return boneList}var PointLightHelper=class extends Mesh{constructor(light,sphereSize,color){let geometry=new SphereGeometry(sphereSize,4,2),material=new MeshBasicMaterial({wireframe:!0,fog:!1,toneMapped:!1});super(geometry,material),this.light=light,this.color=color,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}},_vector$1=new Vector3,_color1=new Color,_color2=new Color,HemisphereLightHelper=class extends Object3D{constructor(light,size,color){super(),this.light=light,this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1,this.color=color,this.type="HemisphereLightHelper";let geometry=new OctahedronGeometry(size);geometry.rotateY(Math.PI*.5),this.material=new MeshBasicMaterial({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);let position=geometry.getAttribute("position"),colors=new Float32Array(position.count*3);geometry.setAttribute("color",new BufferAttribute(colors,3)),this.add(new Mesh(geometry,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){let mesh=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{let colors=mesh.geometry.getAttribute("color");_color1.copy(this.light.color),_color2.copy(this.light.groundColor);for(let i=0,l=colors.count;i<l;i++){let color=i<l/2?_color1:_color2;colors.setXYZ(i,color.r,color.g,color.b)}colors.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate())}},GridHelper=class extends LineSegments{constructor(size=10,divisions=10,color1=4473924,color2=8947848){color1=new Color(color1),color2=new Color(color2);let center=divisions/2,step=size/divisions,halfSize=size/2,vertices=[],colors=[];for(let i=0,j=0,k=-halfSize;i<=divisions;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k),vertices.push(k,0,-halfSize,k,0,halfSize);let color=i===center?color1:color2;color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3}let geometry=new BufferGeometry;geometry.setAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.setAttribute("color",new Float32BufferAttribute(colors,3));let material=new LineBasicMaterial({vertexColors:!0,toneMapped:!1});super(geometry,material),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},PolarGridHelper=class extends LineSegments{constructor(radius=10,sectors=16,rings2=8,divisions=64,color1=4473924,color2=8947848){color1=new Color(color1),color2=new Color(color2);let vertices=[],colors=[];if(sectors>1)for(let i=0;i<sectors;i++){let v=i/sectors*(Math.PI*2),x=Math.sin(v)*radius,z=Math.cos(v)*radius;vertices.push(0,0,0),vertices.push(x,0,z);let color=i&1?color1:color2;colors.push(color.r,color.g,color.b),colors.push(color.r,color.g,color.b)}for(let i=0;i<rings2;i++){let color=i&1?color1:color2,r=radius-radius/rings2*i;for(let j=0;j<divisions;j++){let v=j/divisions*(Math.PI*2),x=Math.sin(v)*r,z=Math.cos(v)*r;vertices.push(x,0,z),colors.push(color.r,color.g,color.b),v=(j+1)/divisions*(Math.PI*2),x=Math.sin(v)*r,z=Math.cos(v)*r,vertices.push(x,0,z),colors.push(color.r,color.g,color.b)}}let geometry=new BufferGeometry;geometry.setAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.setAttribute("color",new Float32BufferAttribute(colors,3));let material=new LineBasicMaterial({vertexColors:!0,toneMapped:!1});super(geometry,material),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}},_v1=new Vector3,_v2=new Vector3,_v3=new Vector3,DirectionalLightHelper=class extends Object3D{constructor(light,size,color){super(),this.light=light,this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1,this.color=color,this.type="DirectionalLightHelper",size===void 0&&(size=1);let geometry=new BufferGeometry;geometry.setAttribute("position",new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));let material=new LineBasicMaterial({fog:!1,toneMapped:!1});this.lightPlane=new Line(geometry,material),this.add(this.lightPlane),geometry=new BufferGeometry,geometry.setAttribute("position",new Float32BufferAttribute([0,0,0,0,0,1],3)),this.targetLine=new Line(geometry,material),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),_v1.setFromMatrixPosition(this.light.matrixWorld),_v2.setFromMatrixPosition(this.light.target.matrixWorld),_v3.subVectors(_v2,_v1),this.lightPlane.lookAt(_v2),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(_v2),this.targetLine.scale.z=_v3.length()}},_vector=new Vector3,_camera=new Camera,CameraHelper=class extends LineSegments{constructor(camera){let geometry=new BufferGeometry,material=new LineBasicMaterial({color:16777215,vertexColors:!0,toneMapped:!1}),vertices=[],colors=[],pointMap={};addLine("n1","n2"),addLine("n2","n4"),addLine("n4","n3"),addLine("n3","n1"),addLine("f1","f2"),addLine("f2","f4"),addLine("f4","f3"),addLine("f3","f1"),addLine("n1","f1"),addLine("n2","f2"),addLine("n3","f3"),addLine("n4","f4"),addLine("p","n1"),addLine("p","n2"),addLine("p","n3"),addLine("p","n4"),addLine("u1","u2"),addLine("u2","u3"),addLine("u3","u1"),addLine("c","t"),addLine("p","c"),addLine("cn1","cn2"),addLine("cn3","cn4"),addLine("cf1","cf2"),addLine("cf3","cf4");function addLine(a,b){addPoint(a),addPoint(b)}function addPoint(id2){vertices.push(0,0,0),colors.push(0,0,0),pointMap[id2]===void 0&&(pointMap[id2]=[]),pointMap[id2].push(vertices.length/3-1)}geometry.setAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.setAttribute("color",new Float32BufferAttribute(colors,3)),super(geometry,material),this.type="CameraHelper",this.camera=camera,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=camera.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=pointMap,this.update();let colorFrustum=new Color(16755200),colorCone=new Color(16711680),colorUp=new Color(43775),colorTarget=new Color(16777215),colorCross=new Color(3355443);this.setColors(colorFrustum,colorCone,colorUp,colorTarget,colorCross)}setColors(frustum,cone2,up,target,cross){let colorAttribute=this.geometry.getAttribute("color");colorAttribute.setXYZ(0,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(1,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(2,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(3,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(4,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(5,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(6,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(7,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(8,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(9,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(10,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(11,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(12,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(13,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(14,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(15,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(16,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(17,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(18,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(19,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(20,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(21,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(22,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(23,frustum.r,frustum.g,frustum.b),colorAttribute.setXYZ(24,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(25,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(26,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(27,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(28,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(29,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(30,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(31,cone2.r,cone2.g,cone2.b),colorAttribute.setXYZ(32,up.r,up.g,up.b),colorAttribute.setXYZ(33,up.r,up.g,up.b),colorAttribute.setXYZ(34,up.r,up.g,up.b),colorAttribute.setXYZ(35,up.r,up.g,up.b),colorAttribute.setXYZ(36,up.r,up.g,up.b),colorAttribute.setXYZ(37,up.r,up.g,up.b),colorAttribute.setXYZ(38,target.r,target.g,target.b),colorAttribute.setXYZ(39,target.r,target.g,target.b),colorAttribute.setXYZ(40,cross.r,cross.g,cross.b),colorAttribute.setXYZ(41,cross.r,cross.g,cross.b),colorAttribute.setXYZ(42,cross.r,cross.g,cross.b),colorAttribute.setXYZ(43,cross.r,cross.g,cross.b),colorAttribute.setXYZ(44,cross.r,cross.g,cross.b),colorAttribute.setXYZ(45,cross.r,cross.g,cross.b),colorAttribute.setXYZ(46,cross.r,cross.g,cross.b),colorAttribute.setXYZ(47,cross.r,cross.g,cross.b),colorAttribute.setXYZ(48,cross.r,cross.g,cross.b),colorAttribute.setXYZ(49,cross.r,cross.g,cross.b),colorAttribute.needsUpdate=!0}update(){let geometry=this.geometry,pointMap=this.pointMap,w=1,h=1;_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),setPoint("c",pointMap,geometry,_camera,0,0,-1),setPoint("t",pointMap,geometry,_camera,0,0,1),setPoint("n1",pointMap,geometry,_camera,-w,-h,-1),setPoint("n2",pointMap,geometry,_camera,w,-h,-1),setPoint("n3",pointMap,geometry,_camera,-w,h,-1),setPoint("n4",pointMap,geometry,_camera,w,h,-1),setPoint("f1",pointMap,geometry,_camera,-w,-h,1),setPoint("f2",pointMap,geometry,_camera,w,-h,1),setPoint("f3",pointMap,geometry,_camera,-w,h,1),setPoint("f4",pointMap,geometry,_camera,w,h,1),setPoint("u1",pointMap,geometry,_camera,w*.7,h*1.1,-1),setPoint("u2",pointMap,geometry,_camera,-w*.7,h*1.1,-1),setPoint("u3",pointMap,geometry,_camera,0,h*2,-1),setPoint("cf1",pointMap,geometry,_camera,-w,0,1),setPoint("cf2",pointMap,geometry,_camera,w,0,1),setPoint("cf3",pointMap,geometry,_camera,0,-h,1),setPoint("cf4",pointMap,geometry,_camera,0,h,1),setPoint("cn1",pointMap,geometry,_camera,-w,0,-1),setPoint("cn2",pointMap,geometry,_camera,w,0,-1),setPoint("cn3",pointMap,geometry,_camera,0,-h,-1),setPoint("cn4",pointMap,geometry,_camera,0,h,-1),geometry.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}};function setPoint(point2,pointMap,geometry,camera,x,y,z){_vector.set(x,y,z).unproject(camera);let points=pointMap[point2];if(points!==void 0){let position=geometry.getAttribute("position");for(let i=0,l=points.length;i<l;i++)position.setXYZ(points[i],_vector.x,_vector.y,_vector.z)}}var _box=new Box3,BoxHelper=class extends LineSegments{constructor(object,color=16776960){let indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),positions=new Float32Array(8*3),geometry=new BufferGeometry;geometry.setIndex(new BufferAttribute(indices,1)),geometry.setAttribute("position",new BufferAttribute(positions,3)),super(geometry,new LineBasicMaterial({color,toneMapped:!1})),this.object=object,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(object){if(object!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&_box.setFromObject(this.object),_box.isEmpty())return;let min=_box.min,max=_box.max,position=this.geometry.attributes.position,array=position.array;array[0]=max.x,array[1]=max.y,array[2]=max.z,array[3]=min.x,array[4]=max.y,array[5]=max.z,array[6]=min.x,array[7]=min.y,array[8]=max.z,array[9]=max.x,array[10]=min.y,array[11]=max.z,array[12]=max.x,array[13]=max.y,array[14]=min.z,array[15]=min.x,array[16]=max.y,array[17]=min.z,array[18]=min.x,array[19]=min.y,array[20]=min.z,array[21]=max.x,array[22]=min.y,array[23]=min.z,position.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(object){return this.object=object,this.update(),this}copy(source,recursive){return super.copy(source,recursive),this.object=source.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}},Box3Helper=class extends LineSegments{constructor(box2,color=16776960){let indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),positions=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],geometry=new BufferGeometry;geometry.setIndex(new BufferAttribute(indices,1)),geometry.setAttribute("position",new Float32BufferAttribute(positions,3)),super(geometry,new LineBasicMaterial({color,toneMapped:!1})),this.box=box2,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(force){let box2=this.box;box2.isEmpty()||(box2.getCenter(this.position),box2.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(force))}dispose(){this.geometry.dispose(),this.material.dispose()}},PlaneHelper=class extends Line{constructor(plane,size=1,hex=16776960){let color=hex,positions=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],geometry=new BufferGeometry;geometry.setAttribute("position",new Float32BufferAttribute(positions,3)),geometry.computeBoundingSphere(),super(geometry,new LineBasicMaterial({color,toneMapped:!1})),this.type="PlaneHelper",this.plane=plane,this.size=size;let positions2=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],geometry2=new BufferGeometry;geometry2.setAttribute("position",new Float32BufferAttribute(positions2,3)),geometry2.computeBoundingSphere(),this.add(new Mesh(geometry2,new MeshBasicMaterial({color,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(force){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(force)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}},_axis=new Vector3,_lineGeometry,_coneGeometry,ArrowHelper=class extends Object3D{constructor(dir=new Vector3(0,0,1),origin=new Vector3(0,0,0),length=1,color=16776960,headLength=length*.2,headWidth=headLength*.2){super(),this.type="ArrowHelper",_lineGeometry===void 0&&(_lineGeometry=new BufferGeometry,_lineGeometry.setAttribute("position",new Float32BufferAttribute([0,0,0,0,1,0],3)),_coneGeometry=new CylinderGeometry(0,.5,1,5,1),_coneGeometry.translate(0,-.5,0)),this.position.copy(origin),this.line=new Line(_lineGeometry,new LineBasicMaterial({color,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(dir),this.setLength(length,headLength,headWidth)}setDirection(dir){if(dir.y>.99999)this.quaternion.set(0,0,0,1);else if(dir.y<-.99999)this.quaternion.set(1,0,0,0);else{_axis.set(dir.z,0,-dir.x).normalize();let radians=Math.acos(dir.y);this.quaternion.setFromAxisAngle(_axis,radians)}}setLength(length,headLength=length*.2,headWidth=headLength*.2){this.line.scale.set(1,Math.max(1e-4,length-headLength),1),this.line.updateMatrix(),this.cone.scale.set(headWidth,headLength,headWidth),this.cone.position.y=length,this.cone.updateMatrix()}setColor(color){this.line.material.color.set(color),this.cone.material.color.set(color)}copy(source){return super.copy(source,!1),this.line.copy(source.line),this.cone.copy(source.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}},AxesHelper=class extends LineSegments{constructor(size=1){let vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size],colors=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],geometry=new BufferGeometry;geometry.setAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.setAttribute("color",new Float32BufferAttribute(colors,3));let material=new LineBasicMaterial({vertexColors:!0,toneMapped:!1});super(geometry,material),this.type="AxesHelper"}setColors(xAxisColor,yAxisColor,zAxisColor){let color=new Color,array=this.geometry.attributes.color.array;return color.set(xAxisColor),color.toArray(array,0),color.toArray(array,3),color.set(yAxisColor),color.toArray(array,6),color.toArray(array,9),color.set(zAxisColor),color.toArray(array,12),color.toArray(array,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}},ShapePath=class{constructor(){this.type="ShapePath",this.color=new Color,this.subPaths=[],this.currentPath=null}moveTo(x,y){return this.currentPath=new Path,this.subPaths.push(this.currentPath),this.currentPath.moveTo(x,y),this}lineTo(x,y){return this.currentPath.lineTo(x,y),this}quadraticCurveTo(aCPx,aCPy,aX,aY){return this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY),this}bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){return this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY),this}splineThru(pts){return this.currentPath.splineThru(pts),this}toShapes(isCCW){function toShapesNoHoles(inSubpaths){let shapes2=[];for(let i=0,l=inSubpaths.length;i<l;i++){let tmpPath2=inSubpaths[i],tmpShape2=new Shape;tmpShape2.curves=tmpPath2.curves,shapes2.push(tmpShape2)}return shapes2}function isPointInsidePolygon(inPt,inPolygon){let polyLen=inPolygon.length,inside=!1;for(let p=polyLen-1,q=0;q<polyLen;p=q++){let edgeLowPt=inPolygon[p],edgeHighPt=inPolygon[q],edgeDx=edgeHighPt.x-edgeLowPt.x,edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){if(edgeDy<0&&(edgeLowPt=inPolygon[q],edgeDx=-edgeDx,edgeHighPt=inPolygon[p],edgeDy=-edgeDy),inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return!0}else{let perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return!0;if(perpEdge<0)continue;inside=!inside}}else{if(inPt.y!==edgeLowPt.y)continue;if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return!0}}return inside}let isClockWise=ShapeUtils.isClockWise,subPaths=this.subPaths;if(subPaths.length===0)return[];let solid,tmpPath,tmpShape,shapes=[];if(subPaths.length===1)return tmpPath=subPaths[0],tmpShape=new Shape,tmpShape.curves=tmpPath.curves,shapes.push(tmpShape),shapes;let holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;let betterShapeHoles=[],newShapes=[],newShapeHoles=[],mainIdx=0,tmpPoints;newShapes[mainIdx]=void 0,newShapeHoles[mainIdx]=[];for(let i=0,l=subPaths.length;i<l;i++)tmpPath=subPaths[i],tmpPoints=tmpPath.getPoints(),solid=isClockWise(tmpPoints),solid=isCCW?!solid:solid,solid?(!holesFirst&&newShapes[mainIdx]&&mainIdx++,newShapes[mainIdx]={s:new Shape,p:tmpPoints},newShapes[mainIdx].s.curves=tmpPath.curves,holesFirst&&mainIdx++,newShapeHoles[mainIdx]=[]):newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){let ambiguous=!1,toChange=0;for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++)betterShapeHoles[sIdx]=[];for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){let sho=newShapeHoles[sIdx];for(let hIdx=0;hIdx<sho.length;hIdx++){let ho=sho[hIdx],hole_unassigned=!0;for(let s2Idx=0;s2Idx<newShapes.length;s2Idx++)isPointInsidePolygon(ho.p,newShapes[s2Idx].p)&&(sIdx!==s2Idx&&toChange++,hole_unassigned?(hole_unassigned=!1,betterShapeHoles[s2Idx].push(ho)):ambiguous=!0);hole_unassigned&&betterShapeHoles[sIdx].push(ho)}}toChange>0&&ambiguous===!1&&(newShapeHoles=betterShapeHoles)}let tmpHoles;for(let i=0,il=newShapes.length;i<il;i++){tmpShape=newShapes[i].s,shapes.push(tmpShape),tmpHoles=newShapeHoles[i];for(let j=0,jl=tmpHoles.length;j<jl;j++)tmpShape.holes.push(tmpHoles[j].h)}return shapes}},_tables=_generateTables();function _generateTables(){let buffer=new ArrayBuffer(4),floatView=new Float32Array(buffer),uint32View=new Uint32Array(buffer),baseTable=new Uint32Array(512),shiftTable=new Uint32Array(512);for(let i=0;i<256;++i){let e=i-127;e<-27?(baseTable[i]=0,baseTable[i|256]=32768,shiftTable[i]=24,shiftTable[i|256]=24):e<-14?(baseTable[i]=1024>>-e-14,baseTable[i|256]=1024>>-e-14|32768,shiftTable[i]=-e-1,shiftTable[i|256]=-e-1):e<=15?(baseTable[i]=e+15<<10,baseTable[i|256]=e+15<<10|32768,shiftTable[i]=13,shiftTable[i|256]=13):e<128?(baseTable[i]=31744,baseTable[i|256]=64512,shiftTable[i]=24,shiftTable[i|256]=24):(baseTable[i]=31744,baseTable[i|256]=64512,shiftTable[i]=13,shiftTable[i|256]=13)}let mantissaTable=new Uint32Array(2048),exponentTable=new Uint32Array(64),offsetTable=new Uint32Array(64);for(let i=1;i<1024;++i){let m=i<<13,e=0;for(;(m&8388608)===0;)m<<=1,e-=8388608;m&=-8388609,e+=947912704,mantissaTable[i]=m|e}for(let i=1024;i<2048;++i)mantissaTable[i]=939524096+(i-1024<<13);for(let i=1;i<31;++i)exponentTable[i]=i<<23;exponentTable[31]=1199570944,exponentTable[32]=2147483648;for(let i=33;i<63;++i)exponentTable[i]=2147483648+(i-32<<23);exponentTable[63]=3347054592;for(let i=1;i<64;++i)i!==32&&(offsetTable[i]=1024);return{floatView,uint32View,baseTable,shiftTable,mantissaTable,exponentTable,offsetTable}}function toHalfFloat(val){Math.abs(val)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),val=clamp(val,-65504,65504),_tables.floatView[0]=val;let f=_tables.uint32View[0],e=f>>23&511;return _tables.baseTable[e]+((f&8388607)>>_tables.shiftTable[e])}function fromHalfFloat(val){let m=val>>10;return _tables.uint32View[0]=_tables.mantissaTable[_tables.offsetTable[m]+(val&1023)]+_tables.exponentTable[m],_tables.floatView[0]}var DataUtils=Object.freeze({__proto__:null,toHalfFloat,fromHalfFloat});function ImmediateRenderObject(){console.error("THREE.ImmediateRenderObject has been removed.")}var WebGLMultisampleRenderTarget=class extends WebGLRenderTarget{constructor(width,height,options){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.'),super(width,height,options),this.samples=4}},DataTexture2DArray=class extends DataArrayTexture{constructor(data,width,height,depth){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),super(data,width,height,depth)}},DataTexture3D=class extends Data3DTexture{constructor(data,width,height,depth){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(data,width,height,depth)}},BoxBufferGeometry=class extends BoxGeometry{constructor(width,height,depth,widthSegments,heightSegments,depthSegments){console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."),super(width,height,depth,widthSegments,heightSegments,depthSegments)}},CapsuleBufferGeometry=class extends CapsuleGeometry{constructor(radius,length,capSegments,radialSegments){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(radius,length,capSegments,radialSegments)}},CircleBufferGeometry=class extends CircleGeometry{constructor(radius,segments,thetaStart,thetaLength){console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."),super(radius,segments,thetaStart,thetaLength)}},ConeBufferGeometry=class extends ConeGeometry{constructor(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."),super(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength)}},CylinderBufferGeometry=class extends CylinderGeometry{constructor(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."),super(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength)}},DodecahedronBufferGeometry=class extends DodecahedronGeometry{constructor(radius,detail){console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."),super(radius,detail)}},ExtrudeBufferGeometry=class extends ExtrudeGeometry{constructor(shapes,options){console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."),super(shapes,options)}},IcosahedronBufferGeometry=class extends IcosahedronGeometry{constructor(radius,detail){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(radius,detail)}},LatheBufferGeometry=class extends LatheGeometry{constructor(points,segments,phiStart,phiLength){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(points,segments,phiStart,phiLength)}},OctahedronBufferGeometry=class extends OctahedronGeometry{constructor(radius,detail){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(radius,detail)}},PlaneBufferGeometry=class extends PlaneGeometry{constructor(width,height,widthSegments,heightSegments){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(width,height,widthSegments,heightSegments)}},PolyhedronBufferGeometry=class extends PolyhedronGeometry{constructor(vertices,indices,radius,detail){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(vertices,indices,radius,detail)}},RingBufferGeometry=class extends RingGeometry{constructor(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength)}},ShapeBufferGeometry=class extends ShapeGeometry{constructor(shapes,curveSegments){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(shapes,curveSegments)}},SphereBufferGeometry=class extends SphereGeometry{constructor(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength)}},TetrahedronBufferGeometry=class extends TetrahedronGeometry{constructor(radius,detail){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(radius,detail)}},TorusBufferGeometry=class extends TorusGeometry{constructor(radius,tube,radialSegments,tubularSegments,arc2){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(radius,tube,radialSegments,tubularSegments,arc2)}},TorusKnotBufferGeometry=class extends TorusKnotGeometry{constructor(radius,tube,tubularSegments,radialSegments,p,q){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(radius,tube,tubularSegments,radialSegments,p,q)}},TubeBufferGeometry=class extends TubeGeometry{constructor(path,tubularSegments,radius,radialSegments,closed){console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."),super(path,tubularSegments,radius,radialSegments,closed)}};typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}));typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=REVISION);var shared_exports={};__export(shared_exports,{FAR_OBJ:()=>FAR_OBJ,INITIAL_FOV:()=>INITIAL_FOV,LENGTH_SCALE:()=>LENGTH_SCALE,STARS_SCALE:()=>STARS_SCALE,halfPi:()=>halfPi,labelTextColor:()=>labelTextColor,labelTextFont:()=>labelTextFont,targets:()=>targets,toDeg:()=>toDeg,toRad:()=>toRad,twoPi:()=>twoPi});var FAR_OBJ=named(new Object3D,"LODFarObj"),twoPi=Math.PI*2,halfPi=Math.PI/2,toDeg=180/Math.PI,toRad=Math.PI/180,LENGTH_SCALE=1e-7,STARS_SCALE=9461e9*1e3*LENGTH_SCALE,INITIAL_FOV=45,targets={origin:new Vector3,cur:null,obj:null,pos:new Vector3,track:null,follow:null},labelTextColor="#7fa0e0",labelTextFont="medium arial";var magnitudeByAbbrev={},magnitudeByName={},Magnitude=class{constructor(exponent,name,abbrev2){this.exponent=exponent,this.name=name,this.abbrev=abbrev2,magnitudeByName[name]=this,magnitudeByAbbrev[abbrev2]=this}from(scalar,mag){let expDiff=mag.exponent-this.exponent,mult=Math.pow(10,expDiff);return scalar*mult}toString(){return this.name}};Magnitude.lookup=str=>{let magnitude=magnitudeByAbbrev[str];return magnitude||magnitudeByName[str]};Magnitude.YOTTA=new Magnitude(24,"yotta","Y");Magnitude.ZETTA=new Magnitude(21,"zetta","Z");Magnitude.EXA=new Magnitude(18,"exa","E");Magnitude.PETA=new Magnitude(15,"peta","P");Magnitude.TERA=new Magnitude(12,"tera","T");Magnitude.GIGA=new Magnitude(9,"giga","G");Magnitude.MEGA=new Magnitude(6,"mega","M");Magnitude.KILO=new Magnitude(3,"kilo","k");Magnitude.HECTO=new Magnitude(2,"hecto","h");Magnitude.DECA=new Magnitude(1,"deca","D");Magnitude.UNIT=new Magnitude(0,"","");Magnitude.DECI=new Magnitude(-1,"deci","d");Magnitude.CENTI=new Magnitude(-2,"centi","c");Magnitude.MILLI=new Magnitude(-3,"milli","m");Magnitude.MICRO=new Magnitude(-6,"micro","\u03BC");Magnitude.NANO=new Magnitude(-9,"nano","n");Magnitude.PICO=new Magnitude(-12,"pico","p");Magnitude.FEMTO=new Magnitude(-15,"femto","f");Magnitude.ATTO=new Magnitude(-18,"atto","a");Magnitude.ZETO=new Magnitude(-21,"zepto","z");Magnitude.YOCTO=new Magnitude(-24,"yocto","y");var unitByAbbrev={},unitByName={},Unit=class{constructor(name,abbrev2,dimension){this.name=name,this.abbrev=abbrev2,this.dimension=dimension,unitByAbbrev[abbrev2]=this,unitByName[name]=this}toString(){return this.name}};Unit.lookup=str=>{let unit=unitByAbbrev[str];return unit||unitByName[str]};Unit.METER=new Unit("meter","m","length");Unit.GRAM=new Unit("gram","g","mass");Unit.SECOND=new Unit("second","s","time");Unit.AMPERE=new Unit("ampere","A","electric current");Unit.KELVIN=new Unit("kelvin","K","temperature");Unit.CANDELA=new Unit("candela","cd","luminous intensity");Unit.MOLE=new Unit("mole","mol","amount of substance");var Measure=class{constructor(scalar,magnitude,unit){if(typeof scalar!="number")throw"Invalid scalar given: "+scalar;if(typeof magnitude!="object"||magnitude.constructor.name!="Magnitude")throw"Invalid magnitude given: "+magnitude;if(typeof unit!="object"||unit.constructor.name!="Unit")throw"Invalid unit given: "+unit;this.scalar=scalar,this.magnitude=magnitude||Magnitude.UNIT,this.unit=unit}identical(other){return this.scalar===other.scalar&&this.magnitude===other.magnitude&&this.unit===other.unit}equals(other){let thisUnit=this.convertToUnit(),otherUnit=other.convertToUnit();return thisUnit.scalar===otherUnit.scalar&&thisUnit.magnitude===otherUnit.magnitude&&thisUnit.unit===otherUnit.unit}convertTo(mag){return new Measure(mag.from(this.scalar,this.magnitude),mag,this.unit)}convertToUnit(){return this.convertTo(Magnitude.UNIT)}toString(){let s="";return s+=this.scalar,s+=this.magnitude.abbrev,s+=this.unit.abbrev,s}};Measure.Magnitude=Magnitude;Measure.Unit=Unit;Measure.parse=s=>{if(typeof s!="string")throw"Given string is null or not string: "+s;let m=s.match(/(-?\d+(?:.\d+)?(?:[eE]\d+)?)\s*([khdnmgtpfaezy\u03BC])?\s*([mgsAKLn])/);if(!m)throw"Could not parse measure from given string: "+s;let scalar=parseFloat(m[1]);if(m.length==2){let unit2=m[2],ul2=Unit.lookup(unit2);return new Measure(parseFloat(scalar),Magnitude.UNIT,ul2)}let magnitude=m[2]||null,unit=m[3],ml=magnitude==null?Magnitude.UNIT:Magnitude.lookup(magnitude),ul=Unit.lookup(unit);return new Measure(scalar==null?0:parseFloat(scalar),ml,ul)};var littleEndian=!0,StarsCatalog=class{constructor(numStars=0,starsByHip={},hipByName={},namesByHip={},minMag=-8.25390625,maxMag=15.4453125,starScale=STARS_SCALE,lengthScale=LENGTH_SCALE*10){this.starsByHip=starsByHip,this.hipByName=hipByName,this.namesByHip=namesByHip,this.minMag=minMag,this.maxMag=maxMag,this.numStars=numStars,this.numNamedStars=0,this.numNames=0,this.starScale=starScale,this.lengthScale=lengthScale,this.sceneScale=starScale*lengthScale}load(cb){if(!cb)throw new Error("Undefined callback");fetch("/data/stars.dat").then(starsData=>{starsData.arrayBuffer().then(buffer=>{this.read(buffer),fetch("/data/starnames.dat").then(namesData=>{namesData.text().then(text=>{this.readNames(text),cb()})})})})}read(buffer){let header="CELSTARS\0",data=new DataView(buffer),offset=0;check(header,data,offset),offset+=header.length,this.numStars=data.getUint32(offset,littleEndian),offset+=4;let sun=getSunProps();this.starsByHip[0]=sun;for(let i=0;i<this.numStars;i++){let hipId=data.getUint32(offset,littleEndian);offset+=4;let x=data.getFloat32(offset,littleEndian);offset+=4;let y=data.getFloat32(offset,littleEndian);offset+=4;let z=data.getFloat32(offset,littleEndian);offset+=4;let absMag=data.getInt16(offset,littleEndian)/256;offset+=2;let clazz=data.getUint16(offset,littleEndian);offset+=2;let kind=(clazz&61440)>>>12,type=(clazz&3840)>>>8,sub=(clazz&240)>>>4,lumClass=clazz&15,absMagD=sun.absMag-absMag,lumRelSun=Math.pow(2.512,absMagD),radius=sun.radius*Math.pow(lumRelSun,.5),star={x,y,z,hipId,absMag,kind,spectralType:type,sub,lumClass,lumRelSun,radius};this.starsByHip[hipId]=star}return this}readNames(text){let records=text.split(`
`);for(let i=0;i<records.length;i++){let parts=records[i].split(":");if(parts.length<2&&i<records.length-1){console.warn(`Malformed name record ${i}: `,parts);continue}let hipId=parseInt(parts.shift());this.namesByHip[hipId]=parts,this.numNamedStars++;for(let j=0;j<parts.length;j++){let part=parts[j];this.hipByName[part]=hipId,this.numNames++;let match=part.match(/(\w{2,3})\d+ (\w{3})/);if(match){let fix=`${match[1]} ${match[2]}`;this.hipByName[fix]=hipId,this.numNames++}if(match=part.match(/(\w{2,3}) (\w{3}).*/),match){let fix=`${match[1]} ${match[2]}`;this.hipByName[fix]=hipId,this.numNames++}}}}downsample(n,keep={}){if(this.numStars<n)return this;let stars=[];for(let hipId in this.starsByHip)Object.prototype.hasOwnProperty.call(hipId,this.starsByHip)&&stars.push(this.starsByHip[hipId]);let sampled=[],kept=0;for(let keepId in keep)Object.prototype.hasOwnProperty.call(keepId,keep)&&(sampled[kept++]=this.starsByHip[keepId]);for(let i=kept;i<n;i++){let star=stars[Math.floor(Math.random()*stars.length)];keep[star.hipId]||sampled.push(star)}let numStars=sampled.length,starsByHip={},hipByName={},namesByHip={},minMag=Number.MAX_VALUE,maxMag=Number.MIN_VALUE;for(let i=0;i<numStars;i++){let star=sampled[i];star.absMag<minMag&&(minMag=star.absMag),star.absMag>maxMag&&(maxMag=star.absMag);let hipId=star.hipId;starsByHip[hipId]=star;let names=this.namesByHip[hipId];names&&(namesByHip[hipId]=names)}for(let name in this.hipByName)if(Object.prototype.hasOwnProperty.call(name,this.hipByName)){let hipId=this.hipByName[name];starsByHip[hipId]&&(hipByName[name]=hipId)}return new StarsCatalog(numStars,starsByHip,hipByName,namesByHip,minMag,maxMag)}getNameOrId(hipId){let names=this.namesByHip[hipId];return names&&names.length>0?names[0]:hipId}reifyName(origName){let name=origName,hipId=this.hipByName[name];return hipId||(name=abbrev(name),hipId=this.hipByName[name]),hipId||(name=abbrevVariant(name),hipId=this.hipByName[name]),hipId&&(name=this.namesByHip[hipId][0]),[origName,name,hipId]}};function getSunProps(radius=6957e5){return{x:0,y:0,z:0,hipId:0,absMag:4.83,kind:0,spectralType:4,sub:2,lumClass:6,lumRelSun:1,radius}}var StarSpectra=[[142,176,255,"O"],[165,191,255,"B"],[205,218,255,"A"],[242,239,254,"F"],[255,238,229,"G"],[255,219,178,"K"],[255,180,80,"M"],[255,180,80,"R"],[255,180,80,"S"],[255,180,80,"N"],[142,176,255,"WC"],[142,176,255,"WN"],[142,176,255,"Unk."],[255,118,0,"L"],[255,0,0,"T"],[10,10,10,"Carbon"]];StarsCatalog.StarSpectra=StarSpectra;function abbrev(name){let parts=name.split(/\s+/);return parts[0]=parts[0].substring(0,3).toUpperCase(),parts.join(" ")}function abbrevVariant(name){let parts=name.split(/\s+/),num=variants[parts[0]];return num&&(parts[0]=num),parts.join(" ")}var variants={ALP:"ALF",THE:"TET"};function check(expect,actual,offset){for(let i=0;i<expect.length;i++){let eC=expect.charCodeAt(i),aC=actual.getUint8(offset+i,littleEndian);if(eC!==aC)throw new Error(`Check failed at index ${i}, expected: ${eC}, actual: ${aC}`)}}var FAVES={0:"Sol",439:"Gliese 1",8102:"Tau Ceti",11767:"Polaris",21421:"Aldebaran",24436:"Rigel",25336:"Bellatrix",27989:"Betelgeuse",30438:"Canopus",32349:"Sirius",37279:"Procyon",49669:"Regulus",57632:"Denebola",65474:"Spica",69673:"Arcturus",70890:"Proxima Centauri",80763:"Antares",83608:"Arrakis",91262:"Vega",102098:"Deneb",97649:"Altair",113881:"Scheat"};var Keys=class{constructor(){this.keymap={},this.msgs={},this.bindToWindow()}bindToWindow(){window.addEventListener("keydown",e=>{this.onKeyDown(e)})}onKeyDown(event){let charStr=event.key,f=this.keymap[charStr];f&&f()}map(c,fn,msg){this.keymap[c]=fn,this.msgs[c]=msg}};var Loader2=class{constructor(){this.loaded={},this.pathByName={}}loadPath(path,onLoadCb,onDoneCb,onErrCb){if(path.length===0)throw new Error("empty target path");let parts=path.split("/"),targetName=parts[parts.length-1];typeof this.loaded[targetName]=="object"&&onDoneCb(path,this.loaded[targetName]),this.loadPathRecursive(parts,(name,obj)=>{onLoadCb(name,obj),name===targetName&&onDoneCb(path,obj)},onErrCb)}loadPathRecursive(pathParts,onLoadCb,onErrCb){if(pathParts.length===0)return;let name=pathParts.pop();this.loadPathRecursive(pathParts,onLoadCb,onErrCb),this.loadObj(pathParts.join("/"),name,onLoadCb,!0,onErrCb)}loadObj(prefix,name,onLoadCb,expand,onErrCb){let loadedObj=this.loaded[name];if(loadedObj){if(loadedObj==="pending")return;if(expand&&loadedObj.system){let path=prefix?`${prefix}/${name}`:name;for(let i=0;i<loadedObj.system.length;i++)this.loadObj(path,loadedObj.system[i],onLoadCb,!1,onErrCb)}}else{this.loaded[name]="pending";let fileLoader=new FileLoader;fileLoader.setResponseType("json"),fileLoader.load(`/data/${name}.json`,obj=>{this.loaded[name]=obj;let path=prefix?`${prefix}/${name}`:name;this.pathByName[name]=path,onLoadCb&&onLoadCb(name,obj),this.loadObj(prefix,name,onLoadCb,expand,onErrCb)},null,onErrCb)}}loadShaders(shaderConfig,doneCb){let vertDone=!1,fragDone=!1,checkDone=()=>{vertDone&&fragDone&&doneCb()};fetch(shaderConfig.vertexShader).then(rsp=>{rsp.text().then(text=>{shaderConfig.vertexShader=text,vertDone=!0,checkDone()})}),fetch(shaderConfig.fragmentShader).then(rsp=>{rsp.text().then(text=>{shaderConfig.fragmentShader=text,fragDone=!0,checkDone()})})}};var UNIT=Measure.Magnitude.UNIT,[METER,SECOND]=[Measure.Unit.METER,Measure.Unit.SECOND];function reifyMeasures(obj){function reify(o,prop,name2){let val=o[prop];if(val!=null){let type=typeof val;if(type==="string")o[prop]=Measure.parse(val).convertToUnit();else if(type==="number"){let v=o[prop];switch(prop){case"siderealOrbitPeriod":v=new Measure(val,UNIT,SECOND);break;case"siderealRotationPeriod":v=new Measure(val,UNIT,SECOND);break;case"semiMajorAxis":v=new Measure(val,UNIT,METER);break;default:}v&&v.scalar&&parseFloat(v.scalar)&&(o[prop]=v)}else val instanceof Measure||console.warn(`unnormalized ${prop} for ${name2}; val(${val}) type(${type})`)}}let name=obj.name;reify(obj,"radius",name),reify(obj,"mass",name),reify(obj,"siderealRotationPeriod",name),obj.orbit&&(reify(obj.orbit,"semiMajorAxis",name),reify(obj.orbit,"siderealOrbitPeriod",name))}var import_rafor=__toESM(require_rafor(),1);function Bounds3(x,y,z,half){this.x=typeof x=="number"?x:0,this.y=typeof y=="number"?y:0,this.z=typeof z=="number"?z:0,this.half=typeof half=="number"?half:0}Bounds3.prototype.contains=function(x,y,z){var half=this.half;return this.x-half<=x&&x<this.x+half&&this.y-half<=y&&y<this.y+half&&this.z-half<=z&&z<this.z+half};var MAX_ITEMS=4;function TreeNode(bounds){this.bounds=bounds,this.q0=null,this.q1=null,this.q2=null,this.q3=null,this.q4=null,this.q5=null,this.q6=null,this.q7=null,this.items=null}TreeNode.prototype.subdivide=function(){var bounds=this.bounds,quarter=bounds.half/2;this.q0=new TreeNode(new Bounds3(bounds.x-quarter,bounds.y-quarter,bounds.z-quarter,quarter)),this.q1=new TreeNode(new Bounds3(bounds.x+quarter,bounds.y-quarter,bounds.z-quarter,quarter)),this.q2=new TreeNode(new Bounds3(bounds.x-quarter,bounds.y+quarter,bounds.z-quarter,quarter)),this.q3=new TreeNode(new Bounds3(bounds.x+quarter,bounds.y+quarter,bounds.z-quarter,quarter)),this.q4=new TreeNode(new Bounds3(bounds.x-quarter,bounds.y-quarter,bounds.z+quarter,quarter)),this.q5=new TreeNode(new Bounds3(bounds.x+quarter,bounds.y-quarter,bounds.z+quarter,quarter)),this.q6=new TreeNode(new Bounds3(bounds.x-quarter,bounds.y+quarter,bounds.z+quarter,quarter)),this.q7=new TreeNode(new Bounds3(bounds.x+quarter,bounds.y+quarter,bounds.z+quarter,quarter))};TreeNode.prototype.insert=function(idx,array,depth){var isLeaf=this.q0===null;if(isLeaf){if(this.items===null?this.items=[idx]:this.items.push(idx),this.items.length>=MAX_ITEMS&&depth<16){this.subdivide();for(var i=0;i<this.items.length;++i)this.insert(this.items[i],array,depth+1);this.items=null}}else{var x=array[idx],y=array[idx+1],z=array[idx+2],bounds=this.bounds,quadIdx=0;x>bounds.x&&(quadIdx+=1),y>bounds.y&&(quadIdx+=2),z>bounds.z&&(quadIdx+=4);var child=getChild(this,quadIdx);child.insert(idx,array,depth+1)}};TreeNode.prototype.query=function(results,sourceArray,intersects2,preciseCheck){if(!!intersects2(this.bounds)){var items=this.items,needsCheck=typeof preciseCheck=="function";if(items)for(var i=0;i<items.length;++i){var idx=items[i];needsCheck?preciseCheck(sourceArray[idx],sourceArray[idx+1],sourceArray[idx+2])&&results.push(idx):results.push(idx)}!this.q0||(this.q0.query(results,sourceArray,intersects2,preciseCheck),this.q1.query(results,sourceArray,intersects2,preciseCheck),this.q2.query(results,sourceArray,intersects2,preciseCheck),this.q3.query(results,sourceArray,intersects2,preciseCheck),this.q4.query(results,sourceArray,intersects2,preciseCheck),this.q5.query(results,sourceArray,intersects2,preciseCheck),this.q6.query(results,sourceArray,intersects2,preciseCheck),this.q7.query(results,sourceArray,intersects2,preciseCheck))}};function getChild(node,idx){if(idx===0)return node.q0;if(idx===1)return node.q1;if(idx===2)return node.q2;if(idx===3)return node.q3;if(idx===4)return node.q4;if(idx===5)return node.q5;if(idx===6)return node.q6;if(idx===7)return node.q7}var EmptyRegion=new Bounds3;function createTree(options){options=options||{};var noPoints=[],root,originalArray,api={initAsync,init,bounds:getBounds,intersectRay,intersectSphere,getRoot};return api;function getRoot(){return root}function intersectSphere(cx,cy,cz,r){if(!root)return noPoints;var indices=[],r2=r*r;return root.query(indices,originalArray,intersectCheck,preciseCheck),indices;function intersectCheck(candidate){var dist=r2,half=candidate.half;return cx<candidate.x-half?dist-=sqr(cx-(candidate.x-half)):cx>candidate.x+half&&(dist-=sqr(cx-(candidate.x+half))),cy<candidate.y-half?dist-=sqr(cy-(candidate.y-half)):cy>candidate.y+half&&(dist-=sqr(cy-(candidate.y+half))),cz<candidate.z-half?dist-=sqr(cz-(candidate.z-half)):cz>candidate.z+half&&(dist-=sqr(cz-(candidate.z+half))),dist>0}function preciseCheck(x,y,z){return sqr(x-cx)+sqr(y-cy)+sqr(z-cz)<r2}}function sqr(x){return x*x}function intersectRay(rayOrigin,rayDirection,near,far){if(!root)return noPoints;near===void 0&&(near=0),far===void 0&&(far=Number.POSITIVE_INFINITY),near*=near,far*=far;var indices=[];return root.query(indices,originalArray,intersectCheck,farEnough),indices.sort(byDistanceToCamera);function intersectCheck(candidate){var half=candidate.half,t1=(candidate.x-half-rayOrigin.x)/rayDirection.x,t2=(candidate.x+half-rayOrigin.x)/rayDirection.x,t3=(candidate.y+half-rayOrigin.y)/rayDirection.y,t4=(candidate.y-half-rayOrigin.y)/rayDirection.y,t5=(candidate.z-half-rayOrigin.z)/rayDirection.z,t6=(candidate.z+half-rayOrigin.z)/rayDirection.z,tmax=Math.min(Math.min(Math.max(t1,t2),Math.max(t3,t4)),Math.max(t5,t6)),tmin;return tmax<0?!1:(tmin=Math.max(Math.max(Math.min(t1,t2),Math.min(t3,t4)),Math.min(t5,t6)),tmin<=tmax&&tmin<=far)}function farEnough(x,y,z){var dist=(x-rayOrigin.x)*(x-rayOrigin.x)+(y-rayOrigin.y)*(y-rayOrigin.y)+(z-rayOrigin.z)*(z-rayOrigin.z);return near<=dist&&dist<=far}function byDistanceToCamera(idx0,idx1){var x0=rayOrigin[idx0],y0=rayOrigin[idx0+1],z0=rayOrigin[idx0+2],dist0=(x0-rayOrigin.x)*(x0-rayOrigin.x)+(y0-rayOrigin.y)*(y0-rayOrigin.y)+(z0-rayOrigin.z)*(z0-rayOrigin.z),x1=rayOrigin[idx1],y1=rayOrigin[idx1+1],z1=rayOrigin[idx1+2],dist1=(x1-rayOrigin.x)*(x1-rayOrigin.x)+(y1-rayOrigin.y)*(y1-rayOrigin.y)+(z1-rayOrigin.z)*(z1-rayOrigin.z);return dist0-dist1}}function init(points){verifyPointsInvariant(points),originalArray=points,root=createRootNode(points);for(var i=0;i<points.length;i+=3)root.insert(i,originalArray,0)}function initAsync(points,doneCallback){verifyPointsInvariant(points);var tempRoot=createRootNode(points);(0,import_rafor.default)(points,insertToRoot,doneInternal,{step:3});function insertToRoot(element,i){tempRoot.insert(i,points,0)}function doneInternal(){originalArray=points,root=tempRoot,typeof doneCallback=="function"&&doneCallback(api)}}function verifyPointsInvariant(points){if(!points)throw new Error("Points array is required for quadtree to work");if(typeof points.length!="number")throw new Error("Points should be array-like object");if(points.length%3!==0)throw new Error("Points array should consist of series of x,y,z coordinates and be multiple of 3")}function getBounds(){return root?root.bounds:EmptyRegion}function createRootNode(points){if(points.length===0){var empty=new Bounds3;return new TreeNode(empty)}for(var minX=Number.POSITIVE_INFINITY,minY=Number.POSITIVE_INFINITY,minZ=Number.POSITIVE_INFINITY,maxX=Number.NEGATIVE_INFINITY,maxY=Number.NEGATIVE_INFINITY,maxZ=Number.NEGATIVE_INFINITY,i=0;i<points.length;i+=3){var x=points[i],y=points[i+1],z=points[i+2];x<minX&&(minX=x),x>maxX&&(maxX=x),y<minY&&(minY=y),y>maxY&&(maxY=y),z<minZ&&(minZ=z),z>maxZ&&(maxZ=z)}var side=Math.max(Math.max(maxX-minX,maxY-minY),maxZ-minZ);side+=2,minX-=1,minY-=1,minZ-=1;var half=side/2,bounds=new Bounds3(minX+half,minY+half,minZ+half,half);return new TreeNode(bounds)}}var TERMINAL="Terminal",Parser=class{parse(inputString,grammar,stateName,depth=0){if(grammar==null||stateName==null)throw new Error(`Neither grammar(${grammar}) nor stateName(${stateName}) may be null`);let offset=this.prefixParse(inputString,grammar,stateName,depth);return offset==inputString.length?offset:-1}prefixParse(inputString,grammar,stateName,depth=0){if(inputString==null)throw new Error("Input string cannot be null");if(grammar==null||stateName==null)throw new Error(`Neither grammar(${grammar}) nor stateName(${stateName}) may be null`);if(stateName==TERMINAL)return 0;let state=grammar[stateName];if(state===void 0)throw new Error(`Grammar does not define state(${stateName})`);if(depth>1e3)throw new Error(`ERROR: Reached max call depth of ${1e3} in state ${state}`);let rule=state.rule;Array.isArray(rule)||(rule=[rule]);let s=inputString+"",inputOffset=0,curOffset=0;`${s}`;let match;for(let termIndex in rule){let term=rule[termIndex];if(term instanceof RegExp){let regex=term;if(regex.global){`${regex}${s}`;let foundMatch=!1;for(;(match=regex.exec(s))!==null;){if(foundMatch=!0,match.index!=curOffset){if(curOffset==0)return regex.lastIndex=0,-1;`${curOffset}`;break}curOffset=regex.lastIndex,`${match.index}${curOffset}`;break}if(!foundMatch)return regex.lastIndex=0,-1}else{if(match=regex.exec(s),match==null||match.index==-1||match.index!=curOffset)return regex.lastIndex=0,-1;curOffset=match.index+match[0].length,`${match.index}${curOffset}`}inputOffset+=curOffset,regex.lastIndex=0,`${inputOffset}`}else if(Array.isArray(term)){let i;for(i=0;i<term.length;i++){let stateName2=term[i];if(stateName2==="undefined")throw new Error("Choice stateName undefined.");let recurseOffset=this.prefixParse(s.substring(curOffset),grammar,stateName2,depth+1);if(`${recurseOffset}`,recurseOffset>=0){inputOffset+=curOffset+recurseOffset,`${inputOffset}${curOffset}${recurseOffset}`;break}}if(i==term.length)return-1;`${inputOffset}`}else if(typeof term=="string"){let recurseOffset=this.prefixParse(s.substring(curOffset),grammar,term,depth+1);if(recurseOffset==-1)return-1;`${inputOffset}${curOffset}${recurseOffset}`,inputOffset+=curOffset+recurseOffset}else throw new Error("Invalid grammar term: "+term+", type: "+typeof term);s=inputString.substring(inputOffset),curOffset=0}`${s}`,`${inputOffset}${inputString}${inputString.length}`;let cb=state.callback;return cb&&cb(state,match),inputOffset}};Parser.Terminal=TERMINAL;var AsterismsCatalog=class{constructor(starsCatalog){this.starsCatalog=starsCatalog,this.byName={},this.numAsterisms=0}load(cb){fetch("/data/asterisms.dat").then(rsp=>{rsp.text().then(text=>{this.read(text),cb&&cb()})})}read(text){let records=[],recordName=null,paths=[],names=[],nameList=[],Grammar={Start:{rule:["Record",["Start",Parser.Terminal]]},Record:{rule:["Name","OuterArray"],callback:(state,match)=>{recordName=names.pop();let record={name:recordName,paths};this.byName[recordName]=record,this.numAsterisms++,records.push(record),recordName=null,paths=[],names=[],nameList=[]}},Name:{rule:[/"([\p{L}0-9 ]+)" */u],callback:(state,match)=>{let name=match[1];names.push(name)}},NameList:{rule:["Name",["NameList",Parser.Terminal]],callback:(state,match)=>{nameList.unshift(names.pop())}},OuterArray:{rule:[/\s*\[\s*/,"ListInnerArray",/\s*\]\s*/]},ListInnerArray:{rule:["Path",["ListInnerArray",Parser.Terminal]]},Path:{rule:[/\s*\[\s*/,"NameList",/\s*\]\s*/],callback:(state,match)=>{paths.push(nameList),nameList=[]}}},offset=new Parser().parse(text,Grammar,"Start");return offset!==text.length&&console.warn(`Cannot parse asterisms, offset(${offset}) != text.length(${text.length})`),this}};var SpriteSheet=class{constructor(maxLabels,maxLabel,labelTextFont2=labelTextFont,padding=[0,0]){if(!Number.isInteger(maxLabels))throw new Error(`maxLabels is invalid: ${maxLabels}`);this.maxLabels=maxLabels,this.labelCount=0,this.labelTextFont=labelTextFont2,this.textBaseline="top",this.padding=padding,this.canvas=createCanvas(),this.ctx=this.canvas.getContext("2d");let maxBounds=measureText(this.ctx,maxLabel,labelTextFont2),itemSize=Math.max(maxBounds.width,maxBounds.height);this.size=Math.sqrt(this.maxLabels)*itemSize,this.canvas.width=this.size,this.canvas.height=this.size,this.curX=0,this.curY=0,this.lineSizeMax=0;let ctx=this.ctx;ctx.fillStyle="rgba(0, 0, 0, 0)",ctx.fillRect(0,0,this.canvas.width,this.canvas.height),ctx.fill(),this.positions=[],this.sizes=[],this.spriteCoords=[],this.positionAttribute=null,this.sprites=null}add(x,y,z,labelText,fillStyle=labelTextColor){if(this.labelCount>=this.maxLabels)throw new Error(`Add called too many times, can only allocate
                       maxLabels(${this.maxLabels}), already have ${this.labelCount}`);this.ctx.font=this.labelTextFont;let bounds=measureText(this.ctx,labelText),size=Math.max(bounds.width,bounds.height);return this.curX+size>this.canvas.width&&(this.curX=0,this.curY+=this.lineSizeMax+1,this.lineSizeMax=0),size>this.lineSizeMax&&(this.lineSizeMax=size),bounds=this.drawAt(labelText,this.curX,this.curY,fillStyle),this.positions.push(x,y,z),this.spriteCoords.push(bounds.x/this.size,1-(bounds.y+bounds.height)/this.size,bounds.width/this.size,bounds.height/this.size),this.sizes.push(bounds.width,bounds.height),this.curX+=bounds.width,this.labelCount++}drawAt(text,x,y,fillStyle){let ctx=this.ctx;ctx.textBaseline=this.textBaseline,ctx.font=this.labelTextFont;let bounds=measureText(ctx,text),size=Math.max(bounds.width,bounds.height);return ctx.save(),ctx.translate(x,y),this.drawLabel(text,size,size,fillStyle),ctx.restore(),{x,y,width:size,height:size}}drawLabel(text,width,height,fillStyle){let ctx=this.ctx;ctx.textBaseline=this.textBaseline,ctx.font=this.labelTextFont,ctx.fillStyle=fillStyle,ctx.fillText(text,0,0)}compile(sharedPositionAttribute=null){if(sharedPositionAttribute&&sharedPositionAttribute.count*3!==this.positions.length)throw console.log(sharedPositionAttribute.count),new Error(`Shared positionAttribute.length(${sharedPositionAttribute.count*3})            != this.positions.length(${this.positions.length})`);if(this.positions.length!==this.labelCount*3)throw new Error(`Positions array size wrong: ${this.positions.length}`);if(this.sizes.length!==this.labelCount*2)throw new Error(`Positions array size wrong: ${this.sizes.length}`);if(this.spriteCoords.length!==this.labelCount*4)throw new Error(`Positions array size wrong: ${this.spriteCoords.length}`);this.positionAttribute=sharedPositionAttribute||new Float32BufferAttribute(this.positions,3);let sizeAttribute=new Float32BufferAttribute(this.sizes,2),spriteCoordAttribute=new Float32BufferAttribute(this.spriteCoords,4),geometry=new BufferGeometry;return geometry.setAttribute("position",this.positionAttribute),geometry.setAttribute("size",sizeAttribute),geometry.setAttribute("spriteCoord",spriteCoordAttribute),geometry.computeBoundingBox(),this.sprites=new Points(geometry,this.createMaterial()),this.sprites}createMaterial(){let texture=new CanvasTexture(this.canvas);return texture.minFilter=NearestFilter,texture.magFilter=NearestFilter,new ShaderMaterial({uniforms:{map:{value:texture},padding:{value:new Vector2(this.padding[0],this.padding[1])}},vertexShader,fragmentShader,depthTest:!0,depthWrite:!1,transparent:!0})}},vertexShader=`
  uniform vec2 padding;
  attribute vec2 size;
  attribute vec4 spriteCoord;
  varying vec4 spriteCoordVarying;
  void main() {
    vec3 offsetPos = vec3(position.x + padding.x, position.y + padding.y, position.z);
    vec4 mvPosition = modelViewMatrix * vec4(offsetPos, 1.0);
    spriteCoordVarying = spriteCoord;
    gl_PointSize = size[0];
    gl_Position = projectionMatrix * mvPosition;
  }
`,fragmentShader=`
  uniform sampler2D map;
  varying vec4 spriteCoordVarying;
  void main() {
    vec2 spriteUV = vec2(
      spriteCoordVarying.x + spriteCoordVarying.z * gl_PointCoord.x,
      spriteCoordVarying.y + spriteCoordVarying.w * (1.0 - gl_PointCoord.y));
    gl_FragColor = texture2D(map, spriteUV);
  }
`;var shapes_exports={};__export(shapes_exports,{angle:()=>angle,arrow:()=>arrow,atmos:()=>atmos,box:()=>box,cube:()=>cube,ellipseSemiMinorAxisCurve:()=>ellipseSemiMinorAxisCurve,grid:()=>grid,imgGrid:()=>imgGrid,labelAnchor:()=>labelAnchor,line:()=>line,lineGrid:()=>lineGrid,lodSphere:()=>lodSphere,marker:()=>marker,point:()=>point,rings:()=>rings,solidArc:()=>solidArc,solidEllipse:()=>solidEllipse,sphere:()=>sphere});var loader=new TextureLoader;function loadTexture(texPath){return loader.load(texPath)}function pathTexture(filebase,ext){return ext=ext||".jpg",loadTexture(`/textures/${filebase}${ext}`)}var materials=[];function cacheMaterial(name,ext){let m=materials[name];return m||(materials[name]=m=new MeshPhongMaterial({map:pathTexture(name,ext)})),m}function cube(size){return size=size||1,box(size,size,size)}function box(width,height,depth,opts){width=width||1,height=height||1,depth=depth||1,opts=opts||{},opts.color=opts.color||16711680;let geom=new BoxGeometry(width,height,depth),matr=new MeshPhongMaterial(opts);return new Mesh(geom,matr)}function sphere(opts){opts=opts||{},opts.radius=opts.radius||1,opts.resolution=opts.resolution||64;let geom=new SphereGeometry(opts.radius,opts.resolution,opts.resolution/2);return opts.matr=opts.matr||new MeshPhongMaterial({flatShading:!0}),new Mesh(geom,opts.matr)}function marker(){let map=new TextureLoader().load("/textures/crosshairs.png"),m=new Sprite(new SpriteMaterial({map,sizeAttenuation:!1,transparent:!0,color:16777215,blending:AdditiveBlending,depthTest:!1}));return m.scale.set(.03,.03,.03),m}function lodSphere(radius,material){let lod=new LOD,geoms=[[getSphereGeom(128),radius],[getSphereGeom(32),radius*10],[getSphereGeom(16),radius*100],[getSphereGeom(8),radius*300]];for(let i=0;i<geoms.length;i++){let mesh=new Mesh(geoms[i][0],material);mesh.scale.set(radius,radius,radius),lod.addLevel(mesh,geoms[i][1])}let obj=new Object3D;return obj.add(lod),obj}var _sphereGeoms=[];function getSphereGeom(segmentSize){let geom=_sphereGeoms[segmentSize];return geom||(geom=_sphereGeoms[segmentSize]=new SphereGeometry(1,segmentSize,segmentSize/2)),geom}function ellipseSemiMinorAxisCurve(eccentricity,semiMajorAxisLength){return eccentricity=eccentricity||0,semiMajorAxisLength=semiMajorAxisLength||1,semiMajorAxisLength*Math.sqrt(1-Math.pow(eccentricity,2))}function solidEllipse(eccentricity,opts){opts=opts||{from:0,to:Math.PI*2},console.log(opts);let ellipsePath=new Shape,semiMajorAxisLength=1;ellipsePath.absellipse(0,0,semiMajorAxisLength,ellipseSemiMinorAxisCurve(eccentricity),0,Math.PI/2,!1,0);let material=new MeshBasicMaterial({color:opts.color||8947848,opacity:opts.opacity||1,transparent:opts.opacity<1,side:DoubleSide});return new Mesh(new ShapeBufferGeometry(ellipsePath),material)}function solidArc(opts){return opts=opts||{from:0,to:Math.PI*2,opacity:.1},new Mesh(new CircleBufferGeometry(1,32,opts.from,opts.to),new MeshLambertMaterial({color:opts.color||8947848,opacity:opts.opacity||1,transparent:opts.opacity<1,side:DoubleSide}))}function atmos(radius){let Shaders={atmosphere:{uniforms:{},vertexShader:["varying vec3 vNormal;","void main() {","vNormal = normalize(normalMatrix * normal);","gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);","}"].join(`
`),fragmentShader:["varying vec3 vNormal;","void main() {","float intensity = pow(1.1 + dot(vNormal, vec3(0, 0, 1)), 8.0);","gl_FragColor = vec4(0.5, 0.5, 1.0, 0.01) * intensity;","}"].join(`
`)}},sceneAtmosphere=new Object3D,geometry=new SphereGeometry(1,128,64),shader=Shaders.atmosphere,uniforms=UniformsUtils.clone(shader.uniforms),material=new ShaderMaterial({uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader}),mesh=new Mesh(geometry,material);return mesh.scale.x=mesh.scale.y=mesh.scale.z=radius,mesh.flipSided=!0,sceneAtmosphere.add(mesh),sceneAtmosphere}function point(optsOrRadius){let opts=optsOrRadius||{color:16777215,size:optsOrRadius||4,sizeAttenuation:!1,blending:AdditiveBlending,depthTest:!0,transparent:!0},geom=new BufferGeometry;geom.setAttribute("position",new BufferAttribute(new Float32Array(3),3));let pointMaterial=new PointsMaterial(opts);return new Points(geom,pointMaterial)}function labelAnchor(){let opts={color:0,size:3,sizeAttenuation:!1,blending:AdditiveBlending,depthTest:!0,transparent:!0},geom=new BufferGeometry;geom.setAttribute("position",new BufferAttribute(new Float32Array(3),3));let pointMaterial=new PointsMaterial(opts),anchorPoints=new Points(geom,pointMaterial);return anchorPoints.isAnchor=!0,anchorPoints}function line(vec1,vec2,...rest){let args=Array.prototype.slice.call(arguments),lastArg=args[args.length-1],opts={color:"white"};if(typeof lastArg=="object"){let materialOrOpts=args.pop();opts.color=materialOrOpts.color||opts.color}if(args.length===2)vec1=vec1||new Vector3;else if(args.length===3)vec1=new Vector3,vec2=new Vector3(args[0],args[1],args[2]);else if(args.length===6)vec1=new Vector3(args[0],args[1],args[2]),vec2=new Vector3(args[3],args[4],args[5]);else throw new Error("Can only be called with 2, 3 or 6 arguments.");if(vec1.equals(vec2))throw new Error(`Vectors may not be equal: ${JSON.stringify([vec1,vec2])}`);let points=[];points.push(vec1),points.push(vec2);let geom=new BufferGeometry().setFromPoints(points);return new Line(geom,new LineBasicMaterial(opts))}function cone(height,materialOrOpts={color:16777215}){let opts={color:materialOrOpts.color||"white"},coneHeight=height,coneGeometry=new ConeGeometry(coneHeight/3,coneHeight,10),coneMaterial=new MeshBasicMaterial(opts);return named(new Mesh(coneGeometry,coneMaterial),"cone")}function arrow(to=new Vector3(1,0,0),origin=new Vector3,hexColor=16777215,labelText=""){let dirVec=new Vector3;dirVec.copy(to),dirVec.normalize();let a=new ArrowHelper(dirVec,origin,to.length(),hexColor,.1,.1);if(labelText){let labelSheet=new SpriteSheet(1,labelText,void 0,[0,.1]),r=hexColor&16711680,g=hexColor&65280,b=hexColor&255;labelSheet.add(0,0,0,labelText,`rgb(${r}, ${g}, ${b})`);let label=named(labelSheet.compile(),`${angle.name}.label`);label.position.setY(to.length()),a.add(label)}return a}function angle(vec1,vec2,materialOrOpts,addLabelOrOpts=!0,addSolidArc=!0){let angleInRadians;arguments.length===1||vec2===null||typeof vec2=="undefined"?angleInRadians=vec1:arguments.length===2&&(angleInRadians=vec1.angleTo(vec2));let ang=named(new Object3D,`angle(${angleInRadians*toDeg})`),radius=1,headHeight=.1,arrowArc=arc(radius,0,angleInRadians,materialOrOpts),coneHead=cone(headHeight,materialOrOpts);if(coneHead.position.x=radius,coneHead.position.y=headHeight/-2,arrowArc.add(coneHead),ang.add(arrowArc),addSolidArc){let sArc=named(solidArc({radius:1,from:0,to:angleInRadians,opacity:.2}),".solidArc");sArc.rotation.z=-angleInRadians,ang.add(sArc)}if(addLabelOrOpts){let labelText,color="white",font=SpriteSheet.defaultFont,padding=[0,.1];typeof addLabelOrOpts=="object"?(labelText=addLabelOrOpts.text||"",color=addLabelOrOpts.color||color,font=addLabelOrOpts.font||font,padding=addLabelOrOpts.padding||padding):labelText=`${(angleInRadians*toDeg).toPrecision(4)}\u02DA`;let labelSheet=new SpriteSheet(1,labelText,font,padding);labelSheet.add(0,0,0,labelText,color);let label=named(labelSheet.compile(),`${angle.name}.label`);label.position.copy(coneHead.position),ang.add(label)}return ang.rotation.z=angleInRadians,ang}function grid(params){return params||(params={}),params.stepSize||(params.stepSize=1),params.numSteps||(params.numSteps=100),lineGrid(params)}function lineGrid(params){let grids=new Object3D,size=params.stepSize*params.numSteps||1,divisions=params.numSteps||10,color=params.color||175;grids.material=new LineBasicMaterial({color});let xzGrid=new GridHelper(size,divisions,color,color);xzGrid.material=grids.material,grids.add(xzGrid);let xyGrid=new GridHelper(size,divisions,color,color);xyGrid.rotation.x=Math.PI/2,xyGrid.material=grids.material,grids.add(xyGrid);let yzGrid=new GridHelper(size,divisions,color,color);return yzGrid.rotation.z=Math.PI/2,yzGrid.material=grids.material,grids.add(yzGrid),grids}function imgGrid(params){let imageCanvas=document.createElement("canvas"),context=imageCanvas.getContext("2d");imageCanvas.width=imageCanvas.height=32,context.strokeStyle=`#${params.color.toString(16)}`,context.lineWidth=params.lineWidth,context.strokeRect(0,0,32,32);let textureCanvas=new Texture(imageCanvas,UVMapping,RepeatWrapping,RepeatWrapping),materialCanvas=new MeshBasicMaterial({map:textureCanvas}),span=params.stepSize*params.numSteps;textureCanvas.needsUpdate=!0,textureCanvas.repeat.set(params.numSteps,params.numSteps);let geometry=new PlaneGeometry(1,1),meshCanvas=new Mesh(geometry,materialCanvas);return meshCanvas.scale.set(span,span,span),meshCanvas.doubleSided=!0,meshCanvas}function arc(rad,startAngle,arcAngle,materialOrOpts){let opts={color:materialOrOpts?materialOrOpts.color||"red":"white"},points=new EllipseCurve(0,0,rad,rad,startAngle,arcAngle,!1,-arcAngle).getPoints(100),geometry=new BufferGeometry().setFromPoints(points),material=new LineBasicMaterial(opts);return new Line(geometry,material)}function rings(name="saturn",shadows=!1,side=FrontSide){let geometry=new RingGeometry(3,6,64),textureMap=pathTexture(`${name}ringcolor`,".png"),alphaMap=pathTexture(`${name}ringalpha`,".png"),material=new MeshStandardMaterial({color:16777215,side:shadows?side:DoubleSide,map:textureMap,alphaMap,transparent:!0}),pos=geometry.attributes.position;geometry.setAttribute("uv",new BufferAttribute(new Float32Array(pos.count*4),4));let v3=new Vector3;for(let i=0;i<pos.count;i++)v3.fromBufferAttribute(pos,i),geometry.attributes.uv.setXY(i,v3.length()<4?1:0,1);let r=new Mesh(geometry,material);return shadows&&(r.castShadow=!0),r.scale.setScalar(.4),r.rotateY(Math.PI/2),r.rotateX(Math.PI/2),r}var Asterisms=class extends Object3D{constructor(stars,cb){super(),this.name="Asterisms",this.stars=stars,this.catalog=new AsterismsCatalog(stars.catalog),this.catalog.load(()=>{for(let astrName in this.catalog.byName)Object.prototype.hasOwnProperty.call(astrName,this.catalog.byName)&&this.show(astrName);cb&&cb(this)})}show(astrName,filterFn){filterFn||(filterFn=(stars,hipId,name)=>this.stars.catalog.namesByHip[hipId].length>=2&&!name.match(/\w{2,3} [\w\d]{3,4}/));let asterism=this.catalog.byName[astrName];if(!asterism)throw new Error("Unknown asterism: ",astrName);let paths=asterism.paths;for(let pathNdx in paths){if(!Object.prototype.hasOwnProperty.call(pathNdx,paths))continue;let prevStar=null,pathNames=paths[pathNdx];for(let i=0;i<pathNames.length;i++){let[origName,name,hipId]=this.stars.catalog.reifyName(pathNames[i]),star=this.stars.catalog.starsByHip[hipId];if(!!star){if(prevStar)try{let line2=line(STARS_SCALE*prevStar.x,STARS_SCALE*prevStar.y,STARS_SCALE*prevStar.z,STARS_SCALE*star.x,STARS_SCALE*star.y,STARS_SCALE*star.z);line2.material=new LineBasicMaterial({color:labelTextColor}),this.add(line2)}catch(e){console.error(`origName: ${origName}, hipId: ${hipId}: ${e}`);continue}prevStar=star}}}}reify(record,catalog){let paths=record.paths;for(let i=0;i<paths.length;i++){let path=paths[i];for(let n=0;n<path.length;n++){let[origName,name,hipId]=this.stars.catalog.reifyName(path[n]);hipId&&(path[n]=name)}}}};function assertFinite2(num,msg){if(!Number.isFinite(num))throw new Error(msg||`Is not a number: ${num}`);return num}function assertInRange(num,min,max,msg){if(assertFinite2(num),num<min||num>max)throw new Error(msg||`${num} is not in range (${min}, ${max}))`);return num}var REGISTRY=[],Object2=class extends Object3D{constructor(name,props,onClick){super(),this.name=name,this.props=props||{name},this.onClick=onClick,REGISTRY[name]=this}};var Planet=class extends Object2{constructor(scene,props,isMoon=!1){super(props.name,props),this.scene=scene,this.isMoon=isMoon,this.load()}load(){let orbit=this.props.orbit,group=this.scene.newGroup(`${this.name}.group`),orbitPlane=this.scene.newGroup(`${this.name}.orbitPlane`);group.add(orbitPlane),orbitPlane.rotation.x=assertInRange(orbit.inclination,0,360)*toRad,orbitPlane.rotation.y=assertInRange(orbit.longitudeOfPericenter,0,360)*toRad;let orbitShape=this.newOrbit(this.scene,orbit,this.name);orbitPlane.add(orbitShape);let orbitPosition=this.scene.newGroup(`${this.name}.orbitPosition`);orbitPlane.add(orbitPosition),orbitPosition.orbit=this.props.orbit;let planetTilt=this.scene.newGroup(`${this.name}.planetTilt`);orbitPosition.add(planetTilt),planetTilt.rotateZ(assertInRange(this.props.axialInclination,0,360)*toRad);let planet=this.newPlanet(this.scene,orbitPosition,this.isMoon);planetTilt.add(planet),this.add(group)}newOrbit(scene,orbit){let group=named(new Group,"orbit");group.visible=!1;let ellipsePoints=new EllipseCurve(0,0,1,ellipseSemiMinorAxisCurve(assertInRange(orbit.eccentricity,0,1)),0,Math.PI).getPoints(1e3),ellipseGeometry=new BufferGeometry().setFromPoints(ellipsePoints),orbitMaterial=new LineBasicMaterial({color:255,blending:AdditiveBlending,depthTest:!0,depthWrite:!1,transparent:!1}),pathShape=new Line(ellipseGeometry,orbitMaterial);return pathShape.rotation.x=halfPi,group.add(pathShape),group.add(line(1,0,0,{color:"blue"})),group.scale.setScalar(assertFinite2(orbit.semiMajorAxis.scalar)*LENGTH_SCALE),group}newPlanet(scene,orbitPosition,isMoon){let planet=new Object3D;planet.scale.setScalar(assertFinite2(this.props.radius.scalar)*LENGTH_SCALE),planet.siderealRotationPeriod=this.props.siderealRotationPeriod,planet.orbitPosition=orbitPosition,planet.props=this.props,scene.objects&&(scene.objects[this.name]=planet),this.props.has_locations&&planet.add(this.loadLocations(this.props));let closePoint=point({color:"green",size:1,sizeAttenuation:!1,blending:AdditiveBlending,depthTest:!0,transparent:!0});planet.add(closePoint);let farPoint=point({color:5614335,size:isMoon?1:2,sizeAttenuation:!1,blending:AdditiveBlending,depthTest:!0,transparent:!0}),planetLOD=new LOD;planetLOD.addLevel(planet,1),planetLOD.addLevel(farPoint,1e3),planetLOD.addLevel(FAR_OBJ,this.isMoon?1e7:1e8),closePoint.onBeforeRender=()=>{planet.add(this.nearShape()),closePoint.onBeforeRender=null,delete closePoint.onBeforeRender};let labelLOD=new LOD,name=capitalize(this.name),labelSheet=new SpriteSheet(1,name);labelSheet.add(0,0,0,name,labelTextColor),labelLOD.addLevel(labelSheet.compile(),1),labelLOD.addLevel(FAR_OBJ,this.isMoon?2e3:5e6);let group=new Object3D;return group.add(planetLOD),group.add(named(labelLOD,"label")),group}nearShape(){let planetMaterial=cacheMaterial(this.name);if(planetMaterial.shininess=30,this.props.texture_terrain&&(planetMaterial.bumpMap=pathTexture(`${this.name}_terrain`),planetMaterial.bumpScale=.001),this.props.texture_hydrosphere){let hydroTex=pathTexture(`${this.name}_hydro`);planetMaterial.specularMap=hydroTex,planetMaterial.shininess=50}let shape=sphere({matr:planetMaterial});if(this.props.texture_atmosphere&&shape.add(this.newAtmosphere()),this.props.name==="saturn"){shape.castShadow=!0,shape.add(rings("saturn",!0,BackSide));let underRings=rings("saturn",!0,FrontSide);underRings.position.setY(-.01),underRings.rotateX(Math.PI),shape.add(underRings)}return shape}newAtmosphere(){let atmosTex=pathTexture(this.name,"_atmos.jpg"),shape=sphere({radius:1.01,matr:new MeshPhongMaterial({color:16777215,alphaMap:atmosTex,transparent:!0,specularMap:atmosTex,shininess:100})});return shape.name=`${this.name}.atmosphere`,shape}};var VERTEX_SHADER=`
uniform vec3 uColor;
uniform float iScale;
uniform float iTime;
varying vec3 vTexCoord3D;
varying vec3 vColor;
void main() {
  // Time is being used here to morph the noise field.
  vColor = uColor;
  vTexCoord3D = iScale * ( position.xyz + vec3( iTime, iTime, iTime ) );
  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,FRAGMENT_SHADER=`
varying vec3 vColor;
varying vec3 vTexCoord3D;

uniform float uHighTemp;
uniform float uLowTemp;
uniform float iDist;
//const float highTemp = 5778.;
//const float lowTemp = highTemp / 4.;

//  Noise fnunctions are taken from here:
//
// Description : Array and textureless GLSL 2D/3D/4D simplex
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//
vec4 permute( vec4 x ) {
  return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );
}

vec4 taylorInvSqrt( vec4 r ) {
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise( vec3 v ) {

  const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );
  const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );

  // First corner
  vec3 i  = floor( v + dot( v, C.yyy ) );
  vec3 x0 = v - i + dot( i, C.xxx );

  // Other corners
  vec3 g = step( x0.yzx, x0.xyz );
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

  // Permutations
  i = mod( i, 289.0 );
  vec4 p = permute( permute( permute(
                                     i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )
                             + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )
                    + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );

  // Gradients
  // ( N*N points uniformly over a square, mapped onto an octahedron.)

  float n_ = 1.0 / 7.0; // N=7

  vec3 ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)

  vec4 x_ = floor( j * ns.z );
  vec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs( x ) - abs( y );

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor( b0 ) * 2.0 + 1.0;
  vec4 s1 = floor( b1 ) * 2.0 + 1.0;
  vec4 sh = -step( h, vec4( 0.0 ) );

  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

  vec3 p0 = vec3( a0.xy, h.x );
  vec3 p1 = vec3( a0.zw, h.y );
  vec3 p2 = vec3( a1.xy, h.z );
  vec3 p3 = vec3( a1.zw, h.w );

  // Normalise gradients

  vec4 norm = taylorInvSqrt( vec4( dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3) ) );
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

  // Mix final noise value

  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3) ), 0.0 );
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );

}

const int octaves = 4;

float noise(vec3 position, float frequency, float persistence) {
  float total = 0.0; // Total value so far
  float maxAmplitude = 0.0; // Accumulates highest theoretical amplitude
  float amplitude = 1.0;
  for (int i = 0; i < octaves; i++) {
    // Get the noise sample
    total += snoise(position * frequency) * amplitude;
    // Make the wavelength twice as small
    frequency *= 2.0;
    // Add to our maximum possible amplitude
    maxAmplitude += amplitude;
    // Reduce amplitude according to persistence for the next octave
    amplitude *= persistence;
  }
  // Scale the result by the maximum amplitude
  return total / maxAmplitude;
}

//  star rendering heavily borrows from the tips here:
//  https://www.seedofandromeda.com/blogs/51-procedural-star-rendering
void main(void) {

  float noiseBase = (noise(vTexCoord3D, .4, 0.7)+1.0)/2.0;

  // Sunspots
  float frequency = 0.04;
  float t1 = snoise(vTexCoord3D * frequency)*2.7 -  1.9;
  float brightNoise= snoise(vTexCoord3D * .02)*1.4- .9;

  float ss = max(0.0, t1);
  float brightSpot = max(0.0, brightNoise);
  float total = noiseBase - ss + brightSpot;

  float temp = (uHighTemp * (total) + (1.0-total) * uLowTemp);
  // these equations reproduce the RGB values of this image:
  // https://www.seedofandromeda.com/assets/images/blogs/star_spectrum_3.png
  float i = (temp - 800.0)*0.035068;

  //  for R
  bool rbucket1 = i < 60.0;   //  0, 255 in 60
  bool rbucket2 = i >= 60.0 && i < 236.0;  //   255,255
  bool rbucket3 = i >= 236.0 && i < 288.0; //  255,128
  bool rbucket4 = i >= 288.0 && i < 377.0; //  128,60
  bool rbucket5 = i >= 377.0 && i < 511.0; //  60,0
  bool rbucket6 = i >= 511.0;  //  0,0

  bool gbucket1 = i <60.0;
  bool gbucket2 = i >= 60.0 && i < 103.0; //  0,100
  bool gbucket3 = i >= 103.0 && i < 133.0; // 100,233
  bool gbucket4 = i >= 133.0 && i < 174.0; // 233, 255
  bool gbucket5 = i >= 174.0 && i < 236.0; // 255,255
  bool gbucket6 = i >= 236.0 && i < 286.0; //255,193
  bool gbucket7 = i >= 286.0 && i < 367.0; //193,129
  bool gbucket8 = i >= 367.0 && i < 511.0; //129,64
  bool gbucket9 = i >= 511.0; // 64,32

  // for B
  bool bbucket1 = i < 103.0;
  bool bbucket2 = i >= 103.0 && i < 133.0; // 0,211
  bool bbucket3 = i >= 133.0 && i < 173.0; // 211,247
  bool bbucket4 = i >= 173.0 && i < 231.0;  //  247,255
  bool bbucket5 = i>= 231.0;

  float r =
    float(rbucket1) * (0.0 + i * 4.25) +
    float(rbucket2) * (255.0) +
    float(rbucket3) * (255.0 + (i - 236.0) * -2.442) +
    float(rbucket4) * (128.0 + (i - 288.0) * -0.764) +
    float(rbucket5) * (60.0 + (i - 377.0) * -0.4477)+
    float(rbucket6) * 0.0;

  float g =
    float(gbucket1) * (0.0) +
    float(gbucket2) * (0.0 + (i - 60.0) *2.3255) +
    float(gbucket3) * (100.0 + (i - 103.0) *4.433)+
    float(gbucket4) * (233.0 + (i - 133.0) *0.53658)+
    float(gbucket5) * (255.0) +
    float(gbucket6) * (255.0 +(i - 236.0) *-1.24) +
    float(gbucket7) * (193.0 + (i - 286.0) *-0.7901) +
    float(gbucket8) * (129.0 + (i - 367.0) * -0.45138)+
    float(gbucket9) * (64.0 + (i - 511.0) * -0.06237);

  float b =
    float(bbucket1) * 0.0+
    float(bbucket2) * (0.0 + (i - 103.0) * 7.0333) +
    float(bbucket3) * (211.0 + (i - 133.0) * 0.9)+
    float(bbucket4) * (247.0 + (i - 173.0)*0.1379)+
    float(bbucket5) * 255.0;

 float mult = iDist * 20.2;
  r += mult;
  g += mult;
  b += mult;
  gl_FragColor = vec4(vColor, 1.) * vec4(vec3(r/255.0, g/255.0, b/255.0), 1.0);
}
`;var Star=class extends Object2{constructor(props,sceneObjects,ui,shadowProps={}){if(super(props.name,props),!this.props||!this.props.radius)throw console.error("props",this.props),new Error(`Props undefined: props(${props}), radius(${props.radius})`);this.ui=ui,sceneObjects&&(sceneObjects[this.name]=this,sceneObjects[`${this.name}.orbitPosition`]=this),this.orbitPosition=this;let sunlight=new PointLight(16777215,1,0,0);sunlight.castShadow=!0,sunlight.shadow.mapSize.width=shadowProps.width||512,sunlight.shadow.mapSize.height=shadowProps.height||512,sunlight.shadow.camera.near=shadowProps.near||.5,sunlight.shadow.camera.far=shadowProps.far||500,sunlight.shadow.bias=shadowProps.bias||-.01,sunlight.decay=shadowProps.decay||1,this.add(sunlight);let lod=new LOD;lod.addLevel(this.createSurface(props),1);let farLod=props.radius.scalar*LENGTH_SCALE*110;lod.addLevel(FAR_OBJ,farLod),this.add(lod)}createSurface(props){let temp=[[8152,10060],[11950,12250],[8152,10060],[6e3,7600],[5778,1444.5],[4256,4316],[3400,3800],[3400,3800],[3400,3800],[3400,3800],[8152,10060],[8152,10060],[8152,10060],[8152,10060],[8152,10060],[8152,10060]][props.spectralType];this.shaderMaterial=new ShaderMaterial({uniforms:{uColor:{value:new Vector3(1,1,1)},uLowTemp:{value:parseFloat(temp[0])},uHighTemp:{value:parseFloat(temp[1])},iTime:{value:1},iResolution:{value:new Vector2},iScale:{value:100},iDist:{value:1}},vertexShader:VERTEX_SHADER,fragmentShader:FRAGMENT_SHADER});let surface=sphere({matr:this.shaderMaterial});return surface.scale.setScalar(props.radius.scalar*LENGTH_SCALE),this.setupAnim(),surface}setupAnim(){this.preAnimCb=time=>{if(time=Math.log(1+time.simTimeElapsed*8e-7),targets.pos){this.shaderMaterial.uniforms.iTime.value=time;let d=targets.pos.distanceTo(this.ui.camera.position);this.shaderMaterial.uniforms.iDist.value=d*.01}}}};var StarsBufferGeometry=class extends BufferGeometry{constructor(catalog){super();let numStars=catalog.numStars;this.idsByNdx=new Int32Array(numStars),this.coords=new Float32Array(numStars*3),this.starsArray=[];let colors=new Float32Array(numStars*3),sizes=new Float32Array(numStars),sunSpectrum=StarSpectra[4],i=0;for(let hipId in catalog.starsByHip){if(!Object.prototype.hasOwnProperty.call(hipId,catalog.starsByHip))continue;let star=catalog.starsByHip[hipId];this.idsByNdx[i]=hipId,this.starsArray.push(star);let off=3*i;this.coords[off]=catalog.starScale*star.x,this.coords[off+1]=catalog.starScale*star.y,this.coords[off+2]=catalog.starScale*star.z;let rgb=StarSpectra[star.spectralType];rgb=rgb||sunSpectrum;let r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255;colors[off]=r,colors[off+1]=g,colors[off+2]=b,sizes[i]=star.radius*catalog.lengthScale,i++}this.setAttribute("position",new BufferAttribute(this.coords,3)),this.setAttribute("color",new BufferAttribute(colors,3)),this.setAttribute("size",new BufferAttribute(sizes,1)),this.computeBoundingSphere()}};var MAX_LABELS=1e4,Stars=class extends Object2{constructor(props,catalogOrCb,pointsLoadedCb,showLabels=!1,faves=FAVES){if(super("Stars",props),this.labelsGroup=named(new Group,"LabelsGroup"),this.pointsLoadedCb=pointsLoadedCb,this.faves=faves,this.labelLOD=named(new LOD,"LabelsLOD"),this.labelLOD.visible=showLabels,this.labelLOD.addLevel(this.labelsGroup,1),this.labelLOD.addLevel(FAR_OBJ,1e14),this.add(this.labelLOD),this.geom=null,this.labelCenterPosByName={},catalogOrCb instanceof StarsCatalog){console.log("Caller gave catalog: ",catalogOrCb);let catalog=catalogOrCb;if(!catalog.starsByHip)throw new Error("Invalid stars catalog");this.catalog=catalog,this.show(),showLabels&&this.showLabels()}else this.catalog=new StarsCatalog,this.catalog.load(()=>{this.show(),typeof catalogOrCb=="function"&&catalogOrCb(),showLabels&&this.showLabels()})}show(){this.geom=new StarsBufferGeometry(this.catalog);let starImage=pathTexture("star_glow",".png"),starsMaterial=new ShaderMaterial({uniforms:{texSampler:{value:starImage}},vertexShader:"/shaders/stars.vert",fragmentShader:"/shaders/stars.frag",blending:AdditiveBlending,depthTest:!0,depthWrite:!1,transparent:!0});new Loader2().loadShaders(starsMaterial,()=>{let starPoints=named(new Points(this.geom,starsMaterial),"StarsPoints");starPoints.sortParticles=!0,this.add(starPoints),window.sp=starPoints,this.pointsLoadedCb&&this.pointsLoadedCb()})}showLabels(level=2){let toShow=[];this.addFaves(toShow);for(let hipId in this.catalog.starsByHip){if(this.faves[hipId])continue;let star=this.catalog.starsByHip[hipId],names=this.catalog.namesByHip[hipId];if(names&&names.length>level?toShow.push([star,names[0]]):star.absMag<-5&&toShow.push([star,`HIP ${hipId}`]),toShow.length>=MAX_LABELS){console.warn(`Stars#showLabels: hit max count of ${MAX_LABELS}`);break}}this.starLabelSpriteSheet=new SpriteSheet(toShow.length,"Rigel Kentaurus B");for(let i=0;i<toShow.length;i++){let[star,name]=toShow[i];this.showStarName(star,name)}this.labelsGroup.add(this.starLabelSpriteSheet.compile())}showStarName(star,name){let scale=this.catalog.starScale,x=scale*star.x,y=scale*star.y,z=scale*star.z,sPos=new Vector3(x,y,z);this.starLabelSpriteSheet.add(x,y,z,name),this.labelCenterPosByName[name]=sPos}addFaves(toShow){for(let hipId in this.faves){if(!Object2.prototype.hasOwnProperty.call(hipId,this.faves))continue;let star=this.catalog.starsByHip[hipId];if(star)toShow.push([star,this.faves[hipId]]);else throw new Error(`Null star for hipId(${hipId})`)}}};function queryPoints(ui,e,tree,coords,idsByNdx,pickCb){let mouse={x:e.clientX/ui.renderer.domElement.clientWidth*2-1,y:e.clientY/ui.renderer.domElement.clientHeight*-2+1},raycaster=new Raycaster;raycaster.setFromCamera(mouse,ui.camera);let ray=raycaster.ray,items=tree.intersectRay(ray.origin,ray.direction);items.length>0&&mark(ui,items,mouse,coords,idsByNdx,pickCb)}function mark(ui,items,mouse,stars,pickCb){let itemVec=new Vector3,mouseVec=new Vector3,minX=0,minY=0,minZ=0,minDist=1/0,closestNdx=0,coords=stars.geom.coords;for(let i=0;i<items.length;i+=3){let ndx=items[i],x=coords[ndx],y=coords[ndx+1],z=coords[ndx+2];itemVec.set(x,y,z),itemVec.project(ui.camera),mouseVec.x=mouse.x,mouseVec.y=mouse.y,mouseVec.z=0;let dist=itemVec.distanceTo(mouseVec)/ui.height;dist<minDist&&(minDist=dist,closestNdx=ndx,minX=x,minY=y,minZ=z)}let hipId=stars.geom.idsByNdx[closestNdx/3],star=stars.catalog.starsByHip[hipId];pickCb({star,x:minX,y:minY,z:minZ})}var _changeEvent={type:"change"},_startEvent={type:"start"},_endEvent={type:"end"},TrackballControls=class extends EventDispatcher{constructor(object,domElement){super();let scope=this,STATE={NONE:-1,ROTATE:0,ZOOM:1,PAN:2,TOUCH_ROTATE:3,TOUCH_ZOOM_PAN:4};this.object=object,this.domElement=domElement,this.domElement.style.touchAction="none",this.enabled=!0,this.screen={left:0,top:0,width:0,height:0},this.rotateSpeed=1,this.zoomSpeed=1.2,this.panSpeed=.3,this.noRotate=!1,this.noZoom=!1,this.noPan=!1,this.staticMoving=!1,this.dynamicDampingFactor=.2,this.minDistance=0,this.maxDistance=1/0,this.keys=["KeyA","KeyS","KeyD"],this.mouseButtons={LEFT:MOUSE.ROTATE,MIDDLE:MOUSE.DOLLY,RIGHT:MOUSE.PAN},this.target=new Vector3;let EPS=1e-6,lastPosition=new Vector3,lastZoom=1,_state=STATE.NONE,_keyState=STATE.NONE,_touchZoomDistanceStart=0,_touchZoomDistanceEnd=0,_lastAngle=0,_eye=new Vector3,_movePrev=new Vector2,_moveCurr=new Vector2,_lastAxis=new Vector3,_zoomStart=new Vector2,_zoomEnd=new Vector2,_panStart=new Vector2,_panEnd=new Vector2,_pointers=[],_pointerPositions={};this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.up0=this.object.up.clone(),this.zoom0=this.object.zoom,this.handleResize=function(){let box2=scope.domElement.getBoundingClientRect(),d=scope.domElement.ownerDocument.documentElement;scope.screen.left=box2.left+window.pageXOffset-d.clientLeft,scope.screen.top=box2.top+window.pageYOffset-d.clientTop,scope.screen.width=box2.width,scope.screen.height=box2.height};let getMouseOnScreen=function(){let vector=new Vector2;return function(pageX,pageY){return vector.set((pageX-scope.screen.left)/scope.screen.width,(pageY-scope.screen.top)/scope.screen.height),vector}}(),getMouseOnCircle=function(){let vector=new Vector2;return function(pageX,pageY){return vector.set((pageX-scope.screen.width*.5-scope.screen.left)/(scope.screen.width*.5),(scope.screen.height+2*(scope.screen.top-pageY))/scope.screen.width),vector}}();this.rotateCamera=function(){let axis=new Vector3,quaternion=new Quaternion,eyeDirection=new Vector3,objectUpDirection=new Vector3,objectSidewaysDirection=new Vector3,moveDirection=new Vector3;return function(){moveDirection.set(_moveCurr.x-_movePrev.x,_moveCurr.y-_movePrev.y,0);let angle2=moveDirection.length();angle2?(_eye.copy(scope.object.position).sub(scope.target),eyeDirection.copy(_eye).normalize(),objectUpDirection.copy(scope.object.up).normalize(),objectSidewaysDirection.crossVectors(objectUpDirection,eyeDirection).normalize(),objectUpDirection.setLength(_moveCurr.y-_movePrev.y),objectSidewaysDirection.setLength(_moveCurr.x-_movePrev.x),moveDirection.copy(objectUpDirection.add(objectSidewaysDirection)),axis.crossVectors(moveDirection,_eye).normalize(),angle2*=scope.rotateSpeed,quaternion.setFromAxisAngle(axis,angle2),_eye.applyQuaternion(quaternion),scope.object.up.applyQuaternion(quaternion),_lastAxis.copy(axis),_lastAngle=angle2):!scope.staticMoving&&_lastAngle&&(_lastAngle*=Math.sqrt(1-scope.dynamicDampingFactor),_eye.copy(scope.object.position).sub(scope.target),quaternion.setFromAxisAngle(_lastAxis,_lastAngle),_eye.applyQuaternion(quaternion),scope.object.up.applyQuaternion(quaternion)),_movePrev.copy(_moveCurr)}}(),this.zoomCamera=function(){let factor;_state===STATE.TOUCH_ZOOM_PAN?(factor=_touchZoomDistanceStart/_touchZoomDistanceEnd,_touchZoomDistanceStart=_touchZoomDistanceEnd,scope.object.isPerspectiveCamera?_eye.multiplyScalar(factor):scope.object.isOrthographicCamera?(scope.object.zoom/=factor,scope.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")):(factor=1+(_zoomEnd.y-_zoomStart.y)*scope.zoomSpeed,factor!==1&&factor>0&&(scope.object.isPerspectiveCamera?_eye.multiplyScalar(factor):scope.object.isOrthographicCamera?(scope.object.zoom/=factor,scope.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")),scope.staticMoving?_zoomStart.copy(_zoomEnd):_zoomStart.y+=(_zoomEnd.y-_zoomStart.y)*this.dynamicDampingFactor)},this.panCamera=function(){let mouseChange=new Vector2,objectUp=new Vector3,pan=new Vector3;return function(){if(mouseChange.copy(_panEnd).sub(_panStart),mouseChange.lengthSq()){if(scope.object.isOrthographicCamera){let scale_x=(scope.object.right-scope.object.left)/scope.object.zoom/scope.domElement.clientWidth,scale_y=(scope.object.top-scope.object.bottom)/scope.object.zoom/scope.domElement.clientWidth;mouseChange.x*=scale_x,mouseChange.y*=scale_y}mouseChange.multiplyScalar(_eye.length()*scope.panSpeed),pan.copy(_eye).cross(scope.object.up).setLength(mouseChange.x),pan.add(objectUp.copy(scope.object.up).setLength(mouseChange.y)),scope.object.position.add(pan),scope.target.add(pan),scope.staticMoving?_panStart.copy(_panEnd):_panStart.add(mouseChange.subVectors(_panEnd,_panStart).multiplyScalar(scope.dynamicDampingFactor))}}}(),this.checkDistances=function(){(!scope.noZoom||!scope.noPan)&&(_eye.lengthSq()>scope.maxDistance*scope.maxDistance&&(scope.object.position.addVectors(scope.target,_eye.setLength(scope.maxDistance)),_zoomStart.copy(_zoomEnd)),_eye.lengthSq()<scope.minDistance*scope.minDistance&&(scope.object.position.addVectors(scope.target,_eye.setLength(scope.minDistance)),_zoomStart.copy(_zoomEnd)))},this.update=function(){_eye.subVectors(scope.object.position,scope.target),scope.noRotate||scope.rotateCamera(),scope.noZoom||scope.zoomCamera(),scope.noPan||scope.panCamera(),scope.object.position.addVectors(scope.target,_eye),scope.object.isPerspectiveCamera?(scope.checkDistances(),scope.object.lookAt(scope.target),lastPosition.distanceToSquared(scope.object.position)>EPS&&(scope.dispatchEvent(_changeEvent),lastPosition.copy(scope.object.position))):scope.object.isOrthographicCamera?(scope.object.lookAt(scope.target),(lastPosition.distanceToSquared(scope.object.position)>EPS||lastZoom!==scope.object.zoom)&&(scope.dispatchEvent(_changeEvent),lastPosition.copy(scope.object.position),lastZoom=scope.object.zoom)):console.warn("THREE.TrackballControls: Unsupported camera type")},this.reset=function(){_state=STATE.NONE,_keyState=STATE.NONE,scope.target.copy(scope.target0),scope.object.position.copy(scope.position0),scope.object.up.copy(scope.up0),scope.object.zoom=scope.zoom0,scope.object.updateProjectionMatrix(),_eye.subVectors(scope.object.position,scope.target),scope.object.lookAt(scope.target),scope.dispatchEvent(_changeEvent),lastPosition.copy(scope.object.position),lastZoom=scope.object.zoom};function onPointerDown(event){scope.enabled!==!1&&(_pointers.length===0&&(scope.domElement.setPointerCapture(event.pointerId),scope.domElement.addEventListener("pointermove",onPointerMove),scope.domElement.addEventListener("pointerup",onPointerUp)),addPointer(event),event.pointerType==="touch"?onTouchStart(event):onMouseDown(event))}function onPointerMove(event){scope.enabled!==!1&&(event.pointerType==="touch"?onTouchMove(event):onMouseMove(event))}function onPointerUp(event){scope.enabled!==!1&&(event.pointerType==="touch"?onTouchEnd(event):onMouseUp(),removePointer(event),_pointers.length===0&&(scope.domElement.releasePointerCapture(event.pointerId),scope.domElement.removeEventListener("pointermove",onPointerMove),scope.domElement.removeEventListener("pointerup",onPointerUp)))}function onPointerCancel(event){removePointer(event)}function keydown(event){scope.enabled!==!1&&(window.removeEventListener("keydown",keydown),_keyState===STATE.NONE&&(event.code===scope.keys[STATE.ROTATE]&&!scope.noRotate?_keyState=STATE.ROTATE:event.code===scope.keys[STATE.ZOOM]&&!scope.noZoom?_keyState=STATE.ZOOM:event.code===scope.keys[STATE.PAN]&&!scope.noPan&&(_keyState=STATE.PAN)))}function keyup(){scope.enabled!==!1&&(_keyState=STATE.NONE,window.addEventListener("keydown",keydown))}function onMouseDown(event){if(_state===STATE.NONE)switch(event.button){case scope.mouseButtons.LEFT:_state=STATE.ROTATE;break;case scope.mouseButtons.MIDDLE:_state=STATE.ZOOM;break;case scope.mouseButtons.RIGHT:_state=STATE.PAN;break}let state=_keyState!==STATE.NONE?_keyState:_state;state===STATE.ROTATE&&!scope.noRotate?(_moveCurr.copy(getMouseOnCircle(event.pageX,event.pageY)),_movePrev.copy(_moveCurr)):state===STATE.ZOOM&&!scope.noZoom?(_zoomStart.copy(getMouseOnScreen(event.pageX,event.pageY)),_zoomEnd.copy(_zoomStart)):state===STATE.PAN&&!scope.noPan&&(_panStart.copy(getMouseOnScreen(event.pageX,event.pageY)),_panEnd.copy(_panStart)),scope.dispatchEvent(_startEvent)}function onMouseMove(event){let state=_keyState!==STATE.NONE?_keyState:_state;state===STATE.ROTATE&&!scope.noRotate?(_movePrev.copy(_moveCurr),_moveCurr.copy(getMouseOnCircle(event.pageX,event.pageY))):state===STATE.ZOOM&&!scope.noZoom?_zoomEnd.copy(getMouseOnScreen(event.pageX,event.pageY)):state===STATE.PAN&&!scope.noPan&&_panEnd.copy(getMouseOnScreen(event.pageX,event.pageY))}function onMouseUp(){_state=STATE.NONE,scope.dispatchEvent(_endEvent)}function onMouseWheel(event){if(scope.enabled!==!1&&scope.noZoom!==!0){switch(event.preventDefault(),event.deltaMode){case 2:_zoomStart.y-=event.deltaY*.025;break;case 1:_zoomStart.y-=event.deltaY*.01;break;default:_zoomStart.y-=event.deltaY*25e-5;break}scope.dispatchEvent(_startEvent),scope.dispatchEvent(_endEvent)}}function onTouchStart(event){switch(trackPointer(event),_pointers.length){case 1:_state=STATE.TOUCH_ROTATE,_moveCurr.copy(getMouseOnCircle(_pointers[0].pageX,_pointers[0].pageY)),_movePrev.copy(_moveCurr);break;default:_state=STATE.TOUCH_ZOOM_PAN;let dx=_pointers[0].pageX-_pointers[1].pageX,dy=_pointers[0].pageY-_pointers[1].pageY;_touchZoomDistanceEnd=_touchZoomDistanceStart=Math.sqrt(dx*dx+dy*dy);let x=(_pointers[0].pageX+_pointers[1].pageX)/2,y=(_pointers[0].pageY+_pointers[1].pageY)/2;_panStart.copy(getMouseOnScreen(x,y)),_panEnd.copy(_panStart);break}scope.dispatchEvent(_startEvent)}function onTouchMove(event){switch(trackPointer(event),_pointers.length){case 1:_movePrev.copy(_moveCurr),_moveCurr.copy(getMouseOnCircle(event.pageX,event.pageY));break;default:let position=getSecondPointerPosition(event),dx=event.pageX-position.x,dy=event.pageY-position.y;_touchZoomDistanceEnd=Math.sqrt(dx*dx+dy*dy);let x=(event.pageX+position.x)/2,y=(event.pageY+position.y)/2;_panEnd.copy(getMouseOnScreen(x,y));break}}function onTouchEnd(event){switch(_pointers.length){case 0:_state=STATE.NONE;break;case 1:_state=STATE.TOUCH_ROTATE,_moveCurr.copy(getMouseOnCircle(event.pageX,event.pageY)),_movePrev.copy(_moveCurr);break;case 2:_state=STATE.TOUCH_ZOOM_PAN;for(let i=0;i<_pointers.length;i++)if(_pointers[i].pointerId!==event.pointerId){let position=_pointerPositions[_pointers[i].pointerId];_moveCurr.copy(getMouseOnCircle(position.x,position.y)),_movePrev.copy(_moveCurr);break}break}scope.dispatchEvent(_endEvent)}function contextmenu(event){scope.enabled!==!1&&event.preventDefault()}function addPointer(event){_pointers.push(event)}function removePointer(event){delete _pointerPositions[event.pointerId];for(let i=0;i<_pointers.length;i++)if(_pointers[i].pointerId==event.pointerId){_pointers.splice(i,1);return}}function trackPointer(event){let position=_pointerPositions[event.pointerId];position===void 0&&(position=new Vector2,_pointerPositions[event.pointerId]=position),position.set(event.pageX,event.pageY)}function getSecondPointerPosition(event){let pointer=event.pointerId===_pointers[0].pointerId?_pointers[1]:_pointers[0];return _pointerPositions[pointer.pointerId]}this.dispose=function(){scope.domElement.removeEventListener("contextmenu",contextmenu),scope.domElement.removeEventListener("pointerdown",onPointerDown),scope.domElement.removeEventListener("pointercancel",onPointerCancel),scope.domElement.removeEventListener("wheel",onMouseWheel),scope.domElement.removeEventListener("pointermove",onPointerMove),scope.domElement.removeEventListener("pointerup",onPointerUp),window.removeEventListener("keydown",keydown),window.removeEventListener("keyup",keyup)},this.domElement.addEventListener("contextmenu",contextmenu),this.domElement.addEventListener("pointerdown",onPointerDown),this.domElement.addEventListener("pointercancel",onPointerCancel),this.domElement.addEventListener("wheel",onMouseWheel,{passive:!1}),window.addEventListener("keydown",keydown),window.addEventListener("keyup",keyup),this.handleResize(),this.update()}};var Fullscreen=class{constructor(container,cb){if(this.container=container,this.elt=document.createElement("div"),this.elt.setAttribute("class","fullscreen-control"),this.dash=document.createElement("div"),this.dash.setAttribute("class","fullscreen-dash"),this.elt.appendChild(this.dash),this.container.appendChild(this.elt),this.cb=cb,this.content=container,this.origPosition=this.container.style.position,this.origWidth=this.container.offsetWidth,this.origHeight=this.container.offsetHeight,this.origMargin=this.container.style.margin,this.fs=this.origWidth==window.innerWidth&&this.origHeight==window.innerHeight,this.fs){this.dash.display="none";return}this.elt.onclick=()=>{this.toggle()}}isFullscreen(){return this.fs}makeFullscreen(){this.isFullscreen()||this.toggle()}toggle(){this.isFullscreen()?(this.container.style.position=this.origPosition,this.container.style.margin=this.origMargin,this.container.style.width=this.origWidth+"px",this.container.style.height=this.origHeight+"px",this.dash.setAttribute("class","fullscreen-dash"),this.fs=!1,this.cb&&this.cb()):(this.container.style.position="absolute",this.container.style.margin="0",this.container.style.width=window.innerWidth+"px",this.container.style.height=window.innerHeight+"px",this.dash.setAttribute("class","fullscreen-dash-zoomed"),this.fs=!0,this.cb&&this.cb())}};var ThreeUi=class{constructor(container,animationCb,backgroundColor,renderer){if(typeof container=="string")this.container=document.getElementById(container);else if(typeof container=="object")this.container=container;else throw new Error(`Given container must be DOM ID or element: ${container}`);this.threeContainer=document.createElement("div"),this.threeContainer.style.width=this.container.offsetWidth,this.threeContainer.style.height=this.container.offsetHeight,this.container.appendChild(this.threeContainer),this.animationCb=animationCb||null,this.renderer=renderer||this.initRenderer(this.threeContainer,backgroundColor||0),this.width=this.threeContainer.offsetWidth,this.height=this.threeContainer.offsetHeight;let ratio=this.width/this.height;this.camera=new PerspectiveCamera(INITIAL_FOV,ratio,.001,1e35),this.camera.platform=named(new Object3D,"CameraPlatform"),this.camera.platform.add(this.camera),this.initControls(this.camera),this.fs=new Fullscreen(this.container,()=>{this.onResize()}),window.addEventListener("resize",()=>{this.fs.isFullscreen()&&this.onResize()}),this.onResize(),this.scene=new Scene,this.scene.add(this.camera.platform),this.clickCbs=[],this.mouse=new Vector2,this.clicked=!1,this.renderer.setAnimationLoop(()=>{this.renderLoop()})}addClickCb(clickCb){this.clickCbs.push(clickCb)}initRenderer(container,backgroundColor){let canvas=document.createElement("canvas"),ctx=canvas.getContext("webgl2");container.appendChild(canvas);let renderer=new WebGLRenderer({canvas,context:ctx,antialias:!0});return renderer.toneMapping=ACESFilmicToneMapping,renderer.toneMappingExposure=.6,renderer.outputEncoding=sRGBEncoding,this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,renderer.setClearColor(backgroundColor,1),renderer.setSize(this.width,this.height),renderer.sortObjects=!0,renderer.autoClear=!0,renderer.shadowMap.enabled=!0,renderer.shadowMap.type=PCFSoftShadowMap,renderer}initControls(camera){let controls=new TrackballControls(camera,this.threeContainer);controls.noZoom=!1,controls.noPan=!1,controls.staticMoving=!0,controls.dynamicDampingFactor=.3,window.controls=controls,controls.target=camera.platform.position,this.controls=controls}onResize(){let width,height;this.fs.isFullscreen()?(width=window.innerWidth,height=window.innerHeight):(width=this.container.offsetWidth,height=this.container.offsetHeight),this.camera.aspect=width/height,this.camera.updateProjectionMatrix(),this.renderer.setSize(width,height),this.controls.handleResize()}setFov(fov2){this.camera.fov=fov2,this.camera.updateProjectionMatrix()}multFov(factor){let newFov=this.camera.fov*factor;newFov>=180||this.setFov(newFov)}resetFov(){this.setFov(INITIAL_FOV)}setAnimation(animationCb){this.animationCb=animationCb}renderLoop(){if(this.camera.updateMatrixWorld(),this.clicked){for(let i in this.clickCbs)if(Object.prototype.hasOwnProperty.call(i,this.clickCbs)){let clickCb=this.clickCbs[i];clickCb(this.mouse)}this.clicked=!1}this.controls.update(),this.animationCb&&this.animationCb(this.scene,this),this.renderer.render(this.scene,this.camera)}};function timeToDateStr(time){return new Date(time).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})}var Time=class{constructor(setTimeStr=()=>{}){this.timeScale=1,this.timeScaleBeforePause=null,this.timeScaleSteps=0;let now2=Date.now();this.startTime=now2,this.lastUpdate=now2,this.simTime=now2,this.simTimeElapsed=0,this.setTimeStr=setTimeStr,this.setTimeStr(timeToDateStr(this.simTime)),this.pause=!1,this.lastUiUpdateTime=0,this.updateTime()}updateTime(){let now2=Date.now(),timeDelta=now2-this.lastUpdate;this.lastUpdate=now2,this.sysTime=now2,this.simTime+=timeDelta*this.timeScale,this.simTimeElapsed=this.simTime-this.startTime,this.updateUi()}setTimeToNow(){this.timeScale=1,this.timeScaleSteps=0,this.simTime=this.sysTime,this.updateTime()}changeTimeScale(delta){this.pause||(delta===0?this.timeScaleSteps=0:this.timeScaleSteps+=delta,this.timeScale=(this.timeScaleSteps<0?-1:1)*Math.pow(2,Math.abs(this.timeScaleSteps)))}invertTimeScale(){this.timeScale*=-1,this.timeScaleSteps*=-1}togglePause(){this.pause?(this.timeScale=this.timeScaleBeforePause,this.pause=!1):(this.timeScaleBeforePause=this.timeScale,this.timeScale=0,this.pause=!0)}updateUi(){this.sysTime>this.lastUiUpdateTime+1e3&&(this.lastUiUpdateTime=this.sysTime,this.setTimeStr(timeToDateStr(this.simTime)))}};export{AdditiveBlending,Vector2,Vector3,Object3D,Float32BufferAttribute,BufferGeometry,Mesh,ShaderMaterial,LineBasicMaterial,Points,PointLight,AmbientLight,Raycaster,AxesHelper,three_module_exports,assertArgs,visitFilterProperty,visitToggleProperty,capitalize,elt,newElt,setTitleFromLocation,named,utils_exports,twoPi,toRad,LENGTH_SCALE,INITIAL_FOV,targets,shared_exports,Measure,makeCollapsable,collapse,StarsCatalog,getSunProps,StarSpectra,FAVES,Keys,Loader2 as Loader,reifyMeasures,createTree,SpriteSheet,pathTexture,cube,sphere,marker,line,arrow,angle,grid,shapes_exports,Asterisms,Planet,Star,Stars,queryPoints,ThreeUi,Time,HelpButton};
/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
//# sourceMappingURL=chunk-XEYVNUBX.js.map
